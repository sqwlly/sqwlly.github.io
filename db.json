{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/rebots.txt","path":"rebots.txt","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/baidu_verify_o824orCynC.html","path":"baidu_verify_o824orCynC.html","modified":0,"renderable":1},{"_id":"themes/next/source/baidu_verify_jZOkjPUN3h.html","path":"baidu_verify_jZOkjPUN3h.html","modified":0,"renderable":1},{"_id":"themes/next/source/googlef1e1b0db9ae75cd3.html","path":"googlef1e1b0db9ae75cd3.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/sqwlly.jpg","path":"images/sqwlly.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/yourname03.jpg","path":"uploads/yourname03.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/sqwlly.ico","path":"images/sqwlly.ico","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/yourname02.jpg","path":"uploads/yourname02.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/yourname04.jpg","path":"uploads/yourname04.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/yourname01.jpg","path":"uploads/yourname01.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/rebots.txt","hash":"6669815eddb6ce0821756d192c0882eb23a5db22","modified":1540620391839},{"_id":"source/CNAME","hash":"58af8facef8fb192dbcabe3ac865ed6f112dce0d","modified":1540620391823},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1540620400651},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1540620400647},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1540620400647},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1540620400647},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1540620400651},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1540620400651},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1540620400651},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1540620400651},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1540620400651},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1540620400651},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1540620400663},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1540620400663},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1540620400667},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1540620400667},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1540620400783},{"_id":"themes/next/_config.yml","hash":"5aa0ed76b1858cad8bb911c59b6f6ab0462ec245","modified":1540622929782},{"_id":"source/_posts/2018ccpc-hdu6348.md","hash":"2a2fc76a15bcfafe9370810abcbdfd77af9043b1","modified":1540620391879},{"_id":"source/_posts/2018ccpc-hdu6441.md","hash":"7349629db0d0eba79fd78cb41cd948c796cb85ad","modified":1540620391895},{"_id":"source/_posts/2018ccpc-hdu6447.md","hash":"85539f34a6e2271514ceedf6d28d07f6858f9bd8","modified":1540620391895},{"_id":"source/_posts/ICPC-Net-xuzhou-H.md","hash":"5522f9a9a6ab073b4d5a340d85f00978388ddbf9","modified":1540620391903},{"_id":"source/_posts/bzoj2257.md","hash":"56e131331f64039debf4d62573b62f5ca8a0be0e","modified":1540620391903},{"_id":"source/_posts/bzoj2299.md","hash":"fc2fb705c0141af0fbf430b29a937cfca4e434c8","modified":1540620391931},{"_id":"source/_posts/codeforces-edu-53-div2-C.md","hash":"dcb2375e95b02836ed6781ad803272b661114d08","modified":1540620391931},{"_id":"source/_posts/codeforces-edu-53-div2-D.md","hash":"0bbe8aaf47705919f4d3cc8c03bb5adc485502ab","modified":1540620391931},{"_id":"source/_posts/eluer.md","hash":"3a585e2be75e4351d6c55ea46236fe12ffdafb0e","modified":1540620391931},{"_id":"source/_posts/hdu6444.md","hash":"dc23a0840e97b82a68ccf7a8bed9d89efda9aca7","modified":1540620391943},{"_id":"source/_posts/newBlog.md","hash":"2385c7c4a1891e789a2dd15e7d13c9c35e1a89d2","modified":1545232831993},{"_id":"source/_posts/talk-with-me.md","hash":"b740c4aef7b9c8a595c0d67762b31bee2744547c","modified":1545232167127},{"_id":"source/_posts/nowcoderTrain9-A.md","hash":"fa5bdf00a92341623bcd660783cf963555cd656a","modified":1540620391951},{"_id":"source/_posts/codeforces-476-c.md","hash":"1a6fa682ef00e5a2a3d126b14d5437f202f14ab3","modified":1541689352295},{"_id":"source/_posts/2018icpc-qingdao-onsite-E.md","hash":"a155e60a2885b47d18b00566cdda7a9884d72c9b","modified":1541737582924},{"_id":"source/about/index.md","hash":"cdf982dc535387a3ef2a38a0214f3bac4cff9cee","modified":1540620391983},{"_id":"source/board/index.md","hash":"81d17f1c5f3a45aa1bf032aacfddb6eca189eefa","modified":1540620392019},{"_id":"source/tags/index.md","hash":"30b121fa9430c1b458966516393dcc66da26a948","modified":1540620392059},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1540620400647},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1540620400647},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1540620400651},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1540620400651},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1540620400671},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1540620400671},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1540620400671},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1540620400675},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1540620400671},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1540620400675},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1540620400675},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1540620400675},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1540620400675},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1540620400675},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1540620400675},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1540620400675},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1540620400675},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1540620400675},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1540620400735},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1540620400735},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1540620400735},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1540620400735},{"_id":"themes/next/layout/post.swig","hash":"909125fca22038e5cfa202f64c467700741d10d4","modified":1540620400747},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1540620400747},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1540620400803},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1540620400747},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1540620400807},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1540620400675},{"_id":"themes/next/layout/_layout.swig","hash":"a39851a5ce909fa38f486c76bddaf48bcf0afd6a","modified":1541051305214},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0b25bb1b22f1cfad409b61e98fd501c2eb687de0","modified":1540622457859},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1540620401331},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1540620401331},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1540620401331},{"_id":"themes/next/source/baidu_verify_o824orCynC.html","hash":"abf58cfb9e88b9a7158cdd3e7bdd524359c76ba2","modified":1540620401043},{"_id":"themes/next/source/baidu_verify_jZOkjPUN3h.html","hash":"10306344261e7c9225449b01d6337526f54458e0","modified":1540620401031},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620401135},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1540620400679},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1540620400679},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1540620400679},{"_id":"themes/next/source/googlef1e1b0db9ae75cd3.html","hash":"592b17a120921c00ee2ea10a5e44525660442724","modified":1540620401135},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1540620400683},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1540620400683},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1540620400683},{"_id":"themes/next/layout/_partials/comments.swig","hash":"25bc363128b7df1cc37e8701c65ca8c544d065dc","modified":1540620400695},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1540620400679},{"_id":"themes/next/layout/_partials/head.swig","hash":"d1fc1e76e13c8ccc7dd3c374e882244cec0fd66a","modified":1540620400707},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1540620400711},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1540620400711},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1540620400711},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1540620400719},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1540620400747},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1540620400747},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1540620400763},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1540620400775},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1540620400775},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1540620400775},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1540620400775},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1540620400775},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1540620400775},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1540620400775},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1540620400807},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1540620400807},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1540620400807},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1540620400807},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1540620400807},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1540620400807},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1540620400807},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1540620400807},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1540620400807},{"_id":"themes/next/layout/_macro/post.swig","hash":"8507f8c046b5a42f5d2b3d8d7af3ca72df59f530","modified":1540622423287},{"_id":"source/categories/index.md","hash":"77d78c05f15e503712a5186cfc991f0088c80d4b","modified":1540620392035},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1540620401135},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1540620401135},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540620401135},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1540620401135},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1540620401135},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1540620401135},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1540620401135},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1540620401139},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1540620401135},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1540620401139},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1540620401139},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540620401139},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1540620401139},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540620401139},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1540620401139},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540620401139},{"_id":"themes/next/layout/_partials/footer.swig","hash":"eaf25cf1f0fe75beb8f9469cf2219193b860f673","modified":1540621727541},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1540620401095},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1540620401139},{"_id":"themes/next/source/images/sqwlly.jpg","hash":"ab64450824b16753373fc3d9c1f86c3dd22fc37c","modified":1540620401167},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1540620401135},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620400763},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620400763},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620401095},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620401095},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620401095},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620401119},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540620401119},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1540620400711},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1540620400735},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1540620400731},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1540620400735},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1540620400735},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1540620400735},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1540620400747},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1540620400747},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1540620400763},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1540620400767},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1540620400767},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1540620400767},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1540620400767},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1540620400767},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1540620400767},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1540620400767},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1540620400771},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1540620400771},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1540620400771},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"47c3c5fb18c5f08ffe77eed51313879d2731f754","modified":1540620400771},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1540620400775},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1540620400775},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1540620400775},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1540620400775},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1540620400775},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1540620400779},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1540620400779},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1540620400779},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1540620400779},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"7e881c3106d8cca2dc2bc94cfa1791963f87a7d6","modified":1540620401095},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1540620401095},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1540620401095},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1540620401095},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1540620401119},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1540620401119},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1540620401119},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1540620401119},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1540620401167},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1540620401167},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1540620401167},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1540620401167},{"_id":"themes/next/source/js/src/fireworks.js","hash":"f4db481a0422afb08b10d8189fa92a1433da46b0","modified":1540622787379},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1540620401167},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1540620401167},{"_id":"themes/next/source/js/src/motion.js","hash":"508df4a64e86221864290a6fde040d5ca5e211c9","modified":1540620401171},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1540620401171},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1540620401171},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1540620401171},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1540620401171},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1540620401219},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1540620401203},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1534946981680},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1534946981680},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1540620401223},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1540620401223},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1540620401223},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1540620401227},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1540620401259},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1540620401227},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1540620401259},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1540620401263},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1540620401263},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1540620401263},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1540620401263},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1540620401263},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1540620401263},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1540620401263},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1540620401263},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1540620401271},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1540620401271},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1540620401271},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1540620401263},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1540620401267},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1540620401267},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1540620401275},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1540620400735},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1540620400711},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1540620400735},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1540620401275},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1540620401279},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1540620401259},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1540620401279},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1540620401275},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1540620400779},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1540620401095},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1540620401095},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1540620401095},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1540620401095},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1540620401095},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1540620401047},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1540620401047},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1540620401047},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1540620401047},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"c786f5c34845762027af89f02fd33a7e7b93e5a3","modified":1540620401047},{"_id":"themes/next/source/css/_common/components/gitment.styl","hash":"9216a58ca1df384c0cce918caf605b0319842bb0","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/gitment.styl.backup","hash":"719ed3d60731e7ac710e1f7a702753f966999293","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1540620401075},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"85cc49d3ec0e31473053023c3b0b29f73fda726c","modified":1540620401095},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1540620401095},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1540620401115},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1540620401115},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1540620401115},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1540620401115},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1540620401115},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1540620401119},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1540620401179},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1540620401183},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1540620401183},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1540620401171},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1540620401223},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1540620401223},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1540620401223},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1540620401227},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1540620401227},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1540620401231},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1540620401275},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1540620401275},{"_id":"themes/next/source/uploads/yourname03.jpg","hash":"bd23561616a8e1127720333dbc361d371005a28e","modified":1540620401323},{"_id":"themes/next/source/images/sqwlly.ico","hash":"8a16d727d7c430a840150fc1b307e6b129f29196","modified":1540620401167},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1540620400779},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1540620401095},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1540620401095},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1540620401183},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1540620401239},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1540620401239},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1540620401275},{"_id":"themes/next/source/uploads/yourname02.jpg","hash":"05b2e2f7c2815f5bef1fd412f702b8295742b431","modified":1540620401319},{"_id":"themes/next/source/uploads/yourname04.jpg","hash":"b2979d2d90081161bebe4dab5c95a44dc1a32609","modified":1540620401327},{"_id":"themes/next/source/uploads/yourname01.jpg","hash":"1a9d0c2c5941be835b88989c70f140c08f857c4b","modified":1540620401279},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1540620401047},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"1758164276617d6016177f18dae2630cf3f8ad40","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1540620401063},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1540620401067},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1540620401067},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1540620401067},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1540620401067},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1540620401067},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1540620401067},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"63e717ffe04354857b4a4e98718655735d0ce170","modified":1540620401071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author_backup.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1540620401071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1540620401071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1540620401071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1540620401071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1540620401075},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1540620401075},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1540620401075},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"1675089653334ed0d19b1b923105e0c01903cd5b","modified":1540620401075},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1540620401075},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"9216a58ca1df384c0cce918caf605b0319842bb0","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl.backup","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1540620401091},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1540620401095},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1540620401095},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1540620401095},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1540620401095},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1540620401095},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1540620401099},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1540620401115},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1540620401171},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1540620401171},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1540620401179},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1540620401179},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1540620401179},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1540620401219},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1540620401223},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1540620401223},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1540620401223},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1540620401223},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1540620401223},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1540620401231},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1540620401231},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1540620401235},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1540620401215},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1540620401271},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1540620401235},{"_id":"public/baidu_urls.txt","hash":"51f0ca4fd93aae99d4b0530382dedcad55f2f391","modified":1545232091874},{"_id":"public/baidusitemap.xml","hash":"cde6be1056b56d0328632c33d67b639e2ccc2a19","modified":1545232846568},{"_id":"public/atom.xml","hash":"4a70db2b8b7ec9e2c11d23df19a6e0476ac61431","modified":1545232846569},{"_id":"public/sitemap.xml","hash":"fde2e39437800d7ea99f7112b0999bda5ac6f75d","modified":1545232846591},{"_id":"public/about/index.html","hash":"4af4cfea24dbfa0a5c56d3fc5281f9fe554e122a","modified":1545232092066},{"_id":"public/board/index.html","hash":"b684559483be662e8527573102952102a1a638a4","modified":1545232092066},{"_id":"public/tags/index.html","hash":"6e67f0d8b11c2acf79a29cf3d06c73d7f3a49eaf","modified":1545232092067},{"_id":"public/categories/index.html","hash":"c6b06f586f2d32a2f9d18b89e879cfc3fb4cbef8","modified":1545232092067},{"_id":"public/2018/11/08/2018icpc-qingdao-onsite-E/index.html","hash":"942dabd643ead09e6cf3e3253f2ab7b822379c62","modified":1545232092067},{"_id":"public/2018/11/07/codeforces-476-c/index.html","hash":"7443d72113071f9c2d449810b29142beb72a3274","modified":1545232092067},{"_id":"public/2018/10/27/codeforces-edu-53-div2-C/index.html","hash":"a8cf3e0fffd30dc249b8e22352abc53da0778cfe","modified":1545232092067},{"_id":"public/2018/10/27/codeforces-edu-53-div2-D/index.html","hash":"406903a0fd6641fa094c551ed8109e5df4463695","modified":1545232092067},{"_id":"public/2018/09/12/ICPC-Net-xuzhou-H/index.html","hash":"818b1d12f7726d38e0e5e40497baf72a05d4e3d9","modified":1545232092067},{"_id":"public/2018/08/29/hdu6444/index.html","hash":"c308e8a884aeb459f30c2fc93c72e228fbfc2fdb","modified":1545232092067},{"_id":"public/2018/08/28/bzoj2257/index.html","hash":"8dff578f6e06bce313c4594d9b487189adf8adcb","modified":1545232092067},{"_id":"public/2018/08/28/bzoj2299/index.html","hash":"eab2ba612b5362ad949191b1a4695dd918c6d967","modified":1545232092067},{"_id":"public/2018/08/26/2018ccpc-hdu6348/index.html","hash":"5e516f2bbcf5194dd297c8566c9f956783fafced","modified":1545232092067},{"_id":"public/2018/08/26/2018ccpc-hdu6441/index.html","hash":"aa604212756f5e26b454c4039a06c519a6bd6494","modified":1545232092067},{"_id":"public/2018/08/25/2018ccpc-hdu6447/index.html","hash":"21b1393e0ea09386b27a883d66c17b6f64e26709","modified":1545232092067},{"_id":"public/2018/08/24/nowcoderTrain9-A/index.html","hash":"22082d5ad4f106e5c73389141b65223bfd4f0eb2","modified":1545232092068},{"_id":"public/2018/08/23/newBlog/index.html","hash":"ab7082be69db3d876badc5d83b1a03273f8658a7","modified":1545232846600},{"_id":"public/2018/08/23/eluer/index.html","hash":"83aa0d4a33ccd888c65c5371ea80078bf5bb70be","modified":1545232092068},{"_id":"public/archives/index.html","hash":"95b6790d3387406ee8a64d4bc8c0184d9cf04ea7","modified":1545232092068},{"_id":"public/archives/page/2/index.html","hash":"f1a2ff72cf318154b422f36e30765c56a35e9b95","modified":1545232092068},{"_id":"public/archives/2018/index.html","hash":"d518bb7a7d15283efdd36c435fe2dd39d2c71ce8","modified":1545232092068},{"_id":"public/archives/2018/page/2/index.html","hash":"56e0a4fc2592e44849c8a580f85e0f4eacdb1340","modified":1545232092068},{"_id":"public/archives/2018/08/index.html","hash":"9ee1e9671d64f814fbaec6586d1f24024cad317e","modified":1545232092068},{"_id":"public/archives/2018/09/index.html","hash":"419adc496313fa6b7575aca062217023ac5f7b90","modified":1545232092068},{"_id":"public/archives/2018/10/index.html","hash":"e6dd76d2b8b443162b1e2d913e17d3fac07ee661","modified":1545232092068},{"_id":"public/archives/2018/11/index.html","hash":"9c6c239be2227e22ca78fe5fbef2636044b17e9a","modified":1545232092068},{"_id":"public/categories/Greedy/index.html","hash":"b66c36488a858c06b735afe13146ef3671a8857a","modified":1545232092068},{"_id":"public/categories/MathTheory/index.html","hash":"cdde1f5d20949e7a3fea91018bf7d1fa2892e1b0","modified":1545232092068},{"_id":"public/categories/bitTree/index.html","hash":"7eeddae2e6d628486d4177e5b1cea762a5f6dafb","modified":1545232092068},{"_id":"public/categories/HDU/index.html","hash":"a3f27113c6ad643cc91d9a9ba06c1985718288b3","modified":1545232092068},{"_id":"public/categories/MathTheory/费马大定理/index.html","hash":"46aef715e1263b75016894292fbff6d9a9c86549","modified":1545232092068},{"_id":"public/categories/ICPC/index.html","hash":"fe38f47b20ddc3fad36e320dc0ddefba500e98d3","modified":1545232092068},{"_id":"public/categories/线段树/index.html","hash":"2f973e2af5eb5043ea52546a49a4de9321d5db56","modified":1545232092068},{"_id":"public/categories/MathTheory/裴蜀定理/index.html","hash":"885ed23f991aac2bfbd758854adf6bbde6967690","modified":1545232092069},{"_id":"public/categories/Codeforces/index.html","hash":"762f2f784e53b171be3c98aaf8db3516f6691eca","modified":1545232092069},{"_id":"public/categories/MathTheory/eluer/index.html","hash":"c9644dd82c99618762100c9e1c8723d1339e363c","modified":1545232092069},{"_id":"public/categories/CCPC/index.html","hash":"3c28b02e31f8b8b9968baa89e3e72bc07c52cfad","modified":1545232092069},{"_id":"public/categories/Myself/index.html","hash":"5dfe8beb42b1a98c89eec8244bc8927d9d0ca2d3","modified":1545232092069},{"_id":"public/categories/二分/index.html","hash":"2f95d2fd4d71077ad5001cfa72bc0ad20952a614","modified":1545232092069},{"_id":"public/categories/MathTheory/Fwt/index.html","hash":"b21330fca6ed307e06e16921703ffb13ca20d228","modified":1545232092069},{"_id":"public/categories/模拟/index.html","hash":"469bf21dd541700b791db2bd38f47b97cc2f233a","modified":1545232092069},{"_id":"public/categories/单调队列/index.html","hash":"985fc1dc729cb8b31c279d32c138dfde421be5c3","modified":1545232092069},{"_id":"public/index.html","hash":"0a6cb88b86538c3c493a94c153c26844f34f57f6","modified":1545232846600},{"_id":"public/page/2/index.html","hash":"bfea1a3bc63edd8a68a10b4b0c10472f4220d1ba","modified":1545232092069},{"_id":"public/tags/Greedy/index.html","hash":"e3b174fcf36eca2edd6cc1dd578b4bc66b69f920","modified":1545232092069},{"_id":"public/tags/优先队列/index.html","hash":"4a81ae91e1f8be672c8329c8fbc7d706a1ad3350","modified":1545232092069},{"_id":"public/tags/HDU/index.html","hash":"5d630e438a73c9ee96b6a9189289b52a048540d2","modified":1545232092069},{"_id":"public/tags/CCPC/index.html","hash":"9e1a51aa6f2d6e3222caa1198d495449d9ba30ef","modified":1545232092069},{"_id":"public/tags/MathTheory/index.html","hash":"3487d180b34e95c0e13983522ac49d79e79f2c19","modified":1545232092069},{"_id":"public/tags/费马大定理/index.html","hash":"3a4f85f47ed8d2314e1efa8a9220738a9422d0a5","modified":1545232092070},{"_id":"public/tags/bitTree/index.html","hash":"5c5ec42f7bd6e96b99dd5741fd0bdfd79c41e2d5","modified":1545232092070},{"_id":"public/tags/离散化/index.html","hash":"ab284212f7fce0d067fe386d289cd8ef6a501f6a","modified":1545232092070},{"_id":"public/tags/ICPC/index.html","hash":"a2d0063202fd489ecfa61ae4bb6652668f28837c","modified":1545232092070},{"_id":"public/tags/线段树/index.html","hash":"28df040792a909f75edac545b9826c7cddcbf8d5","modified":1545232092070},{"_id":"public/tags/裴蜀定理/index.html","hash":"754a08703bc08357e7ef4d02deb5aa17d381c5d0","modified":1545232092070},{"_id":"public/tags/bzoj/index.html","hash":"92127c26c2c0693b3dd26fabb8b22797bf5f27e7","modified":1545232092070},{"_id":"public/tags/二分/index.html","hash":"c11ad4bf90c539b5d9c7fb156e5b697f9c8569e6","modified":1545232092070},{"_id":"public/tags/eluer/index.html","hash":"8c2bda9ea0ae317c86bae5f8223924986140a59c","modified":1545232092070},{"_id":"public/tags/欧拉降幂/index.html","hash":"80407b3c6f27f5f52017ae4a1d9e400a380a5fc8","modified":1545232092070},{"_id":"public/tags/模拟/index.html","hash":"848c2a635b2652fd02d27366e8ba788f01be9d7a","modified":1545232092070},{"_id":"public/tags/单调队列/index.html","hash":"e4e166007c08e4f2e05a256e3c25ef26ddbe5a36","modified":1545232092070},{"_id":"public/tags/杂集/index.html","hash":"b16ec24500392fbfa19ea7103eb4c4fa7f8d45ec","modified":1545232092070},{"_id":"public/tags/Codeforces/index.html","hash":"3f003eeba3e15814bf8dcf057615a0953e50c461","modified":1545232092070},{"_id":"public/tags/Nowcoder/index.html","hash":"0f3a6a5acd89eb8d02b101295267b6dd07aed7be","modified":1545232092070},{"_id":"public/tags/fwt/index.html","hash":"938e501e5c735150eea02f549c506779e70a5d90","modified":1545232092070},{"_id":"public/tags/acm/index.html","hash":"ebbccc44033cc73e5c3928af5b433f7aa78aff66","modified":1545232092070},{"_id":"public/2018/12/19/talk-with-me/index.html","hash":"76fdf09e7e81c25947b67dc5dedf446a44960751","modified":1545232181747},{"_id":"public/archives/2018/12/index.html","hash":"4592e906552fcf9487c2d22b14f513018a404517","modified":1545232092076},{"_id":"public/tags/ACM/index.html","hash":"cfdc5f81663f863125c7ffedc6e0d968a1aff409","modified":1545232092076},{"_id":"public/CNAME","hash":"58af8facef8fb192dbcabe3ac865ed6f112dce0d","modified":1545232092082},{"_id":"public/rebots.txt","hash":"6669815eddb6ce0821756d192c0882eb23a5db22","modified":1545232092083},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545232092083},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545232092083},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545232092083},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545232092083},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545232092083},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545232092083},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545232092083},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545232092083},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545232092083},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545232092083},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545232092083},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545232092083},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1545232092083},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545232092083},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545232092083},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545232092084},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545232092084},{"_id":"public/images/sqwlly.jpg","hash":"ab64450824b16753373fc3d9c1f86c3dd22fc37c","modified":1545232092084},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545232092084},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545232092084},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545232092084},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545232092084},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545232092084},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545232092084},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545232092084},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545232092084},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545232092084},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545232092084},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545232092084},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545232092084},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545232092084},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545232092085},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1545232092085},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545232092085},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1545232092085},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545232092876},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545232092886},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545232092901},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545232092901},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1545232092902},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545232092902},{"_id":"public/js/src/fireworks.js","hash":"f4db481a0422afb08b10d8189fa92a1433da46b0","modified":1545232092902},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545232092902},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545232092902},{"_id":"public/js/src/motion.js","hash":"508df4a64e86221864290a6fde040d5ca5e211c9","modified":1545232092902},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1545232092902},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545232092902},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545232092902},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1545232092902},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545232092902},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545232092902},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1545232092902},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1545232092902},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1545232092902},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545232092902},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1545232092902},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545232092902},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1545232092902},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545232092902},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545232092902},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545232092902},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545232092902},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545232092903},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545232092903},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545232092903},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545232092903},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1545232092903},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1545232092903},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545232092903},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545232092903},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545232092903},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545232092903},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545232092903},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545232092903},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545232092903},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545232092903},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545232092903},{"_id":"public/baidu_verify_o824orCynC.html","hash":"abf58cfb9e88b9a7158cdd3e7bdd524359c76ba2","modified":1545232092903},{"_id":"public/baidu_verify_jZOkjPUN3h.html","hash":"10306344261e7c9225449b01d6337526f54458e0","modified":1545232092903},{"_id":"public/googlef1e1b0db9ae75cd3.html","hash":"592b17a120921c00ee2ea10a5e44525660442724","modified":1545232092904},{"_id":"public/lib/fastclick/README.html","hash":"c52d599f3a276053019fc41af2759ce6491ef581","modified":1545232092904},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1545232092904},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1545232092904},{"_id":"public/css/main.css","hash":"ad8b88e749d3ba36cc980efb0f6a53ce91366511","modified":1545232092904},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1545232092904},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1545232092904},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545232092904},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545232092904},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545232092904},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545232092904},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545232092904},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545232092904},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545232092904},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545232092904},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545232092904},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545232092904},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545232092904},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545232092904},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545232092904},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545232092904},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545232092904},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545232092905},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545232092905},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545232092905},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545232092905},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545232092905},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545232092905},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1545232092951},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1545232092954},{"_id":"public/uploads/yourname03.jpg","hash":"bd23561616a8e1127720333dbc361d371005a28e","modified":1545232092954},{"_id":"public/images/sqwlly.ico","hash":"8a16d727d7c430a840150fc1b307e6b129f29196","modified":1545232092954},{"_id":"public/uploads/yourname02.jpg","hash":"05b2e2f7c2815f5bef1fd412f702b8295742b431","modified":1545232092954},{"_id":"public/uploads/yourname01.jpg","hash":"1a9d0c2c5941be835b88989c70f140c08f857c4b","modified":1545232092954},{"_id":"public/uploads/yourname04.jpg","hash":"b2979d2d90081161bebe4dab5c95a44dc1a32609","modified":1545232092959},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545232092960},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1545232092966}],"Category":[{"name":"贪心","_id":"cjpvbackt0004s515f7jykj2y"},{"name":"数论","_id":"cjpvbackw0006s515774qh034"},{"name":"树状数组","_id":"cjpvbackw0008s515lbn5pelq"},{"name":"HDU","_id":"cjpvbackx000as515sjym9prn"},{"name":"费马大定理","parent":"cjpvbackw0006s515774qh034","_id":"cjpvbacky000ds515u9elcotb"},{"name":"ICPC","_id":"cjpvbaclg000zs51577eh63n0"},{"name":"线段树","_id":"cjpvbaclh0011s51509kabqre"},{"name":"裴蜀定理","parent":"cjpvbackw0006s515774qh034","_id":"cjpvbacqm001cs515qv91kdmr"},{"name":"Codeforces","_id":"cjpvbacqx001ks515smp9bovc"},{"name":"欧拉定理","parent":"cjpvbackw0006s515774qh034","_id":"cjpvbacr1001us51558pjkxz1"},{"name":"CCPC","_id":"cjpvbacr50024s5153rjy5qya"},{"name":"杂集","_id":"cjpvbacr6002bs51564ni55si"},{"name":"二分","_id":"cjpvbacrb002ks515556a6d33"},{"name":"位运算卷积","parent":"cjpvbackw0006s515774qh034","_id":"cjpvbacrc002ps515jccs71kj"},{"name":"模拟","_id":"cjpvbacre002ys515fgia1329"},{"name":"单调队列","_id":"cjpvbacrf0034s5156c6x35ki"}],"Data":[],"Page":[{"title":"关于本站","date":"2018-08-23T15:25:16.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2018-08-23 23:25:16\ntype: \"about\"\n---\n","updated":"2018-10-27T06:06:31.983Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjpvbacqe0017s515ttq7iuzh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言板","comments":1,"date":"2018-08-25T02:56:31.000Z","_content":"","source":"board/index.md","raw":"---\ntitle: 留言板\ncomments: true\ndate: 2018-08-25 10:56:31\n---\n","updated":"2018-10-27T06:06:32.019Z","path":"board/index.html","layout":"page","_id":"cjpvbacqg0019s515xayvtyeu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-08-23T15:24:18.000Z","type":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签 \ndate: 2018-08-23 23:24:18\ntype: \"tags\"\ncomments: false\n---\n\n","updated":"2018-10-27T06:06:32.059Z","path":"tags/index.html","layout":"page","_id":"cjpvbacqm001ds515fydd5hzd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-08-23T15:24:39.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-23 23:24:39\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-10-27T06:06:32.035Z","path":"categories/index.html","layout":"page","_id":"cjpvbactv003ks515ejoccrqe","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018CCPC网络预选赛1001(hdu6348) 贪心+优先队列","date":"2018-08-26T11:25:03.000Z","_content":"\n# [Buy and Resell](http://acm.hdu.edu.cn/showproblem.php?pid=6438)\n# 问题分析\n题意：有$n$个村庄，每经过一个村庄你有以下三个选择\n1. 买能量块\n2. 卖能量块\n3. 什么也不做\n求最后可以获得的最大利润，并且尽可能减少交易次数。\n<!--more-->\n\n  我们可以准着低买高卖的原则，用一个小顶堆维护我们交易过的能量块。\n  只要当前能量块$i$的价格高于我们之前买来的能量块$j$的价格，我们就可以将其卖出去，并且一定是获利的，但是这样做并不能保证利润最大，所以我们就可以$push$两次当前能量块，一次代表我们将其买入了，一次代表我们以后发现有价格更高的能量块，我们用来反悔的。\n\n# 代码\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n    int T, n, shit;\n    scanf(\"%d\", &T);\n    while (T--) {\n        long long love = 0, dog = 0;\n        scanf(\"%d\", &n);\n        priority_queue<pair<int, int>> pq;\n        for (int i = 0; i < n; ++i) {\n            scanf(\"%d\", &shit);\n            pq.push(make_pair(-shit, 1)); //买入\n            pq.push(make_pair(-shit, 2)); //卖出\n            love += shit + pq.top().first;\n            if (pq.top().second == 1) dog += 2; //每一次买入必定会有卖出\n            pq.pop();\n        }\n        printf(\"%lld %lld\\n\", love, dog);\n    }\n}\n\n\n```\n我想有可能有小伙伴比较疑惑为什么这样的做法是对的。因为，我们每天买入卖出，累加的是差值(当然真正的买入卖出是根据小顶堆维护的最小值)。实际上我们做的算法是，对于每一个能量块，我们去看前面村庄的能量块，什么时候买入可以获得最大利润。求每一个能量块的贡献。\n","source":"_posts/2018ccpc-hdu6348.md","raw":"---\ntitle: 2018CCPC网络预选赛1001(hdu6348) 贪心+优先队列\ndate: 2018-08-26 19:25:03\ntags: [贪心,优先队列,HDU,CCPC]\ncategories: \n- [贪心]\n- [HDU]\n---\n\n# [Buy and Resell](http://acm.hdu.edu.cn/showproblem.php?pid=6438)\n# 问题分析\n题意：有$n$个村庄，每经过一个村庄你有以下三个选择\n1. 买能量块\n2. 卖能量块\n3. 什么也不做\n求最后可以获得的最大利润，并且尽可能减少交易次数。\n<!--more-->\n\n  我们可以准着低买高卖的原则，用一个小顶堆维护我们交易过的能量块。\n  只要当前能量块$i$的价格高于我们之前买来的能量块$j$的价格，我们就可以将其卖出去，并且一定是获利的，但是这样做并不能保证利润最大，所以我们就可以$push$两次当前能量块，一次代表我们将其买入了，一次代表我们以后发现有价格更高的能量块，我们用来反悔的。\n\n# 代码\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n    int T, n, shit;\n    scanf(\"%d\", &T);\n    while (T--) {\n        long long love = 0, dog = 0;\n        scanf(\"%d\", &n);\n        priority_queue<pair<int, int>> pq;\n        for (int i = 0; i < n; ++i) {\n            scanf(\"%d\", &shit);\n            pq.push(make_pair(-shit, 1)); //买入\n            pq.push(make_pair(-shit, 2)); //卖出\n            love += shit + pq.top().first;\n            if (pq.top().second == 1) dog += 2; //每一次买入必定会有卖出\n            pq.pop();\n        }\n        printf(\"%lld %lld\\n\", love, dog);\n    }\n}\n\n\n```\n我想有可能有小伙伴比较疑惑为什么这样的做法是对的。因为，我们每天买入卖出，累加的是差值(当然真正的买入卖出是根据小顶堆维护的最小值)。实际上我们做的算法是，对于每一个能量块，我们去看前面村庄的能量块，什么时候买入可以获得最大利润。求每一个能量块的贡献。\n","slug":"2018ccpc-hdu6348","published":1,"updated":"2018-10-27T06:06:31.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvback70000s51513759dq1","content":"<h1 id=\"Buy-and-Resell\"><a href=\"#Buy-and-Resell\" class=\"headerlink\" title=\"Buy and Resell\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6438\" target=\"_blank\" rel=\"noopener\">Buy and Resell</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：有$n$个村庄，每经过一个村庄你有以下三个选择</p>\n<ol>\n<li>买能量块</li>\n<li>卖能量块</li>\n<li><p>什么也不做<br>求最后可以获得的最大利润，并且尽可能减少交易次数。</p>\n<a id=\"more\"></a>\n<p>我们可以准着低买高卖的原则，用一个小顶堆维护我们交易过的能量块。<br>只要当前能量块$i$的价格高于我们之前买来的能量块$j$的价格，我们就可以将其卖出去，并且一定是获利的，但是这样做并不能保证利润最大，所以我们就可以$push$两次当前能量块，一次代表我们将其买入了，一次代表我们以后发现有价格更高的能量块，我们用来反悔的。</p>\n</li>\n</ol>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T, n, shit;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> love = <span class=\"number\">0</span>, dog = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; pq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;shit);</span><br><span class=\"line\">            pq.push(make_pair(-shit, <span class=\"number\">1</span>)); <span class=\"comment\">//买入</span></span><br><span class=\"line\">            pq.push(make_pair(-shit, <span class=\"number\">2</span>)); <span class=\"comment\">//卖出</span></span><br><span class=\"line\">            love += shit + pq.top().first;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pq.top().second == <span class=\"number\">1</span>) dog += <span class=\"number\">2</span>; <span class=\"comment\">//每一次买入必定会有卖出</span></span><br><span class=\"line\">            pq.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld %lld\\n\"</span>, love, dog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我想有可能有小伙伴比较疑惑为什么这样的做法是对的。因为，我们每天买入卖出，累加的是差值(当然真正的买入卖出是根据小顶堆维护的最小值)。实际上我们做的算法是，对于每一个能量块，我们去看前面村庄的能量块，什么时候买入可以获得最大利润。求每一个能量块的贡献。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Buy-and-Resell\"><a href=\"#Buy-and-Resell\" class=\"headerlink\" title=\"Buy and Resell\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6438\" target=\"_blank\" rel=\"noopener\">Buy and Resell</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：有$n$个村庄，每经过一个村庄你有以下三个选择</p>\n<ol>\n<li>买能量块</li>\n<li>卖能量块</li>\n<li><p>什么也不做<br>求最后可以获得的最大利润，并且尽可能减少交易次数。</p>","more":"<p>我们可以准着低买高卖的原则，用一个小顶堆维护我们交易过的能量块。<br>只要当前能量块$i$的价格高于我们之前买来的能量块$j$的价格，我们就可以将其卖出去，并且一定是获利的，但是这样做并不能保证利润最大，所以我们就可以$push$两次当前能量块，一次代表我们将其买入了，一次代表我们以后发现有价格更高的能量块，我们用来反悔的。</p>\n</li>\n</ol>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T, n, shit;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> love = <span class=\"number\">0</span>, dog = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; pq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;shit);</span><br><span class=\"line\">            pq.push(make_pair(-shit, <span class=\"number\">1</span>)); <span class=\"comment\">//买入</span></span><br><span class=\"line\">            pq.push(make_pair(-shit, <span class=\"number\">2</span>)); <span class=\"comment\">//卖出</span></span><br><span class=\"line\">            love += shit + pq.top().first;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pq.top().second == <span class=\"number\">1</span>) dog += <span class=\"number\">2</span>; <span class=\"comment\">//每一次买入必定会有卖出</span></span><br><span class=\"line\">            pq.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld %lld\\n\"</span>, love, dog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我想有可能有小伙伴比较疑惑为什么这样的做法是对的。因为，我们每天买入卖出，累加的是差值(当然真正的买入卖出是根据小顶堆维护的最小值)。实际上我们做的算法是，对于每一个能量块，我们去看前面村庄的能量块，什么时候买入可以获得最大利润。求每一个能量块的贡献。</p>"},{"title":"2018CCPC网络预选赛1004(hdu6441) 费马大定理","date":"2018-08-26T07:12:50.000Z","_content":"# [Find Integer](http://acm.hdu.edu.cn/showproblem.php?pid=6441)\n# 问题分析\n题意：已知$a^n+b^n=c^n$，给出$n$和$a$，求$b$，$c$，如果无解输出$-1$。\n**费马大定理**\n1. $a^n+b^n=c^n$，$n>2$时无解。\n2. 当$a$为奇数时，\n<!--more-->\n$a = 2 \\cdot k + 1$\n\n$c = k ^ 2 + (k + 1) ^ 2$\n\n$b = c - 1$\n\n当 $a$ 为偶数\n\n$a = 2 * k + 2$\n\n$c = 1 + (k + 1) ^ 2$\n\n$b = c - 2$\n\n# 代码\n\n```c++\n#include <bits/stdc++.h>\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n, a;\n        scanf(\"%d%d\", &n, &a);\n        if (n == 0 || n > 2) {\n            printf(\"-1 -1\\n\");\n        } else if (n == 1) {\n            printf(\"%d %d\\n\", 1, a + 1);\n        } else {\n            long long b, c;\n            if (a & 1) {\n                int k = a / 2;\n                c = k * 1LL * k + (k + 1) * 1LL * (k + 1);\n                b = c - 1;\n            } else {\n                int k = (a - 2) / 2;\n                c = 1 + 1LL * (k + 1) * (k + 1);\n                b = c - 2;\n            }\n            if (b > 1e9 || c > 1e9)\n                printf(\"-1 -1\\n\");\n            else\n                printf(\"%lld %lld\\n\", b, c);\n        }\n    }\n}\n\n\n```\n","source":"_posts/2018ccpc-hdu6441.md","raw":"---\ntitle: 2018CCPC网络预选赛1004(hdu6441) 费马大定理\ndate: 2018-08-26 15:12:50\ntags: [数论,费马大定理,CCPC,HDU]\ncategories: [数论,费马大定理]\n---\n# [Find Integer](http://acm.hdu.edu.cn/showproblem.php?pid=6441)\n# 问题分析\n题意：已知$a^n+b^n=c^n$，给出$n$和$a$，求$b$，$c$，如果无解输出$-1$。\n**费马大定理**\n1. $a^n+b^n=c^n$，$n>2$时无解。\n2. 当$a$为奇数时，\n<!--more-->\n$a = 2 \\cdot k + 1$\n\n$c = k ^ 2 + (k + 1) ^ 2$\n\n$b = c - 1$\n\n当 $a$ 为偶数\n\n$a = 2 * k + 2$\n\n$c = 1 + (k + 1) ^ 2$\n\n$b = c - 2$\n\n# 代码\n\n```c++\n#include <bits/stdc++.h>\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n, a;\n        scanf(\"%d%d\", &n, &a);\n        if (n == 0 || n > 2) {\n            printf(\"-1 -1\\n\");\n        } else if (n == 1) {\n            printf(\"%d %d\\n\", 1, a + 1);\n        } else {\n            long long b, c;\n            if (a & 1) {\n                int k = a / 2;\n                c = k * 1LL * k + (k + 1) * 1LL * (k + 1);\n                b = c - 1;\n            } else {\n                int k = (a - 2) / 2;\n                c = 1 + 1LL * (k + 1) * (k + 1);\n                b = c - 2;\n            }\n            if (b > 1e9 || c > 1e9)\n                printf(\"-1 -1\\n\");\n            else\n                printf(\"%lld %lld\\n\", b, c);\n        }\n    }\n}\n\n\n```\n","slug":"2018ccpc-hdu6441","published":1,"updated":"2018-10-27T06:06:31.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbackk0001s515vcg3sslj","content":"<h1 id=\"Find-Integer\"><a href=\"#Find-Integer\" class=\"headerlink\" title=\"Find Integer\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6441\" target=\"_blank\" rel=\"noopener\">Find Integer</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：已知$a^n+b^n=c^n$，给出$n$和$a$，求$b$，$c$，如果无解输出$-1$。<br><strong>费马大定理</strong></p>\n<ol>\n<li>$a^n+b^n=c^n$，$n&gt;2$时无解。</li>\n<li>当$a$为奇数时，<a id=\"more\"></a>\n$a = 2 \\cdot k + 1$</li>\n</ol>\n<p>$c = k ^ 2 + (k + 1) ^ 2$</p>\n<p>$b = c - 1$</p>\n<p>当 $a$ 为偶数</p>\n<p>$a = 2 * k + 2$</p>\n<p>$c = 1 + (k + 1) ^ 2$</p>\n<p>$b = c - 2$</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n, a;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1 -1\\n\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, <span class=\"number\">1</span>, a + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, c;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k = a / <span class=\"number\">2</span>;</span><br><span class=\"line\">                c = k * <span class=\"number\">1L</span>L * k + (k + <span class=\"number\">1</span>) * <span class=\"number\">1L</span>L * (k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                b = c - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k = (a - <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                c = <span class=\"number\">1</span> + <span class=\"number\">1L</span>L * (k + <span class=\"number\">1</span>) * (k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                b = c - <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">1e9</span> || c &gt; <span class=\"number\">1e9</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1 -1\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld %lld\\n\"</span>, b, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Find-Integer\"><a href=\"#Find-Integer\" class=\"headerlink\" title=\"Find Integer\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6441\" target=\"_blank\" rel=\"noopener\">Find Integer</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：已知$a^n+b^n=c^n$，给出$n$和$a$，求$b$，$c$，如果无解输出$-1$。<br><strong>费马大定理</strong></p>\n<ol>\n<li>$a^n+b^n=c^n$，$n&gt;2$时无解。</li>\n<li>当$a$为奇数时，","more":"$a = 2 \\cdot k + 1$</li>\n</ol>\n<p>$c = k ^ 2 + (k + 1) ^ 2$</p>\n<p>$b = c - 1$</p>\n<p>当 $a$ 为偶数</p>\n<p>$a = 2 * k + 2$</p>\n<p>$c = 1 + (k + 1) ^ 2$</p>\n<p>$b = c - 2$</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n, a;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1 -1\\n\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, <span class=\"number\">1</span>, a + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, c;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k = a / <span class=\"number\">2</span>;</span><br><span class=\"line\">                c = k * <span class=\"number\">1L</span>L * k + (k + <span class=\"number\">1</span>) * <span class=\"number\">1L</span>L * (k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                b = c - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k = (a - <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                c = <span class=\"number\">1</span> + <span class=\"number\">1L</span>L * (k + <span class=\"number\">1</span>) * (k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                b = c - <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">1e9</span> || c &gt; <span class=\"number\">1e9</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1 -1\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld %lld\\n\"</span>, b, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2018CCPC网络预选赛1010(hdu6447) dp+树状数组","date":"2018-08-25T15:21:29.000Z","mathjax":true,"_content":"\n# [YJJ's Salesman](http://acm.hdu.edu.cn/showproblem.php?pid=6447)\n\n# 问题分析\n题意：从$(0,0)$到$(10^9,10^9)$，每次只能往$(x+1,y),(x+1,y+1),(x,y+1)$三个方向走，期间有$n$个村庄，只有当从$(x-1,y-1)$走到当前村庄才会获得$v_k$元，问最后到达目标时的可以获得的最大钱数。\n<!--more-->  \n首先我们想到的就是$dp$，但是因为区间太大了，所以需要离散化一下，然后发现一般dp的复杂度是$n^2$的，肯定是要超时的，所以我们可以利用树状数组或者线段树去维护区间最大值，这样我们就可以$\\Theta(nlog_n)$的复杂度求解了。\n  \n大致就是先按$x$排序，然后因为我们要用树状数组去维护这个区间最大值，所以考虑到$x$相同的时候，我们要尽量取$y$大的，所以排序的第二$key$就按照$y$从大到小排序。然后排完序就给$y$去离散化一下，根据离散化好的序列去$dp$。\n# 代码\n```c++\n#include <bits/stdc++.h>\n\n#define lowbit(x) ((x)&(-(x)))\n#define max(a, b) (((a)>(b))?(a):(b))\nusing namespace std;\nconst int N = 1e5 + 10;\nstruct node {\n    int x, y, w;\n} a[N];\nint bit[N], shit[N];\n\nbool cmp(const node &a, const node &b) {\n    if (a.x == b.x)\n        return a.y > b.y;\n    return a.x < b.x;\n}\n\nvoid update(int x, int v) {\n    for (int i = x; i < N; i += lowbit(i))\n        bit[i] = max(v, bit[i]);\n}\n\nint query(int d) {\n    int ans = 0;\n    for (int i = d; i; i -= lowbit(i))\n        ans = max(ans, bit[i]);\n    return ans;\n}\n\nint main() {\n    int T, n, x, y, w;\n    scanf(\"%d\", &T);\n    while (T--) {\n        memset(bit, 0, sizeof bit);\n        vector<int> id;\n        scanf(\"%d\", &n);\n        for (int i = 0; i < n; ++i) {\n            scanf(\"%d%d%d\", &x, &y, &w);\n            a[i].x = x, a[i].y = y, a[i].w = w;\n            id.push_back(y);\n        }\n        sort(id.begin(), id.end());\n        id.erase(unique(id.begin(), id.end()), id.end());\n        sort(a, a + n, cmp);\n        for (int i = 0; i < n; ++i)\n            shit[i] = lower_bound(id.begin(), id.end(), a[i].y) - id.begin() + 1;\n        int love = 0;\n        for (int i = 0; i < n; ++i) {\n            //dp[i] = max{dp[0, i - 1]}+a[i].w;\n            int fuck = query(shit[i] - 1) + a[i].w;\n            update(shit[i], fuck);\n            love = max(love, fuck);\n        }\n        printf(\"%d\\n\", love);\n    }\n}\n```\n","source":"_posts/2018ccpc-hdu6447.md","raw":"---\ntitle: 2018CCPC网络预选赛1010(hdu6447) dp+树状数组\ndate: 2018-08-25 23:21:29\ntags: [树状数组,离散化]\nmathjax: true\ncategories: [树状数组]\n---\n\n# [YJJ's Salesman](http://acm.hdu.edu.cn/showproblem.php?pid=6447)\n\n# 问题分析\n题意：从$(0,0)$到$(10^9,10^9)$，每次只能往$(x+1,y),(x+1,y+1),(x,y+1)$三个方向走，期间有$n$个村庄，只有当从$(x-1,y-1)$走到当前村庄才会获得$v_k$元，问最后到达目标时的可以获得的最大钱数。\n<!--more-->  \n首先我们想到的就是$dp$，但是因为区间太大了，所以需要离散化一下，然后发现一般dp的复杂度是$n^2$的，肯定是要超时的，所以我们可以利用树状数组或者线段树去维护区间最大值，这样我们就可以$\\Theta(nlog_n)$的复杂度求解了。\n  \n大致就是先按$x$排序，然后因为我们要用树状数组去维护这个区间最大值，所以考虑到$x$相同的时候，我们要尽量取$y$大的，所以排序的第二$key$就按照$y$从大到小排序。然后排完序就给$y$去离散化一下，根据离散化好的序列去$dp$。\n# 代码\n```c++\n#include <bits/stdc++.h>\n\n#define lowbit(x) ((x)&(-(x)))\n#define max(a, b) (((a)>(b))?(a):(b))\nusing namespace std;\nconst int N = 1e5 + 10;\nstruct node {\n    int x, y, w;\n} a[N];\nint bit[N], shit[N];\n\nbool cmp(const node &a, const node &b) {\n    if (a.x == b.x)\n        return a.y > b.y;\n    return a.x < b.x;\n}\n\nvoid update(int x, int v) {\n    for (int i = x; i < N; i += lowbit(i))\n        bit[i] = max(v, bit[i]);\n}\n\nint query(int d) {\n    int ans = 0;\n    for (int i = d; i; i -= lowbit(i))\n        ans = max(ans, bit[i]);\n    return ans;\n}\n\nint main() {\n    int T, n, x, y, w;\n    scanf(\"%d\", &T);\n    while (T--) {\n        memset(bit, 0, sizeof bit);\n        vector<int> id;\n        scanf(\"%d\", &n);\n        for (int i = 0; i < n; ++i) {\n            scanf(\"%d%d%d\", &x, &y, &w);\n            a[i].x = x, a[i].y = y, a[i].w = w;\n            id.push_back(y);\n        }\n        sort(id.begin(), id.end());\n        id.erase(unique(id.begin(), id.end()), id.end());\n        sort(a, a + n, cmp);\n        for (int i = 0; i < n; ++i)\n            shit[i] = lower_bound(id.begin(), id.end(), a[i].y) - id.begin() + 1;\n        int love = 0;\n        for (int i = 0; i < n; ++i) {\n            //dp[i] = max{dp[0, i - 1]}+a[i].w;\n            int fuck = query(shit[i] - 1) + a[i].w;\n            update(shit[i], fuck);\n            love = max(love, fuck);\n        }\n        printf(\"%d\\n\", love);\n    }\n}\n```\n","slug":"2018ccpc-hdu6447","published":1,"updated":"2018-10-27T06:06:31.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbackr0003s515aduh1y9q","content":"<h1 id=\"YJJ’s-Salesman\"><a href=\"#YJJ’s-Salesman\" class=\"headerlink\" title=\"YJJ’s Salesman\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6447\" target=\"_blank\" rel=\"noopener\">YJJ’s Salesman</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：从$(0,0)$到$(10^9,10^9)$，每次只能往$(x+1,y),(x+1,y+1),(x,y+1)$三个方向走，期间有$n$个村庄，只有当从$(x-1,y-1)$走到当前村庄才会获得$v_k$元，问最后到达目标时的可以获得的最大钱数。<br><a id=\"more\"></a><br>首先我们想到的就是$dp$，但是因为区间太大了，所以需要离散化一下，然后发现一般dp的复杂度是$n^2$的，肯定是要超时的，所以我们可以利用树状数组或者线段树去维护区间最大值，这样我们就可以$\\Theta(nlog_n)$的复杂度求解了。</p>\n<p>大致就是先按$x$排序，然后因为我们要用树状数组去维护这个区间最大值，所以考虑到$x$相同的时候，我们要尽量取$y$大的，所以排序的第二$key$就按照$y$从大到小排序。然后排完序就给$y$去离散化一下，根据离散化好的序列去$dp$。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a, b) (((a)&gt;(b))?(a):(b))</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, w;</span><br><span class=\"line\">&#125; a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> bit[N], shit[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.x == b.x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.y &gt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt; N; i += lowbit(i))</span><br><span class=\"line\">        bit[i] = max(v, bit[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = d; i; i -= lowbit(i))</span><br><span class=\"line\">        ans = max(ans, bit[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T, n, x, y, w;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(bit, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> bit);</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; id;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class=\"line\">            a[i].x = x, a[i].y = y, a[i].w = w;</span><br><span class=\"line\">            id.push_back(y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(id.begin(), id.end());</span><br><span class=\"line\">        id.erase(unique(id.begin(), id.end()), id.end());</span><br><span class=\"line\">        sort(a, a + n, cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            shit[i] = lower_bound(id.begin(), id.end(), a[i].y) - id.begin() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> love = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//dp[i] = max&#123;dp[0, i - 1]&#125;+a[i].w;</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> fuck = query(shit[i] - <span class=\"number\">1</span>) + a[i].w;</span><br><span class=\"line\">            update(shit[i], fuck);</span><br><span class=\"line\">            love = max(love, fuck);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, love);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"YJJ’s-Salesman\"><a href=\"#YJJ’s-Salesman\" class=\"headerlink\" title=\"YJJ’s Salesman\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6447\" target=\"_blank\" rel=\"noopener\">YJJ’s Salesman</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：从$(0,0)$到$(10^9,10^9)$，每次只能往$(x+1,y),(x+1,y+1),(x,y+1)$三个方向走，期间有$n$个村庄，只有当从$(x-1,y-1)$走到当前村庄才会获得$v_k$元，问最后到达目标时的可以获得的最大钱数。<br>","more":"<br>首先我们想到的就是$dp$，但是因为区间太大了，所以需要离散化一下，然后发现一般dp的复杂度是$n^2$的，肯定是要超时的，所以我们可以利用树状数组或者线段树去维护区间最大值，这样我们就可以$\\Theta(nlog_n)$的复杂度求解了。</p>\n<p>大致就是先按$x$排序，然后因为我们要用树状数组去维护这个区间最大值，所以考虑到$x$相同的时候，我们要尽量取$y$大的，所以排序的第二$key$就按照$y$从大到小排序。然后排完序就给$y$去离散化一下，根据离散化好的序列去$dp$。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a, b) (((a)&gt;(b))?(a):(b))</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, w;</span><br><span class=\"line\">&#125; a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> bit[N], shit[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.x == b.x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.y &gt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt; N; i += lowbit(i))</span><br><span class=\"line\">        bit[i] = max(v, bit[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = d; i; i -= lowbit(i))</span><br><span class=\"line\">        ans = max(ans, bit[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T, n, x, y, w;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(bit, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> bit);</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; id;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class=\"line\">            a[i].x = x, a[i].y = y, a[i].w = w;</span><br><span class=\"line\">            id.push_back(y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(id.begin(), id.end());</span><br><span class=\"line\">        id.erase(unique(id.begin(), id.end()), id.end());</span><br><span class=\"line\">        sort(a, a + n, cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            shit[i] = lower_bound(id.begin(), id.end(), a[i].y) - id.begin() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> love = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//dp[i] = max&#123;dp[0, i - 1]&#125;+a[i].w;</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> fuck = query(shit[i] - <span class=\"number\">1</span>) + a[i].w;</span><br><span class=\"line\">            update(shit[i], fuck);</span><br><span class=\"line\">            love = max(love, fuck);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, love);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ACM-ICPC 2018 徐州赛区网络预赛 H Ryuji doesn't want to study(线段树 两种做法)","comments":0,"date":"2018-09-12T05:23:10.000Z","_content":"# [Ryuji doesn't want to study](https://nanti.jisuanke.com/t/31460)\n# 问题分析\n我们可以做一个前缀和$sum\\{a[i]\\}$和一个前缀和$sum\\{(n-i)*a[i]\\}$(看起来就像一个三角形，我们这里称之为$triangle[i]$)，如图所示。\n<!--more-->\n![这里写图片描述](https://img-blog.csdn.net/20180909231038833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V0ZXJuYWxseTgzMTE0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n假设我们要求区间$[2,5] = 2\\cdot4+3\\cdot3+4\\cdot2+5\\cdot1$，那么，我们通过图中可以发现答案就是梯形的数值减去平行四边形的数值。即$$query(2,5) = (triangle[5]-triangle[1]) -(7-5)\\cdot(sum[5]-sum[1])$$\n因此我们只需要用线段树维护两个前缀和即可。\n\n------------------------\n这里蒻再补充一个做法。就是线段树维护前缀和的区间和。\n我们将题里的要求分解一下。\n假设仍然要求$query(2,5)$，\n分解开来就会发现$$\\begin{align}\n query(2,5) & =  (2 + 3 + 4 + 5 )+ (2 + 3 + 4)+(2+3)+(2) \\\\\\\\\n & =  (sum[5]-sum[1]) + (sum[4]-sum[1])+(sum[3]-sum[1])+(sum[2]-sum[1]) \\\\\\\\\n & = \\sum_{i=2}^5 sum(i)-(5-3+1)\\cdot sum(1)\n\\end{align}$$\n所以题目所求变为$$\n\tquery(l,r) = \\sum_{i=l}^rsum(i)-(r-l+1)\\cdot sum(l-1)\n$$\n\n# 代码(第一种做法)\n\n```c++\n#include <cstdio>\nusing namespace std;\ntypedef long long LL;\nconst int N = 1e6+4;\nint n,q,a[N];\nstruct data {\n    int l, r;\n    LL val, triangle;\n} tr[N<<1];\n\ninline void pushup(int rt) {\n    tr[rt].val = tr[rt << 1].val + tr[rt << 1 | 1].val;\n    tr[rt].triangle = tr[rt << 1].triangle + tr[rt << 1 | 1].triangle;\n}\n\nvoid build(int k,int s,int t) {//建树\n    tr[k].l = s;\n    tr[k].r = t;\n    if (s == t) {\n        tr[k].val = a[s];\n        tr[k].triangle = a[s] * 1LL * (n - s + 1);\n        return;\n    }\n    int mid = (s + t) >> 1;\n    build(k << 1, s, mid);\n    build(k << 1 | 1, mid + 1, t);\n    pushup(k);\n}\n\nLL query(int k,int x,int y,int len) {//区间求和\n    int L = tr[k].l, R = tr[k].r;\n    if (x == L && y == R)\n        return tr[k].triangle - 1LL * len * tr[k].val;\n    int mid = (L + R) >> 1;\n    if (y <= mid)\n        return query(k << 1, x, y, len);\n    else if (x > mid)\n        return query(k << 1 | 1, x, y, len);\n    else\n        return query(k << 1, x, mid, len) + query(k << 1 | 1, mid + 1, y, len);\n}\n\nvoid update(int rt,int L,int R,int x,LL v) {\n    if (L == R) {\n        tr[rt].triangle = (n - x + 1) * 1LL * v;\n        tr[rt].val = v;\n        return;\n    }\n    int mid = (L + R) >> 1;\n    if (x <= mid)\n        update(rt << 1, L, mid, x, v);\n    else\n        update(rt << 1 | 1, mid + 1, R, x, v);\n    pushup(rt);\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &q);\n    for (int i = 1; i <= n; i++)\n        scanf(\"%d\", &a[i]);\n    build(1, 1, n);\n    int op, x, y;\n    for (int i = 1; i <= q; i++) {\n        scanf(\"%d%d%d\", &op, &x, &y);\n        if (op == 2)\n            update(1, 1, n, x, y);\n        else\n            printf(\"%lld\\n\", query(1, x, y, n - y));\n    }\n    return 0;\n}\n```\n# 代码(第二种做法)\n```c++\n#include <cstdio>\n#define L tree[rt].l\n#define R tree[rt].r\ntypedef long long LL;\nusing namespace std;\nconst int N = 1e6+4;\nint a[N],n,q;\nLL sum[N];\nstruct data {\n        int l,r;\n        LL Inc,nSum;\n} tree[N];\n\nvoid pushup(int rt)\n{\n        tree[rt].nSum = tree[rt<<1].nSum+tree[rt<<1|1].nSum;\n}\n\nvoid pushdown(int rt) {\n        if(tree[rt].Inc) {\n                int mid = (L+R)>>1;\n                tree[rt<<1].Inc += tree[rt].Inc;\n                tree[rt<<1|1].Inc += tree[rt].Inc;\n                tree[rt<<1].nSum += tree[rt].Inc*(mid-L+1);\n                tree[rt<<1|1].nSum += tree[rt].Inc*(R-mid);\n                tree[rt].Inc = 0;\n        }\n}\n\nvoid build(int rt,int x,int y) {//建树\n        tree[rt].l = x; tree[rt].r = y;\n        if(x == y) {\n                tree[rt].Inc = 0;\n                tree[rt].nSum = sum[x];\n                return;\n        }\n        int mid = (x + y) >> 1;\n        build(rt<<1,x,mid);\n        build(rt<<1|1,mid+1,y);\n        pushup(rt);\n}\n\nLL query(int rt,int x,int y){//区间求和\n        if(x == L && y == R)\n                return tree[rt].nSum;\n        pushdown(rt);\n        int mid=(L+R)>>1;\n        if(y<=mid)\n                return query(rt<<1,x,y);\n        else if(x>mid)\n                return query(rt<<1|1,x,y);\n        else\n                return query(rt<<1,x,mid)+query(rt<<1|1,mid+1,y);\n}\n\nvoid update(int rt,int x,int y,LL v)\n{\n        if(x == L && R == y) {\n                tree[rt].nSum += v*1LL*(R-L+1);\n                tree[rt].Inc += v;\n                return;\n        }\n        pushdown(rt);\n        int mid = (L+R)>>1;\n        if(y <= mid)\n                update(rt << 1, x, y,v);\n        else if(x > mid)\n                update(rt << 1 | 1, x, y,v);\n        else{\n                update(rt << 1, x, mid,v);\n                update(rt << 1 | 1, mid+1, y,v);\n        }\n        pushup(rt);\n}\n\n\nint main(){\n        scanf(\"%d%d\",&n,&q);\n        for(int i=1; i<=n; i++) {\n                scanf(\"%d\",&a[i]);\n                sum[i] = sum[i-1] + a[i];\n        }\n        build(1,1,n);\n        int op,x,y;\n        for(int i=1; i<=q; i++) {\n                scanf(\"%d%d%d\",&op,&x,&y);\n                if(op==2) {\n                        update(1,x,n,1LL*(y-a[x]));\n                        a[x] = y;\n                }\n                else{\n                        if(x==1) {\n                                printf(\"%lld\\n\", query(1,x,y));\n                        }else\n                                printf(\"%lld\\n\", query(1,x,y)-1LL*(y-x+1)*query(1,x-1,x-1));\n                }\n        }\n        return 0;\n}\n\n```\n","source":"_posts/ICPC-Net-xuzhou-H.md","raw":"---\ntitle: ACM-ICPC 2018 徐州赛区网络预赛 H Ryuji doesn't want to study(线段树 两种做法)\ncomments: false\ndate: 2018-09-12 13:23:10\ntags: [ICPC,线段树]\ncategories: \n- [ICPC]\n- [线段树]\n---\n# [Ryuji doesn't want to study](https://nanti.jisuanke.com/t/31460)\n# 问题分析\n我们可以做一个前缀和$sum\\{a[i]\\}$和一个前缀和$sum\\{(n-i)*a[i]\\}$(看起来就像一个三角形，我们这里称之为$triangle[i]$)，如图所示。\n<!--more-->\n![这里写图片描述](https://img-blog.csdn.net/20180909231038833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V0ZXJuYWxseTgzMTE0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n假设我们要求区间$[2,5] = 2\\cdot4+3\\cdot3+4\\cdot2+5\\cdot1$，那么，我们通过图中可以发现答案就是梯形的数值减去平行四边形的数值。即$$query(2,5) = (triangle[5]-triangle[1]) -(7-5)\\cdot(sum[5]-sum[1])$$\n因此我们只需要用线段树维护两个前缀和即可。\n\n------------------------\n这里蒻再补充一个做法。就是线段树维护前缀和的区间和。\n我们将题里的要求分解一下。\n假设仍然要求$query(2,5)$，\n分解开来就会发现$$\\begin{align}\n query(2,5) & =  (2 + 3 + 4 + 5 )+ (2 + 3 + 4)+(2+3)+(2) \\\\\\\\\n & =  (sum[5]-sum[1]) + (sum[4]-sum[1])+(sum[3]-sum[1])+(sum[2]-sum[1]) \\\\\\\\\n & = \\sum_{i=2}^5 sum(i)-(5-3+1)\\cdot sum(1)\n\\end{align}$$\n所以题目所求变为$$\n\tquery(l,r) = \\sum_{i=l}^rsum(i)-(r-l+1)\\cdot sum(l-1)\n$$\n\n# 代码(第一种做法)\n\n```c++\n#include <cstdio>\nusing namespace std;\ntypedef long long LL;\nconst int N = 1e6+4;\nint n,q,a[N];\nstruct data {\n    int l, r;\n    LL val, triangle;\n} tr[N<<1];\n\ninline void pushup(int rt) {\n    tr[rt].val = tr[rt << 1].val + tr[rt << 1 | 1].val;\n    tr[rt].triangle = tr[rt << 1].triangle + tr[rt << 1 | 1].triangle;\n}\n\nvoid build(int k,int s,int t) {//建树\n    tr[k].l = s;\n    tr[k].r = t;\n    if (s == t) {\n        tr[k].val = a[s];\n        tr[k].triangle = a[s] * 1LL * (n - s + 1);\n        return;\n    }\n    int mid = (s + t) >> 1;\n    build(k << 1, s, mid);\n    build(k << 1 | 1, mid + 1, t);\n    pushup(k);\n}\n\nLL query(int k,int x,int y,int len) {//区间求和\n    int L = tr[k].l, R = tr[k].r;\n    if (x == L && y == R)\n        return tr[k].triangle - 1LL * len * tr[k].val;\n    int mid = (L + R) >> 1;\n    if (y <= mid)\n        return query(k << 1, x, y, len);\n    else if (x > mid)\n        return query(k << 1 | 1, x, y, len);\n    else\n        return query(k << 1, x, mid, len) + query(k << 1 | 1, mid + 1, y, len);\n}\n\nvoid update(int rt,int L,int R,int x,LL v) {\n    if (L == R) {\n        tr[rt].triangle = (n - x + 1) * 1LL * v;\n        tr[rt].val = v;\n        return;\n    }\n    int mid = (L + R) >> 1;\n    if (x <= mid)\n        update(rt << 1, L, mid, x, v);\n    else\n        update(rt << 1 | 1, mid + 1, R, x, v);\n    pushup(rt);\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &q);\n    for (int i = 1; i <= n; i++)\n        scanf(\"%d\", &a[i]);\n    build(1, 1, n);\n    int op, x, y;\n    for (int i = 1; i <= q; i++) {\n        scanf(\"%d%d%d\", &op, &x, &y);\n        if (op == 2)\n            update(1, 1, n, x, y);\n        else\n            printf(\"%lld\\n\", query(1, x, y, n - y));\n    }\n    return 0;\n}\n```\n# 代码(第二种做法)\n```c++\n#include <cstdio>\n#define L tree[rt].l\n#define R tree[rt].r\ntypedef long long LL;\nusing namespace std;\nconst int N = 1e6+4;\nint a[N],n,q;\nLL sum[N];\nstruct data {\n        int l,r;\n        LL Inc,nSum;\n} tree[N];\n\nvoid pushup(int rt)\n{\n        tree[rt].nSum = tree[rt<<1].nSum+tree[rt<<1|1].nSum;\n}\n\nvoid pushdown(int rt) {\n        if(tree[rt].Inc) {\n                int mid = (L+R)>>1;\n                tree[rt<<1].Inc += tree[rt].Inc;\n                tree[rt<<1|1].Inc += tree[rt].Inc;\n                tree[rt<<1].nSum += tree[rt].Inc*(mid-L+1);\n                tree[rt<<1|1].nSum += tree[rt].Inc*(R-mid);\n                tree[rt].Inc = 0;\n        }\n}\n\nvoid build(int rt,int x,int y) {//建树\n        tree[rt].l = x; tree[rt].r = y;\n        if(x == y) {\n                tree[rt].Inc = 0;\n                tree[rt].nSum = sum[x];\n                return;\n        }\n        int mid = (x + y) >> 1;\n        build(rt<<1,x,mid);\n        build(rt<<1|1,mid+1,y);\n        pushup(rt);\n}\n\nLL query(int rt,int x,int y){//区间求和\n        if(x == L && y == R)\n                return tree[rt].nSum;\n        pushdown(rt);\n        int mid=(L+R)>>1;\n        if(y<=mid)\n                return query(rt<<1,x,y);\n        else if(x>mid)\n                return query(rt<<1|1,x,y);\n        else\n                return query(rt<<1,x,mid)+query(rt<<1|1,mid+1,y);\n}\n\nvoid update(int rt,int x,int y,LL v)\n{\n        if(x == L && R == y) {\n                tree[rt].nSum += v*1LL*(R-L+1);\n                tree[rt].Inc += v;\n                return;\n        }\n        pushdown(rt);\n        int mid = (L+R)>>1;\n        if(y <= mid)\n                update(rt << 1, x, y,v);\n        else if(x > mid)\n                update(rt << 1 | 1, x, y,v);\n        else{\n                update(rt << 1, x, mid,v);\n                update(rt << 1 | 1, mid+1, y,v);\n        }\n        pushup(rt);\n}\n\n\nint main(){\n        scanf(\"%d%d\",&n,&q);\n        for(int i=1; i<=n; i++) {\n                scanf(\"%d\",&a[i]);\n                sum[i] = sum[i-1] + a[i];\n        }\n        build(1,1,n);\n        int op,x,y;\n        for(int i=1; i<=q; i++) {\n                scanf(\"%d%d%d\",&op,&x,&y);\n                if(op==2) {\n                        update(1,x,n,1LL*(y-a[x]));\n                        a[x] = y;\n                }\n                else{\n                        if(x==1) {\n                                printf(\"%lld\\n\", query(1,x,y));\n                        }else\n                                printf(\"%lld\\n\", query(1,x,y)-1LL*(y-x+1)*query(1,x-1,x-1));\n                }\n        }\n        return 0;\n}\n\n```\n","slug":"ICPC-Net-xuzhou-H","published":1,"updated":"2018-10-27T06:06:31.903Z","layout":"post","photos":[],"link":"","_id":"cjpvbaclf000xs5150mv07e5q","content":"<h1 id=\"Ryuji-doesn’t-want-to-study\"><a href=\"#Ryuji-doesn’t-want-to-study\" class=\"headerlink\" title=\"Ryuji doesn’t want to study\"></a><a href=\"https://nanti.jisuanke.com/t/31460\" target=\"_blank\" rel=\"noopener\">Ryuji doesn’t want to study</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>我们可以做一个前缀和$sum{a[i]}$和一个前缀和$sum{(n-i)*a[i]}$(看起来就像一个三角形，我们这里称之为$triangle[i]$)，如图所示。<br><a id=\"more\"></a><br><img src=\"https://img-blog.csdn.net/20180909231038833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V0ZXJuYWxseTgzMTE0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"><br>假设我们要求区间$[2,5] = 2\\cdot4+3\\cdot3+4\\cdot2+5\\cdot1$，那么，我们通过图中可以发现答案就是梯形的数值减去平行四边形的数值。即$$query(2,5) = (triangle[5]-triangle[1]) -(7-5)\\cdot(sum[5]-sum[1])$$<br>因此我们只需要用线段树维护两个前缀和即可。</p>\n<hr>\n<p>这里蒻再补充一个做法。就是线段树维护前缀和的区间和。<br>我们将题里的要求分解一下。<br>假设仍然要求$query(2,5)$，<br>分解开来就会发现$$\\begin{align}<br> query(2,5) &amp; =  (2 + 3 + 4 + 5 )+ (2 + 3 + 4)+(2+3)+(2) \\\\\\\\<br> &amp; =  (sum[5]-sum[1]) + (sum[4]-sum[1])+(sum[3]-sum[1])+(sum[2]-sum[1]) \\\\\\\\<br> &amp; = \\sum_{i=2}^5 sum(i)-(5-3+1)\\cdot sum(1)<br>\\end{align}$$<br>所以题目所求变为$$<br>    query(l,r) = \\sum_{i=l}^rsum(i)-(r-l+1)\\cdot sum(l-1)<br>$$</p>\n<h1 id=\"代码-第一种做法\"><a href=\"#代码-第一种做法\" class=\"headerlink\" title=\"代码(第一种做法)\"></a>代码(第一种做法)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span>+<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,q,a[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    LL val, triangle;</span><br><span class=\"line\">&#125; tr[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    tr[rt].val = tr[rt &lt;&lt; <span class=\"number\">1</span>].val + tr[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].val;</span><br><span class=\"line\">    tr[rt].triangle = tr[rt &lt;&lt; <span class=\"number\">1</span>].triangle + tr[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].triangle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span> </span>&#123;<span class=\"comment\">//建树</span></span><br><span class=\"line\">    tr[k].l = s;</span><br><span class=\"line\">    tr[k].r = t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == t) &#123;</span><br><span class=\"line\">        tr[k].val = a[s];</span><br><span class=\"line\">        tr[k].triangle = a[s] * <span class=\"number\">1L</span>L * (n - s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (s + t) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, s, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, t);</span><br><span class=\"line\">    pushup(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> len)</span> </span>&#123;<span class=\"comment\">//区间求和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> L = tr[k].l, R = tr[k].r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == L &amp;&amp; y == R)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tr[k].triangle - <span class=\"number\">1L</span>L * len * tr[k].val;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (L + R) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, x, y, len);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, x, y, len);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, x, mid, len) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, y, len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">        tr[rt].triangle = (n - x + <span class=\"number\">1</span>) * <span class=\"number\">1L</span>L * v;</span><br><span class=\"line\">        tr[rt].val = v;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (L + R) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid)</span><br><span class=\"line\">        update(rt &lt;&lt; <span class=\"number\">1</span>, L, mid, x, v);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, R, x, v);</span><br><span class=\"line\">    pushup(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>, x, y, n - y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码-第二种做法\"><a href=\"#代码-第二种做法\" class=\"headerlink\" title=\"代码(第二种做法)\"></a>代码(第二种做法)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> L tree[rt].l</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R tree[rt].r</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span>+<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N],n,q;</span><br><span class=\"line\">LL sum[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\">        LL Inc,nSum;</span><br><span class=\"line\">&#125; tree[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        tree[rt].nSum = tree[rt&lt;&lt;<span class=\"number\">1</span>].nSum+tree[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].nSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tree[rt].Inc) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> mid = (L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>].Inc += tree[rt].Inc;</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].Inc += tree[rt].Inc;</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>].nSum += tree[rt].Inc*(mid-L+<span class=\"number\">1</span>);</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].nSum += tree[rt].Inc*(R-mid);</span><br><span class=\"line\">                tree[rt].Inc = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span> </span>&#123;<span class=\"comment\">//建树</span></span><br><span class=\"line\">        tree[rt].l = x; tree[rt].r = y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == y) &#123;</span><br><span class=\"line\">                tree[rt].Inc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                tree[rt].nSum = sum[x];</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (x + y) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        build(rt&lt;&lt;<span class=\"number\">1</span>,x,mid);</span><br><span class=\"line\">        build(rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        pushup(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"comment\">//区间求和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == L &amp;&amp; y == R)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tree[rt].nSum;</span><br><span class=\"line\">        pushdown(rt);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y&lt;=mid)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(rt&lt;&lt;<span class=\"number\">1</span>,x,y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;mid)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,x,y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(rt&lt;&lt;<span class=\"number\">1</span>,x,mid)+query(rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,LL v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == L &amp;&amp; R == y) &#123;</span><br><span class=\"line\">                tree[rt].nSum += v*<span class=\"number\">1L</span>L*(R-L+<span class=\"number\">1</span>);</span><br><span class=\"line\">                tree[rt].Inc += v;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(rt);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y &lt;= mid)</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span>, x, y,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; mid)</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, x, y,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span>, x, mid,v);</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid+<span class=\"number\">1</span>, y,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushup(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">                sum[i] = sum[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> op,x,y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=q; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(op==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        update(<span class=\"number\">1</span>,x,n,<span class=\"number\">1L</span>L*(y-a[x]));</span><br><span class=\"line\">                        a[x] = y;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>,x,y));</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">                                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>,x,y)<span class=\"number\">-1L</span>L*(y-x+<span class=\"number\">1</span>)*query(<span class=\"number\">1</span>,x<span class=\"number\">-1</span>,x<span class=\"number\">-1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Ryuji-doesn’t-want-to-study\"><a href=\"#Ryuji-doesn’t-want-to-study\" class=\"headerlink\" title=\"Ryuji doesn’t want to study\"></a><a href=\"https://nanti.jisuanke.com/t/31460\" target=\"_blank\" rel=\"noopener\">Ryuji doesn’t want to study</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>我们可以做一个前缀和$sum{a[i]}$和一个前缀和$sum{(n-i)*a[i]}$(看起来就像一个三角形，我们这里称之为$triangle[i]$)，如图所示。<br>","more":"<br><img src=\"https://img-blog.csdn.net/20180909231038833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V0ZXJuYWxseTgzMTE0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"><br>假设我们要求区间$[2,5] = 2\\cdot4+3\\cdot3+4\\cdot2+5\\cdot1$，那么，我们通过图中可以发现答案就是梯形的数值减去平行四边形的数值。即$$query(2,5) = (triangle[5]-triangle[1]) -(7-5)\\cdot(sum[5]-sum[1])$$<br>因此我们只需要用线段树维护两个前缀和即可。</p>\n<hr>\n<p>这里蒻再补充一个做法。就是线段树维护前缀和的区间和。<br>我们将题里的要求分解一下。<br>假设仍然要求$query(2,5)$，<br>分解开来就会发现$$\\begin{align}<br> query(2,5) &amp; =  (2 + 3 + 4 + 5 )+ (2 + 3 + 4)+(2+3)+(2) \\\\\\\\<br> &amp; =  (sum[5]-sum[1]) + (sum[4]-sum[1])+(sum[3]-sum[1])+(sum[2]-sum[1]) \\\\\\\\<br> &amp; = \\sum_{i=2}^5 sum(i)-(5-3+1)\\cdot sum(1)<br>\\end{align}$$<br>所以题目所求变为$$<br>    query(l,r) = \\sum_{i=l}^rsum(i)-(r-l+1)\\cdot sum(l-1)<br>$$</p>\n<h1 id=\"代码-第一种做法\"><a href=\"#代码-第一种做法\" class=\"headerlink\" title=\"代码(第一种做法)\"></a>代码(第一种做法)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span>+<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,q,a[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    LL val, triangle;</span><br><span class=\"line\">&#125; tr[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    tr[rt].val = tr[rt &lt;&lt; <span class=\"number\">1</span>].val + tr[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].val;</span><br><span class=\"line\">    tr[rt].triangle = tr[rt &lt;&lt; <span class=\"number\">1</span>].triangle + tr[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].triangle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span> </span>&#123;<span class=\"comment\">//建树</span></span><br><span class=\"line\">    tr[k].l = s;</span><br><span class=\"line\">    tr[k].r = t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == t) &#123;</span><br><span class=\"line\">        tr[k].val = a[s];</span><br><span class=\"line\">        tr[k].triangle = a[s] * <span class=\"number\">1L</span>L * (n - s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (s + t) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, s, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, t);</span><br><span class=\"line\">    pushup(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> len)</span> </span>&#123;<span class=\"comment\">//区间求和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> L = tr[k].l, R = tr[k].r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == L &amp;&amp; y == R)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tr[k].triangle - <span class=\"number\">1L</span>L * len * tr[k].val;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (L + R) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, x, y, len);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, x, y, len);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, x, mid, len) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, y, len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">        tr[rt].triangle = (n - x + <span class=\"number\">1</span>) * <span class=\"number\">1L</span>L * v;</span><br><span class=\"line\">        tr[rt].val = v;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (L + R) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid)</span><br><span class=\"line\">        update(rt &lt;&lt; <span class=\"number\">1</span>, L, mid, x, v);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, R, x, v);</span><br><span class=\"line\">    pushup(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>, x, y, n - y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码-第二种做法\"><a href=\"#代码-第二种做法\" class=\"headerlink\" title=\"代码(第二种做法)\"></a>代码(第二种做法)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> L tree[rt].l</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R tree[rt].r</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span>+<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N],n,q;</span><br><span class=\"line\">LL sum[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\">        LL Inc,nSum;</span><br><span class=\"line\">&#125; tree[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        tree[rt].nSum = tree[rt&lt;&lt;<span class=\"number\">1</span>].nSum+tree[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].nSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tree[rt].Inc) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> mid = (L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>].Inc += tree[rt].Inc;</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].Inc += tree[rt].Inc;</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>].nSum += tree[rt].Inc*(mid-L+<span class=\"number\">1</span>);</span><br><span class=\"line\">                tree[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].nSum += tree[rt].Inc*(R-mid);</span><br><span class=\"line\">                tree[rt].Inc = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span> </span>&#123;<span class=\"comment\">//建树</span></span><br><span class=\"line\">        tree[rt].l = x; tree[rt].r = y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == y) &#123;</span><br><span class=\"line\">                tree[rt].Inc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                tree[rt].nSum = sum[x];</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (x + y) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        build(rt&lt;&lt;<span class=\"number\">1</span>,x,mid);</span><br><span class=\"line\">        build(rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        pushup(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"comment\">//区间求和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == L &amp;&amp; y == R)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tree[rt].nSum;</span><br><span class=\"line\">        pushdown(rt);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y&lt;=mid)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(rt&lt;&lt;<span class=\"number\">1</span>,x,y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;mid)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,x,y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(rt&lt;&lt;<span class=\"number\">1</span>,x,mid)+query(rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,LL v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == L &amp;&amp; R == y) &#123;</span><br><span class=\"line\">                tree[rt].nSum += v*<span class=\"number\">1L</span>L*(R-L+<span class=\"number\">1</span>);</span><br><span class=\"line\">                tree[rt].Inc += v;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(rt);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y &lt;= mid)</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span>, x, y,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; mid)</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, x, y,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span>, x, mid,v);</span><br><span class=\"line\">                update(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid+<span class=\"number\">1</span>, y,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushup(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">                sum[i] = sum[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> op,x,y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=q; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(op==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        update(<span class=\"number\">1</span>,x,n,<span class=\"number\">1L</span>L*(y-a[x]));</span><br><span class=\"line\">                        a[x] = y;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>,x,y));</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">                                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>,x,y)<span class=\"number\">-1L</span>L*(y-x+<span class=\"number\">1</span>)*query(<span class=\"number\">1</span>,x<span class=\"number\">-1</span>,x<span class=\"number\">-1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"bzoj 2257 瓶子和燃料(裴蜀定理)","date":"2018-08-28T07:05:10.000Z","_content":"# [瓶子和燃料](https://www.lydsy.com/JudgeOnline/problem.php?id=2257)\n# 描述\njyy就一直想着尽快回地球，可惜他飞船的燃料不够了。 \n有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy\n的飞船上共有 N个瓶子(1<=N<=1000) ，经过协商，火星人只要其中的K 个 。 jyy\n将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只\n在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1<=Vi<=1000000000 ） 。 \n火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料\n库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火\n星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料；\n2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满\n或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能\n得到的最小正体积。 \njyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找\n到最优的瓶子组合，使得火星人给出尽量多的燃料。 \n<!--more-->\n# Input\n第1行：2个整数N,K，  \n第2..N 行：每行1个整数，第i+1 行的整数为Vi\n# Output\n仅1行，一个整数，表示火星人给出燃料的最大值。\n# Sample Input\n3 2 \n3 \n4 \n4\n# Sample Output\n4 \n\n# Hint\n选择第2 个瓶子和第 个瓶子，火星人被迫会给出4 体积的容量。\n# 问题分析\n题意：最大化$N$个瓶子可以获得的最小值。\n由裴蜀定理可知$ax+by=g$有整数解时当且仅当$g$是$gcd(a,b)$的倍数。\n所以我们可以得到\n1. 两个瓶子可以获得的最小值为$gcd(a,b)$\n2. $k$个瓶子可以获得的最小值为这$k$个瓶子的$gcd$\n因此我们就可以求出$N$个数的因子，从后往前找出现次数大于等于$k$的因此就好了。\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nmap<int,int> cnt;\n\nint main()\n{\n    int n,k,x;\n    scanf(\"%d%d\",&n ,&k);\n    for(int t = 0; t < n; ++t) {\n        scanf(\"%d\", &x);\n        for (int i = 1; i * i <= x; ++i) {\n            if (x == i * i)\n                cnt[i]++;\n            else if (x % i == 0)\n                cnt[i]++, cnt[x / i]++;\n        }\n    }\n    for(map<int,int>::iterator iter = --cnt.end(); iter!=--cnt.begin(); --iter){\n        if((*iter).second >= k){\n            printf(\"%d\\n\",(*iter).first);\n            break;\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/bzoj2257.md","raw":"---\ntitle: bzoj 2257 瓶子和燃料(裴蜀定理)\ndate: 2018-08-28 15:05:10\ntags: [数论,裴蜀定理,bzoj]\ncategories: [数论,裴蜀定理]\n---\n# [瓶子和燃料](https://www.lydsy.com/JudgeOnline/problem.php?id=2257)\n# 描述\njyy就一直想着尽快回地球，可惜他飞船的燃料不够了。 \n有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy\n的飞船上共有 N个瓶子(1<=N<=1000) ，经过协商，火星人只要其中的K 个 。 jyy\n将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只\n在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1<=Vi<=1000000000 ） 。 \n火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料\n库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火\n星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料；\n2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满\n或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能\n得到的最小正体积。 \njyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找\n到最优的瓶子组合，使得火星人给出尽量多的燃料。 \n<!--more-->\n# Input\n第1行：2个整数N,K，  \n第2..N 行：每行1个整数，第i+1 行的整数为Vi\n# Output\n仅1行，一个整数，表示火星人给出燃料的最大值。\n# Sample Input\n3 2 \n3 \n4 \n4\n# Sample Output\n4 \n\n# Hint\n选择第2 个瓶子和第 个瓶子，火星人被迫会给出4 体积的容量。\n# 问题分析\n题意：最大化$N$个瓶子可以获得的最小值。\n由裴蜀定理可知$ax+by=g$有整数解时当且仅当$g$是$gcd(a,b)$的倍数。\n所以我们可以得到\n1. 两个瓶子可以获得的最小值为$gcd(a,b)$\n2. $k$个瓶子可以获得的最小值为这$k$个瓶子的$gcd$\n因此我们就可以求出$N$个数的因子，从后往前找出现次数大于等于$k$的因此就好了。\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nmap<int,int> cnt;\n\nint main()\n{\n    int n,k,x;\n    scanf(\"%d%d\",&n ,&k);\n    for(int t = 0; t < n; ++t) {\n        scanf(\"%d\", &x);\n        for (int i = 1; i * i <= x; ++i) {\n            if (x == i * i)\n                cnt[i]++;\n            else if (x % i == 0)\n                cnt[i]++, cnt[x / i]++;\n        }\n    }\n    for(map<int,int>::iterator iter = --cnt.end(); iter!=--cnt.begin(); --iter){\n        if((*iter).second >= k){\n            printf(\"%d\\n\",(*iter).first);\n            break;\n        }\n    }\n    return 0;\n}\n```\n","slug":"bzoj2257","published":1,"updated":"2018-10-27T06:06:31.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbacqd0016s515geb2d6ri","content":"<h1 id=\"瓶子和燃料\"><a href=\"#瓶子和燃料\" class=\"headerlink\" title=\"瓶子和燃料\"></a><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=2257\" target=\"_blank\" rel=\"noopener\">瓶子和燃料</a></h1><h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p>jyy就一直想着尽快回地球，可惜他飞船的燃料不够了。<br>有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy<br>的飞船上共有 N个瓶子(1&lt;=N&lt;=1000) ，经过协商，火星人只要其中的K 个 。 jyy<br>将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只<br>在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1&lt;=Vi&lt;=1000000000 ） 。<br>火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料<br>库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火<br>星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料；<br>2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满<br>或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能<br>得到的最小正体积。<br>jyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找<br>到最优的瓶子组合，使得火星人给出尽量多的燃料。<br><a id=\"more\"></a></p>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>第1行：2个整数N,K，<br>第2..N 行：每行1个整数，第i+1 行的整数为Vi</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>仅1行，一个整数，表示火星人给出燃料的最大值。</p>\n<h1 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h1><p>3 2<br>3<br>4<br>4</p>\n<h1 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h1><p>4 </p>\n<h1 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h1><p>选择第2 个瓶子和第 个瓶子，火星人被迫会给出4 体积的容量。</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：最大化$N$个瓶子可以获得的最小值。<br>由裴蜀定理可知$ax+by=g$有整数解时当且仅当$g$是$gcd(a,b)$的倍数。<br>所以我们可以得到</p>\n<ol>\n<li>两个瓶子可以获得的最小值为$gcd(a,b)$</li>\n<li>$k$个瓶子可以获得的最小值为这$k$个瓶子的$gcd$<br>因此我们就可以求出$N$个数的因子，从后往前找出现次数大于等于$k$的因此就好了。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n ,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; n; ++t) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i * i &lt;= x; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == i * i)</span><br><span class=\"line\">                cnt[i]++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                cnt[i]++, cnt[x / i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;::iterator iter = --cnt.end(); iter!=--cnt.begin(); --iter)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((*iter).second &gt;= k)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,(*iter).first);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"瓶子和燃料\"><a href=\"#瓶子和燃料\" class=\"headerlink\" title=\"瓶子和燃料\"></a><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=2257\" target=\"_blank\" rel=\"noopener\">瓶子和燃料</a></h1><h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p>jyy就一直想着尽快回地球，可惜他飞船的燃料不够了。<br>有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy<br>的飞船上共有 N个瓶子(1&lt;=N&lt;=1000) ，经过协商，火星人只要其中的K 个 。 jyy<br>将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只<br>在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1&lt;=Vi&lt;=1000000000 ） 。<br>火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料<br>库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火<br>星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料；<br>2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满<br>或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能<br>得到的最小正体积。<br>jyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找<br>到最优的瓶子组合，使得火星人给出尽量多的燃料。<br>","more":"</p>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>第1行：2个整数N,K，<br>第2..N 行：每行1个整数，第i+1 行的整数为Vi</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>仅1行，一个整数，表示火星人给出燃料的最大值。</p>\n<h1 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h1><p>3 2<br>3<br>4<br>4</p>\n<h1 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h1><p>4 </p>\n<h1 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h1><p>选择第2 个瓶子和第 个瓶子，火星人被迫会给出4 体积的容量。</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：最大化$N$个瓶子可以获得的最小值。<br>由裴蜀定理可知$ax+by=g$有整数解时当且仅当$g$是$gcd(a,b)$的倍数。<br>所以我们可以得到</p>\n<ol>\n<li>两个瓶子可以获得的最小值为$gcd(a,b)$</li>\n<li>$k$个瓶子可以获得的最小值为这$k$个瓶子的$gcd$<br>因此我们就可以求出$N$个数的因子，从后往前找出现次数大于等于$k$的因此就好了。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n ,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; n; ++t) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i * i &lt;= x; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == i * i)</span><br><span class=\"line\">                cnt[i]++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                cnt[i]++, cnt[x / i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;::iterator iter = --cnt.end(); iter!=--cnt.begin(); --iter)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((*iter).second &gt;= k)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,(*iter).first);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"bzoj2299 向量(裴蜀定理)","date":"2018-08-28T05:54:24.000Z","_content":"# [向量](https://www.lydsy.com/JudgeOnline/problem.php?id=2299)\n# 描述\n给你一对数a,b，你可以任意使用$(a,b), (a,-b), (-a,b), (-a,-b), (b,a), (b,-a), (-b,a), (-b,-a)$这些向量，问你能不能拼出另一个向量$(x,y)$。\n\n说明：这里的拼就是使得你选出的向量之和为$(x,y)$\n<!--more-->\n# Input\n第一行数组组数$t,(t<=50000)$\n\n接下来t行每行四个整数$a,b,x,y  (-2*10^9<=a,b,x,y<=2*10^9)$\n# Output\n$t$行每行为Y或者为N，分别表示可以拼出来，不能拼出来\n# Sample Input\n3\n\n2 1 3 3\n\n1 1 0 1\n\n1 0 -2 3\n# Sample Output\nY\n\nN\n\nY\n\n#样例解释：\n\n\n\n第一组：(2,1)+(1,2)=(3,3)\n\n\n\n\n第三组：(-1,0)+(-1,0)+(0,1)+(0,1)+(0,1)=(-2,3)\n# 问题分析\n\n通过观察就可以发现上述向量可以归类成四个操作\n1. $x+=2a,y+0$\n2. $y+=2b,y+0$\n3. $x+a,y+b$\n4. $x+b,y+a$\n然后$3$和$4$最多只会用到一次，因为两次就会回到$1$和$2$的状态。所以我们去枚举操作$3$和$4$套裴蜀定理就可以了。\n\n$k_1\\cdot (a,b)+k_2(b,a)=(x,y)$\n1. $k_1\\cdot a+ k_2\\cdot b = x$\n2. $k_1\\cdot b+ k_2\\cdot a = y$\n这里$1$和$2$的$k_1$与$k_2$并不一定相等，但是我们可以肯定至少奇偶性是相同的，\n\n因此套用裴蜀定理，判断$x$和$y$是否能同时整除$gcd(a,b)$即可。\n```c++\n\nusing namespace std;\n\nlong long gcd(long long a,long long b)\n{\n    return b==0?a:gcd(b,a%b);\n}\n\nbool love(long long x,long long y,long long g)\n{\n    return x%g==0&&y%g==0;\n}\n\nint main()\n{\n    long long t,a,b,x,y;\n    for(scanf(\"%lld\",&t); t; t--) {\n        scanf(\"%lld%lld%lld%lld\", &a, &b, &x, &y);\n        long long g = gcd(2 * a, 2 * b);\n        if (love(x, y, g) || love(x + a, y + b, g) || love(x + b, y + a, g) || love(x + a + b, y + a + b, g))\n            puts(\"Y\");\n        else\n            puts(\"N\");\n    }\n    return 0;\n}\n```\n","source":"_posts/bzoj2299.md","raw":"---\ntitle: bzoj2299 向量(裴蜀定理)\ndate: 2018-08-28 13:54:24\ntags: [数论,裴蜀定理]\ncategories: [数论,裴蜀定理]\n---\n# [向量](https://www.lydsy.com/JudgeOnline/problem.php?id=2299)\n# 描述\n给你一对数a,b，你可以任意使用$(a,b), (a,-b), (-a,b), (-a,-b), (b,a), (b,-a), (-b,a), (-b,-a)$这些向量，问你能不能拼出另一个向量$(x,y)$。\n\n说明：这里的拼就是使得你选出的向量之和为$(x,y)$\n<!--more-->\n# Input\n第一行数组组数$t,(t<=50000)$\n\n接下来t行每行四个整数$a,b,x,y  (-2*10^9<=a,b,x,y<=2*10^9)$\n# Output\n$t$行每行为Y或者为N，分别表示可以拼出来，不能拼出来\n# Sample Input\n3\n\n2 1 3 3\n\n1 1 0 1\n\n1 0 -2 3\n# Sample Output\nY\n\nN\n\nY\n\n#样例解释：\n\n\n\n第一组：(2,1)+(1,2)=(3,3)\n\n\n\n\n第三组：(-1,0)+(-1,0)+(0,1)+(0,1)+(0,1)=(-2,3)\n# 问题分析\n\n通过观察就可以发现上述向量可以归类成四个操作\n1. $x+=2a,y+0$\n2. $y+=2b,y+0$\n3. $x+a,y+b$\n4. $x+b,y+a$\n然后$3$和$4$最多只会用到一次，因为两次就会回到$1$和$2$的状态。所以我们去枚举操作$3$和$4$套裴蜀定理就可以了。\n\n$k_1\\cdot (a,b)+k_2(b,a)=(x,y)$\n1. $k_1\\cdot a+ k_2\\cdot b = x$\n2. $k_1\\cdot b+ k_2\\cdot a = y$\n这里$1$和$2$的$k_1$与$k_2$并不一定相等，但是我们可以肯定至少奇偶性是相同的，\n\n因此套用裴蜀定理，判断$x$和$y$是否能同时整除$gcd(a,b)$即可。\n```c++\n\nusing namespace std;\n\nlong long gcd(long long a,long long b)\n{\n    return b==0?a:gcd(b,a%b);\n}\n\nbool love(long long x,long long y,long long g)\n{\n    return x%g==0&&y%g==0;\n}\n\nint main()\n{\n    long long t,a,b,x,y;\n    for(scanf(\"%lld\",&t); t; t--) {\n        scanf(\"%lld%lld%lld%lld\", &a, &b, &x, &y);\n        long long g = gcd(2 * a, 2 * b);\n        if (love(x, y, g) || love(x + a, y + b, g) || love(x + b, y + a, g) || love(x + a + b, y + a + b, g))\n            puts(\"Y\");\n        else\n            puts(\"N\");\n    }\n    return 0;\n}\n```\n","slug":"bzoj2299","published":1,"updated":"2018-10-27T06:06:31.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbacqf0018s515dmrsh944","content":"<h1 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=2299\" target=\"_blank\" rel=\"noopener\">向量</a></h1><h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p>给你一对数a,b，你可以任意使用$(a,b), (a,-b), (-a,b), (-a,-b), (b,a), (b,-a), (-b,a), (-b,-a)$这些向量，问你能不能拼出另一个向量$(x,y)$。</p>\n<p>说明：这里的拼就是使得你选出的向量之和为$(x,y)$<br><a id=\"more\"></a></p>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>第一行数组组数$t,(t&lt;=50000)$</p>\n<p>接下来t行每行四个整数$a,b,x,y  (-2<em>10^9&lt;=a,b,x,y&lt;=2</em>10^9)$</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>$t$行每行为Y或者为N，分别表示可以拼出来，不能拼出来</p>\n<h1 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h1><p>3</p>\n<p>2 1 3 3</p>\n<p>1 1 0 1</p>\n<p>1 0 -2 3</p>\n<h1 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h1><p>Y</p>\n<p>N</p>\n<p>Y</p>\n<p>#样例解释：</p>\n<p>第一组：(2,1)+(1,2)=(3,3)</p>\n<p>第三组：(-1,0)+(-1,0)+(0,1)+(0,1)+(0,1)=(-2,3)</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>通过观察就可以发现上述向量可以归类成四个操作</p>\n<ol>\n<li>$x+=2a,y+0$</li>\n<li>$y+=2b,y+0$</li>\n<li>$x+a,y+b$</li>\n<li>$x+b,y+a$<br>然后$3$和$4$最多只会用到一次，因为两次就会回到$1$和$2$的状态。所以我们去枚举操作$3$和$4$套裴蜀定理就可以了。</li>\n</ol>\n<p>$k_1\\cdot (a,b)+k_2(b,a)=(x,y)$</p>\n<ol>\n<li>$k_1\\cdot a+ k_2\\cdot b = x$</li>\n<li>$k_1\\cdot b+ k_2\\cdot a = y$<br>这里$1$和$2$的$k_1$与$k_2$并不一定相等，但是我们可以肯定至少奇偶性是相同的，</li>\n</ol>\n<p>因此套用裴蜀定理，判断$x$和$y$是否能同时整除$gcd(a,b)$即可。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b==<span class=\"number\">0</span>?a:gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">love</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> y,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x%g==<span class=\"number\">0</span>&amp;&amp;y%g==<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> t,a,b,x,y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;t); t; t--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld%lld\"</span>, &amp;a, &amp;b, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g = gcd(<span class=\"number\">2</span> * a, <span class=\"number\">2</span> * b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (love(x, y, g) || love(x + a, y + b, g) || love(x + b, y + a, g) || love(x + a + b, y + a + b, g))</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"Y\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=2299\" target=\"_blank\" rel=\"noopener\">向量</a></h1><h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p>给你一对数a,b，你可以任意使用$(a,b), (a,-b), (-a,b), (-a,-b), (b,a), (b,-a), (-b,a), (-b,-a)$这些向量，问你能不能拼出另一个向量$(x,y)$。</p>\n<p>说明：这里的拼就是使得你选出的向量之和为$(x,y)$<br>","more":"</p>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>第一行数组组数$t,(t&lt;=50000)$</p>\n<p>接下来t行每行四个整数$a,b,x,y  (-2<em>10^9&lt;=a,b,x,y&lt;=2</em>10^9)$</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>$t$行每行为Y或者为N，分别表示可以拼出来，不能拼出来</p>\n<h1 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h1><p>3</p>\n<p>2 1 3 3</p>\n<p>1 1 0 1</p>\n<p>1 0 -2 3</p>\n<h1 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h1><p>Y</p>\n<p>N</p>\n<p>Y</p>\n<p>#样例解释：</p>\n<p>第一组：(2,1)+(1,2)=(3,3)</p>\n<p>第三组：(-1,0)+(-1,0)+(0,1)+(0,1)+(0,1)=(-2,3)</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>通过观察就可以发现上述向量可以归类成四个操作</p>\n<ol>\n<li>$x+=2a,y+0$</li>\n<li>$y+=2b,y+0$</li>\n<li>$x+a,y+b$</li>\n<li>$x+b,y+a$<br>然后$3$和$4$最多只会用到一次，因为两次就会回到$1$和$2$的状态。所以我们去枚举操作$3$和$4$套裴蜀定理就可以了。</li>\n</ol>\n<p>$k_1\\cdot (a,b)+k_2(b,a)=(x,y)$</p>\n<ol>\n<li>$k_1\\cdot a+ k_2\\cdot b = x$</li>\n<li>$k_1\\cdot b+ k_2\\cdot a = y$<br>这里$1$和$2$的$k_1$与$k_2$并不一定相等，但是我们可以肯定至少奇偶性是相同的，</li>\n</ol>\n<p>因此套用裴蜀定理，判断$x$和$y$是否能同时整除$gcd(a,b)$即可。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b==<span class=\"number\">0</span>?a:gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">love</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> y,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x%g==<span class=\"number\">0</span>&amp;&amp;y%g==<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> t,a,b,x,y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;t); t; t--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld%lld\"</span>, &amp;a, &amp;b, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g = gcd(<span class=\"number\">2</span> * a, <span class=\"number\">2</span> * b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (love(x, y, g) || love(x + a, y + b, g) || love(x + b, y + a, g) || love(x + a + b, y + a + b, g))</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"Y\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Educational Codeforces Round 53 (Rated for Div. 2) C(二分)","date":"2018-10-26T16:40:45.000Z","_content":"# [C. Vasya and Robot](https://codeforces.com/contest/1073/problem/C)\n题解：考虑去根据左端点二分答案即可。\n<!--more-->\n# 代码\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 200100;\nint U[N],R[N],L[N],D[N];\nint n,x,y,sx,sy;\nbool ok(int s,int t)\n{\n\tint ret = t - s + 1, tx = sx, ty = sy;\n\ttx += L[t] - L[s - 1];\n\tty += D[t] - D[s - 1];\n\ttx -= R[t] - R[s - 1];\n\tty -= U[t] - U[s - 1];\n\tif(abs(x - tx) + abs(y - ty) > ret) return 0;\n\treturn (ret - abs(x - tx) - abs(y - ty)) % 2 == 0;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tstring s;\n\tcin>>n>>s>>x>>y;\n\tfor(int i = 0; i < n; ++i) {\n\t\tif(s[i] == 'L') sx--, L[i + 1] = 1;\n\t\tif(s[i] == 'R') sx++, R[i + 1] = 1;\n\t\tif(s[i] == 'U') sy++, U[i + 1] = 1;\n\t\tif(s[i] == 'D') sy--, D[i + 1] = 1;\n\t}\n\tif(sx == x && sy == y) return cout<<0<<endl, 0;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tL[i] += L[i - 1];\n\t\tR[i] += R[i - 1];\n\t\tU[i] += U[i - 1];\n\t\tD[i] += D[i - 1];\n\t}\n\tint ans = n + 1;\n\tfor(int i = 1, f = 0; i <= n; ++i, f = 0){\n\t\tint l = i, r = n;\n\t\twhile(l <= r) {\n\t\t\tint mid = l + (r - l) / 2;\n\t\t\tif(!ok(i,mid)) {\n\t\t\t\tl = mid + 1;\n\t\t\t}else{\n\t\t\t\tr = mid - 1;\n\t\t\t\tf = 1;\n\t\t\t}\n\t\t}\n\t\tif(f) ans = min(ans,r - i + 2);\n\t}\n\tif(ans == n + 1) ans = -1;\n\tcout<<ans<<endl;\n    return 0;\n}\n```\n\n","source":"_posts/codeforces-edu-53-div2-C.md","raw":"---\ntitle: Educational Codeforces Round 53 (Rated for Div. 2) C(二分)\ndate: 2018-10-27 00:40:45\ntags: [二分]\ncategories:\n- [Codeforces]\n- [二分]\n---\n# [C. Vasya and Robot](https://codeforces.com/contest/1073/problem/C)\n题解：考虑去根据左端点二分答案即可。\n<!--more-->\n# 代码\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 200100;\nint U[N],R[N],L[N],D[N];\nint n,x,y,sx,sy;\nbool ok(int s,int t)\n{\n\tint ret = t - s + 1, tx = sx, ty = sy;\n\ttx += L[t] - L[s - 1];\n\tty += D[t] - D[s - 1];\n\ttx -= R[t] - R[s - 1];\n\tty -= U[t] - U[s - 1];\n\tif(abs(x - tx) + abs(y - ty) > ret) return 0;\n\treturn (ret - abs(x - tx) - abs(y - ty)) % 2 == 0;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tstring s;\n\tcin>>n>>s>>x>>y;\n\tfor(int i = 0; i < n; ++i) {\n\t\tif(s[i] == 'L') sx--, L[i + 1] = 1;\n\t\tif(s[i] == 'R') sx++, R[i + 1] = 1;\n\t\tif(s[i] == 'U') sy++, U[i + 1] = 1;\n\t\tif(s[i] == 'D') sy--, D[i + 1] = 1;\n\t}\n\tif(sx == x && sy == y) return cout<<0<<endl, 0;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tL[i] += L[i - 1];\n\t\tR[i] += R[i - 1];\n\t\tU[i] += U[i - 1];\n\t\tD[i] += D[i - 1];\n\t}\n\tint ans = n + 1;\n\tfor(int i = 1, f = 0; i <= n; ++i, f = 0){\n\t\tint l = i, r = n;\n\t\twhile(l <= r) {\n\t\t\tint mid = l + (r - l) / 2;\n\t\t\tif(!ok(i,mid)) {\n\t\t\t\tl = mid + 1;\n\t\t\t}else{\n\t\t\t\tr = mid - 1;\n\t\t\t\tf = 1;\n\t\t\t}\n\t\t}\n\t\tif(f) ans = min(ans,r - i + 2);\n\t}\n\tif(ans == n + 1) ans = -1;\n\tcout<<ans<<endl;\n    return 0;\n}\n```\n\n","slug":"codeforces-edu-53-div2-C","published":1,"updated":"2018-10-27T06:06:31.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbacqk001bs515206o7f0y","content":"<h1 id=\"C-Vasya-and-Robot\"><a href=\"#C-Vasya-and-Robot\" class=\"headerlink\" title=\"C. Vasya and Robot\"></a><a href=\"https://codeforces.com/contest/1073/problem/C\" target=\"_blank\" rel=\"noopener\">C. Vasya and Robot</a></h1><p>题解：考虑去根据左端点二分答案即可。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> U[N],R[N],L[N],D[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,x,y,sx,sy;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = t - s + <span class=\"number\">1</span>, tx = sx, ty = sy;</span><br><span class=\"line\">\ttx += L[t] - L[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\tty += D[t] - D[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\ttx -= R[t] - R[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\tty -= U[t] - U[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(x - tx) + <span class=\"built_in\">abs</span>(y - ty) &gt; ret) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (ret - <span class=\"built_in\">abs</span>(x - tx) - <span class=\"built_in\">abs</span>(y - ty)) % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'L'</span>) sx--, L[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'R'</span>) sx++, R[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'U'</span>) sy++, U[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'D'</span>) sy--, D[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sx == x &amp;&amp; sy == y) <span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>, <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tL[i] += L[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tR[i] += R[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tU[i] += U[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tD[i] += D[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, f = <span class=\"number\">0</span>; i &lt;= n; ++i, f = <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l = i, r = n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l &lt;= r) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!ok(i,mid)) &#123;</span><br><span class=\"line\">\t\t\t\tl = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tf = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f) ans = min(ans,r - i + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ans == n + <span class=\"number\">1</span>) ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"C-Vasya-and-Robot\"><a href=\"#C-Vasya-and-Robot\" class=\"headerlink\" title=\"C. Vasya and Robot\"></a><a href=\"https://codeforces.com/contest/1073/problem/C\" target=\"_blank\" rel=\"noopener\">C. Vasya and Robot</a></h1><p>题解：考虑去根据左端点二分答案即可。<br>","more":"</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> U[N],R[N],L[N],D[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,x,y,sx,sy;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = t - s + <span class=\"number\">1</span>, tx = sx, ty = sy;</span><br><span class=\"line\">\ttx += L[t] - L[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\tty += D[t] - D[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\ttx -= R[t] - R[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\tty -= U[t] - U[s - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(x - tx) + <span class=\"built_in\">abs</span>(y - ty) &gt; ret) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (ret - <span class=\"built_in\">abs</span>(x - tx) - <span class=\"built_in\">abs</span>(y - ty)) % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'L'</span>) sx--, L[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'R'</span>) sx++, R[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'U'</span>) sy++, U[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'D'</span>) sy--, D[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sx == x &amp;&amp; sy == y) <span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>, <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tL[i] += L[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tR[i] += R[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tU[i] += U[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tD[i] += D[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, f = <span class=\"number\">0</span>; i &lt;= n; ++i, f = <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l = i, r = n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l &lt;= r) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!ok(i,mid)) &#123;</span><br><span class=\"line\">\t\t\t\tl = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tf = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f) ans = min(ans,r - i + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ans == n + <span class=\"number\">1</span>) ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"关于欧拉定理的一些知识","date":"2018-08-23T01:29:47.000Z","_content":"\n# [欧拉定理](https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/891345?fr=aladdin)\n$$a^{\\varphi(n)}\\equiv 1(mod\\:n),\\:gcd(a,n)=1$$\n\n对于正整数$n$，代表小于等于$n$的与$n$互质的数的个数，记作$\\varphi(n)$。\n比如$\\varphi(6)=2$，因为与$6$互质并且小于等于$6$的正整数有$1,5$。\n<!-- more -->\n# 扩展欧拉定理(降幂公式)\n$$  a^b \\equiv\n\\begin{cases}\na^{b \\%\\varphi(p)},  & \\text{gcd(a,p)$\\:$=$\\:$1}\\\\\\\\  \na^b, & \\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$< $\\varphi$(p)}\\\\\\\\\na^{b \\%\\varphi(p)+\\varphi(p)},&\\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$$\\geq$ $\\varphi$(p)}\\end{cases}\n\\pmod p$$  \n\n除此之外呢，欧拉定理有以下几个性质，\n$1.\\:$如果$n$为某一素数$p$，则有$\\varphi(p)=p-1$。因为$p$为素数，因子只有$1$和$p$，而$p$和$p$不互质，所以$ \\varphi(p)=p-1$。\n\n实际上呢，欧拉定理是费马小定理的一种推广，我们利用性质$1$就可以很容易证明。\n费马小定理：$a^{p-1}\\equiv 1(mod\\:p),gcd(a,p)=1$。因为$p$为质数，所以有$\\varphi(p)=p-1$，代入欧拉定理即可。\n推论：$a^p\\equiv a(mod\\:p)$，如果$a$能被$p$整除。\n\n$2.\\:$如果$n$为某一素数$p$的幂次，则有$\\varphi(p^a)=(p-1)\\cdot p^{a-1}$。因为比$p^a$小的正整数有$p^a-1$个，能被$p$整除的数有$p^{a-1}-1$个（将$1\\to p^a-1$之间$p$的倍数筛去），所以$\\varphi(p^a)=p^a-1-(p^{a-1}-1)=(p-1)\\cdot p^{a-1}$。\n\n$3.\\:$如果$n$为任意两个正整数$a$和$b$的乘积（$a$和$b$互质），那么有$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。我们设$x=\\phi(i)$（即和$a\\cdot b$互质的数），那么就有\n$$(S):\\begin{cases}\nx_1\\equiv t_1(mod\\:a) \\:(gcd(t_1,a)=1)\\\\\nx_2\\equiv t_2(mod\\:b) \\:(gcd(t_2,b)=1)\n\\end{cases}$$那么我们根据[中国剩余定理](https://baike.baidu.com/item/%E5%AD%99%E5%AD%90%E5%AE%9A%E7%90%86/2841597?fromtitle=%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86&fromid=11200132&fr=aladdin)可知，对于任意$t_1,t_2$，方程组$(S)$的解在区间$[1,a\\cdot b)$有唯一解与之对应。$t_1$的取值有$\\varphi(a)$个，$t_2$的取值有$\\varphi(b)$个。\n所以$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。\n\n$4.\\:$设$n=p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}......p_k^{e_k}$（$p_i$为素数），则有\n$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})......(1-\\frac{1}{p_k})$。\n根据性质$2$和性质$3$就可以很好的推出：因为$p_i$都为素数，所以每一个$p_i$都是互质的，所以同样$p_i^{e_i}$也是互质的。因此由性质$2$：$\\varphi(p_i^{e_i})=p_i^{e_i}-1-(p_i^{e_i-1}-1)=p_i^{e_i}\\cdot (1-\\frac{1}{p_i})$，和性质$3$：$\\varphi(p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}......p_k^{e_k})=\\varphi(p_1^{e_1})\\cdot \\varphi(p_2^{e_2})\\cdot \\varphi(p_3^{e_3})......\\varphi(p_k^{e_k})$，可以推出$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})......(1-\\frac{1}{p_k})$。\n\n# 欧拉函数的线性筛法\n根据如下三个性质可以完成线性筛法。\n$1.\\:\\:\\varphi(p)=p-1$\n$2.\\:\\:\\varphi(p\\cdot i)=p\\cdot \\varphi(i)\\:\\:(p\\%i=0)$\n$3.\\:\\:\\varphi(p\\cdot i)=(p-1)\\cdot \\varphi(i)\\:\\:(p\\%i\\not=0)$\n(具体证明就不证啦啦～作为模板使用就好啦^_^)\n\n```C++\nvoid initPhi(int n)\n{\n\tphi[1] = 1; //φ(1) = 1\n\tfor(int i = 2; i <= n; ++i){\n\t\tif(!vis[i]){\n\t\t\tphi[i] = i - 1; //性质1\n\t\t\tprime[++cnt] = i;\n\t\t}\n\t\tfor(int j = 1; j <= cnt; ++j){\n\t\t\tif(i * prime[j] > n) break;\n\t\t\tvis[i * prime[j]] = 1;\n\t\t\tif(i % prime[j] == 0){ //性质2\n\t\t\t\tphi[i * prime[j]] = phi[i] * prime[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tphi[i * prime[j]] = phi[i] * phi[prime[j]]; //性质3\n\t\t}\n\t}\n}\n\n```\n\n","source":"_posts/eluer.md","raw":"---\ntitle: 关于欧拉定理的一些知识\ndate: 2018-08-23 09:29:47\ntags: [数论,欧拉定理,欧拉降幂]\ncategories: [数论,欧拉定理]\n---\n\n# [欧拉定理](https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/891345?fr=aladdin)\n$$a^{\\varphi(n)}\\equiv 1(mod\\:n),\\:gcd(a,n)=1$$\n\n对于正整数$n$，代表小于等于$n$的与$n$互质的数的个数，记作$\\varphi(n)$。\n比如$\\varphi(6)=2$，因为与$6$互质并且小于等于$6$的正整数有$1,5$。\n<!-- more -->\n# 扩展欧拉定理(降幂公式)\n$$  a^b \\equiv\n\\begin{cases}\na^{b \\%\\varphi(p)},  & \\text{gcd(a,p)$\\:$=$\\:$1}\\\\\\\\  \na^b, & \\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$< $\\varphi$(p)}\\\\\\\\\na^{b \\%\\varphi(p)+\\varphi(p)},&\\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$$\\geq$ $\\varphi$(p)}\\end{cases}\n\\pmod p$$  \n\n除此之外呢，欧拉定理有以下几个性质，\n$1.\\:$如果$n$为某一素数$p$，则有$\\varphi(p)=p-1$。因为$p$为素数，因子只有$1$和$p$，而$p$和$p$不互质，所以$ \\varphi(p)=p-1$。\n\n实际上呢，欧拉定理是费马小定理的一种推广，我们利用性质$1$就可以很容易证明。\n费马小定理：$a^{p-1}\\equiv 1(mod\\:p),gcd(a,p)=1$。因为$p$为质数，所以有$\\varphi(p)=p-1$，代入欧拉定理即可。\n推论：$a^p\\equiv a(mod\\:p)$，如果$a$能被$p$整除。\n\n$2.\\:$如果$n$为某一素数$p$的幂次，则有$\\varphi(p^a)=(p-1)\\cdot p^{a-1}$。因为比$p^a$小的正整数有$p^a-1$个，能被$p$整除的数有$p^{a-1}-1$个（将$1\\to p^a-1$之间$p$的倍数筛去），所以$\\varphi(p^a)=p^a-1-(p^{a-1}-1)=(p-1)\\cdot p^{a-1}$。\n\n$3.\\:$如果$n$为任意两个正整数$a$和$b$的乘积（$a$和$b$互质），那么有$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。我们设$x=\\phi(i)$（即和$a\\cdot b$互质的数），那么就有\n$$(S):\\begin{cases}\nx_1\\equiv t_1(mod\\:a) \\:(gcd(t_1,a)=1)\\\\\nx_2\\equiv t_2(mod\\:b) \\:(gcd(t_2,b)=1)\n\\end{cases}$$那么我们根据[中国剩余定理](https://baike.baidu.com/item/%E5%AD%99%E5%AD%90%E5%AE%9A%E7%90%86/2841597?fromtitle=%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86&fromid=11200132&fr=aladdin)可知，对于任意$t_1,t_2$，方程组$(S)$的解在区间$[1,a\\cdot b)$有唯一解与之对应。$t_1$的取值有$\\varphi(a)$个，$t_2$的取值有$\\varphi(b)$个。\n所以$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。\n\n$4.\\:$设$n=p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}......p_k^{e_k}$（$p_i$为素数），则有\n$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})......(1-\\frac{1}{p_k})$。\n根据性质$2$和性质$3$就可以很好的推出：因为$p_i$都为素数，所以每一个$p_i$都是互质的，所以同样$p_i^{e_i}$也是互质的。因此由性质$2$：$\\varphi(p_i^{e_i})=p_i^{e_i}-1-(p_i^{e_i-1}-1)=p_i^{e_i}\\cdot (1-\\frac{1}{p_i})$，和性质$3$：$\\varphi(p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}......p_k^{e_k})=\\varphi(p_1^{e_1})\\cdot \\varphi(p_2^{e_2})\\cdot \\varphi(p_3^{e_3})......\\varphi(p_k^{e_k})$，可以推出$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})......(1-\\frac{1}{p_k})$。\n\n# 欧拉函数的线性筛法\n根据如下三个性质可以完成线性筛法。\n$1.\\:\\:\\varphi(p)=p-1$\n$2.\\:\\:\\varphi(p\\cdot i)=p\\cdot \\varphi(i)\\:\\:(p\\%i=0)$\n$3.\\:\\:\\varphi(p\\cdot i)=(p-1)\\cdot \\varphi(i)\\:\\:(p\\%i\\not=0)$\n(具体证明就不证啦啦～作为模板使用就好啦^_^)\n\n```C++\nvoid initPhi(int n)\n{\n\tphi[1] = 1; //φ(1) = 1\n\tfor(int i = 2; i <= n; ++i){\n\t\tif(!vis[i]){\n\t\t\tphi[i] = i - 1; //性质1\n\t\t\tprime[++cnt] = i;\n\t\t}\n\t\tfor(int j = 1; j <= cnt; ++j){\n\t\t\tif(i * prime[j] > n) break;\n\t\t\tvis[i * prime[j]] = 1;\n\t\t\tif(i % prime[j] == 0){ //性质2\n\t\t\t\tphi[i * prime[j]] = phi[i] * prime[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tphi[i * prime[j]] = phi[i] * phi[prime[j]]; //性质3\n\t\t}\n\t}\n}\n\n```\n\n","slug":"eluer","published":1,"updated":"2018-10-27T06:06:31.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbacqp001es515eaodf345","content":"<h1 id=\"欧拉定理\"><a href=\"#欧拉定理\" class=\"headerlink\" title=\"欧拉定理\"></a><a href=\"https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/891345?fr=aladdin\" target=\"_blank\" rel=\"noopener\">欧拉定理</a></h1><p>$$a^{\\varphi(n)}\\equiv 1(mod\\:n),\\:gcd(a,n)=1$$</p>\n<p>对于正整数$n$，代表小于等于$n$的与$n$互质的数的个数，记作$\\varphi(n)$。<br>比如$\\varphi(6)=2$，因为与$6$互质并且小于等于$6$的正整数有$1,5$。<br><a id=\"more\"></a></p>\n<h1 id=\"扩展欧拉定理-降幂公式\"><a href=\"#扩展欧拉定理-降幂公式\" class=\"headerlink\" title=\"扩展欧拉定理(降幂公式)\"></a>扩展欧拉定理(降幂公式)</h1><p>$$  a^b \\equiv<br>\\begin{cases}<br>a^{b \\%\\varphi(p)},  &amp; \\text{gcd(a,p)$\\:$=$\\:$1}\\\\\\ <br>a^b, &amp; \\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$&lt; $\\varphi$(p)}\\\\\\\\<br>a^{b \\%\\varphi(p)+\\varphi(p)},&amp;\\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$$\\geq$ $\\varphi$(p)}\\end{cases}<br>\\pmod p$$  </p>\n<p>除此之外呢，欧拉定理有以下几个性质，<br>$1.\\:$如果$n$为某一素数$p$，则有$\\varphi(p)=p-1$。因为$p$为素数，因子只有$1$和$p$，而$p$和$p$不互质，所以$ \\varphi(p)=p-1$。</p>\n<p>实际上呢，欧拉定理是费马小定理的一种推广，我们利用性质$1$就可以很容易证明。<br>费马小定理：$a^{p-1}\\equiv 1(mod\\:p),gcd(a,p)=1$。因为$p$为质数，所以有$\\varphi(p)=p-1$，代入欧拉定理即可。<br>推论：$a^p\\equiv a(mod\\:p)$，如果$a$能被$p$整除。</p>\n<p>$2.\\:$如果$n$为某一素数$p$的幂次，则有$\\varphi(p^a)=(p-1)\\cdot p^{a-1}$。因为比$p^a$小的正整数有$p^a-1$个，能被$p$整除的数有$p^{a-1}-1$个（将$1\\to p^a-1$之间$p$的倍数筛去），所以$\\varphi(p^a)=p^a-1-(p^{a-1}-1)=(p-1)\\cdot p^{a-1}$。</p>\n<p>$3.\\:$如果$n$为任意两个正整数$a$和$b$的乘积（$a$和$b$互质），那么有$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。我们设$x=\\phi(i)$（即和$a\\cdot b$互质的数），那么就有<br>$$(S):\\begin{cases}<br>x_1\\equiv t_1(mod\\:a) \\:(gcd(t_1,a)=1)\\\\<br>x_2\\equiv t_2(mod\\:b) \\:(gcd(t_2,b)=1)<br>\\end{cases}$$那么我们根据<a href=\"https://baike.baidu.com/item/%E5%AD%99%E5%AD%90%E5%AE%9A%E7%90%86/2841597?fromtitle=%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86&amp;fromid=11200132&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">中国剩余定理</a>可知，对于任意$t_1,t_2$，方程组$(S)$的解在区间$[1,a\\cdot b)$有唯一解与之对应。$t_1$的取值有$\\varphi(a)$个，$t_2$的取值有$\\varphi(b)$个。<br>所以$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。</p>\n<p>$4.\\:$设$n=p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}……p_k^{e_k}$（$p_i$为素数），则有<br>$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})……(1-\\frac{1}{p_k})$。<br>根据性质$2$和性质$3$就可以很好的推出：因为$p_i$都为素数，所以每一个$p_i$都是互质的，所以同样$p_i^{e_i}$也是互质的。因此由性质$2$：$\\varphi(p_i^{e_i})=p_i^{e_i}-1-(p_i^{e_i-1}-1)=p_i^{e_i}\\cdot (1-\\frac{1}{p_i})$，和性质$3$：$\\varphi(p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}……p_k^{e_k})=\\varphi(p_1^{e_1})\\cdot \\varphi(p_2^{e_2})\\cdot \\varphi(p_3^{e_3})……\\varphi(p_k^{e_k})$，可以推出$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})……(1-\\frac{1}{p_k})$。</p>\n<h1 id=\"欧拉函数的线性筛法\"><a href=\"#欧拉函数的线性筛法\" class=\"headerlink\" title=\"欧拉函数的线性筛法\"></a>欧拉函数的线性筛法</h1><p>根据如下三个性质可以完成线性筛法。<br>$1.\\:\\:\\varphi(p)=p-1$<br>$2.\\:\\:\\varphi(p\\cdot i)=p\\cdot \\varphi(i)\\:\\:(p\\%i=0)$<br>$3.\\:\\:\\varphi(p\\cdot i)=(p-1)\\cdot \\varphi(i)\\:\\:(p\\%i\\not=0)$<br>(具体证明就不证啦啦～作为模板使用就好啦^_^)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initPhi</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tphi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>; <span class=\"comment\">//φ(1) = 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">\t\t\tphi[i] = i - <span class=\"number\">1</span>; <span class=\"comment\">//性质1</span></span><br><span class=\"line\">\t\t\tprime[++cnt] = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= cnt; ++j)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i * prime[j] &gt; n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\tvis[i * prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i % prime[j] == <span class=\"number\">0</span>)&#123; <span class=\"comment\">//性质2</span></span><br><span class=\"line\">\t\t\t\tphi[i * prime[j]] = phi[i] * prime[j];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tphi[i * prime[j]] = phi[i] * phi[prime[j]]; <span class=\"comment\">//性质3</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"欧拉定理\"><a href=\"#欧拉定理\" class=\"headerlink\" title=\"欧拉定理\"></a><a href=\"https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/891345?fr=aladdin\" target=\"_blank\" rel=\"noopener\">欧拉定理</a></h1><p>$$a^{\\varphi(n)}\\equiv 1(mod\\:n),\\:gcd(a,n)=1$$</p>\n<p>对于正整数$n$，代表小于等于$n$的与$n$互质的数的个数，记作$\\varphi(n)$。<br>比如$\\varphi(6)=2$，因为与$6$互质并且小于等于$6$的正整数有$1,5$。<br>","more":"</p>\n<h1 id=\"扩展欧拉定理-降幂公式\"><a href=\"#扩展欧拉定理-降幂公式\" class=\"headerlink\" title=\"扩展欧拉定理(降幂公式)\"></a>扩展欧拉定理(降幂公式)</h1><p>$$  a^b \\equiv<br>\\begin{cases}<br>a^{b \\%\\varphi(p)},  &amp; \\text{gcd(a,p)$\\:$=$\\:$1}\\\\\\ <br>a^b, &amp; \\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$&lt; $\\varphi$(p)}\\\\\\\\<br>a^{b \\%\\varphi(p)+\\varphi(p)},&amp;\\text{gcd(a,p)$\\:$$\\not=$$\\:$1,$\\: b\\:$$\\geq$ $\\varphi$(p)}\\end{cases}<br>\\pmod p$$  </p>\n<p>除此之外呢，欧拉定理有以下几个性质，<br>$1.\\:$如果$n$为某一素数$p$，则有$\\varphi(p)=p-1$。因为$p$为素数，因子只有$1$和$p$，而$p$和$p$不互质，所以$ \\varphi(p)=p-1$。</p>\n<p>实际上呢，欧拉定理是费马小定理的一种推广，我们利用性质$1$就可以很容易证明。<br>费马小定理：$a^{p-1}\\equiv 1(mod\\:p),gcd(a,p)=1$。因为$p$为质数，所以有$\\varphi(p)=p-1$，代入欧拉定理即可。<br>推论：$a^p\\equiv a(mod\\:p)$，如果$a$能被$p$整除。</p>\n<p>$2.\\:$如果$n$为某一素数$p$的幂次，则有$\\varphi(p^a)=(p-1)\\cdot p^{a-1}$。因为比$p^a$小的正整数有$p^a-1$个，能被$p$整除的数有$p^{a-1}-1$个（将$1\\to p^a-1$之间$p$的倍数筛去），所以$\\varphi(p^a)=p^a-1-(p^{a-1}-1)=(p-1)\\cdot p^{a-1}$。</p>\n<p>$3.\\:$如果$n$为任意两个正整数$a$和$b$的乘积（$a$和$b$互质），那么有$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。我们设$x=\\phi(i)$（即和$a\\cdot b$互质的数），那么就有<br>$$(S):\\begin{cases}<br>x_1\\equiv t_1(mod\\:a) \\:(gcd(t_1,a)=1)\\\\<br>x_2\\equiv t_2(mod\\:b) \\:(gcd(t_2,b)=1)<br>\\end{cases}$$那么我们根据<a href=\"https://baike.baidu.com/item/%E5%AD%99%E5%AD%90%E5%AE%9A%E7%90%86/2841597?fromtitle=%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86&amp;fromid=11200132&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">中国剩余定理</a>可知，对于任意$t_1,t_2$，方程组$(S)$的解在区间$[1,a\\cdot b)$有唯一解与之对应。$t_1$的取值有$\\varphi(a)$个，$t_2$的取值有$\\varphi(b)$个。<br>所以$\\varphi(a\\cdot b)=\\varphi(a)\\cdot \\varphi(b)$。</p>\n<p>$4.\\:$设$n=p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}……p_k^{e_k}$（$p_i$为素数），则有<br>$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})……(1-\\frac{1}{p_k})$。<br>根据性质$2$和性质$3$就可以很好的推出：因为$p_i$都为素数，所以每一个$p_i$都是互质的，所以同样$p_i^{e_i}$也是互质的。因此由性质$2$：$\\varphi(p_i^{e_i})=p_i^{e_i}-1-(p_i^{e_i-1}-1)=p_i^{e_i}\\cdot (1-\\frac{1}{p_i})$，和性质$3$：$\\varphi(p_1^{e_1}\\cdot p_2^{e_2}\\cdot p_3^{e_3}……p_k^{e_k})=\\varphi(p_1^{e_1})\\cdot \\varphi(p_2^{e_2})\\cdot \\varphi(p_3^{e_3})……\\varphi(p_k^{e_k})$，可以推出$\\varphi(n)=n\\cdot(1-\\frac{1}{p_1})\\cdot(1-\\frac{1}{p_2})\\cdot(1-\\frac{1}{p_3})……(1-\\frac{1}{p_k})$。</p>\n<h1 id=\"欧拉函数的线性筛法\"><a href=\"#欧拉函数的线性筛法\" class=\"headerlink\" title=\"欧拉函数的线性筛法\"></a>欧拉函数的线性筛法</h1><p>根据如下三个性质可以完成线性筛法。<br>$1.\\:\\:\\varphi(p)=p-1$<br>$2.\\:\\:\\varphi(p\\cdot i)=p\\cdot \\varphi(i)\\:\\:(p\\%i=0)$<br>$3.\\:\\:\\varphi(p\\cdot i)=(p-1)\\cdot \\varphi(i)\\:\\:(p\\%i\\not=0)$<br>(具体证明就不证啦啦～作为模板使用就好啦^_^)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initPhi</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tphi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>; <span class=\"comment\">//φ(1) = 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">\t\t\tphi[i] = i - <span class=\"number\">1</span>; <span class=\"comment\">//性质1</span></span><br><span class=\"line\">\t\t\tprime[++cnt] = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= cnt; ++j)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i * prime[j] &gt; n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\tvis[i * prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i % prime[j] == <span class=\"number\">0</span>)&#123; <span class=\"comment\">//性质2</span></span><br><span class=\"line\">\t\t\t\tphi[i * prime[j]] = phi[i] * prime[j];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tphi[i * prime[j]] = phi[i] * phi[prime[j]]; <span class=\"comment\">//性质3</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Educational Codeforces Round 53 (Rated for Div. 2)D(模拟)","date":"2018-10-26T16:29:20.000Z","comments":0,"_content":"# [D. Berland Fair](https://codeforces.com/contest/1073/problem/D)\n题解：考虑到每次都会有重复过程。因此我们首先可以算出一轮下来的花费和收获，然后算出这一次会循环多少轮，再给$T$对一轮的花费取模就可以算出剩下的钱。以此反复，继续算下一次的花费和收获。\n<!--more-->\n# 代码\n\n```c\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int N = 200100;\nLL T;\nint a[N], n;\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tscanf(\"%d %lld\",&n,&T);\n\tLL Min = 1e18;\n\tfor(int i = 0; i < n; ++i){\n\t\tscanf(\"%d\",&a[i]);\n\t\tMin = min(Min,1LL*a[i]);\n\t}\n\tLL ans = 0;\n\tfor( ; Min <= T; ){\n\t\tLL cnt = 0, ret = 0;\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tif(a[i] <= T)\n\t\t\t\tT -= a[i], ret += a[i], cnt++;\n\t\t}\n\t\tans += T / ret * cnt + cnt;\n\t\tT %= ret;\n\t}\n\tprintf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```\n\n","source":"_posts/codeforces-edu-53-div2-D.md","raw":"---\ntitle: Educational Codeforces Round 53 (Rated for Div. 2)D(模拟)\ndate: 2018-10-27 00:29:20\ntags: [模拟]\ncomments: false\ncategories:\n- [Codeforces]\n- [模拟]\n---\n# [D. Berland Fair](https://codeforces.com/contest/1073/problem/D)\n题解：考虑到每次都会有重复过程。因此我们首先可以算出一轮下来的花费和收获，然后算出这一次会循环多少轮，再给$T$对一轮的花费取模就可以算出剩下的钱。以此反复，继续算下一次的花费和收获。\n<!--more-->\n# 代码\n\n```c\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int N = 200100;\nLL T;\nint a[N], n;\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tscanf(\"%d %lld\",&n,&T);\n\tLL Min = 1e18;\n\tfor(int i = 0; i < n; ++i){\n\t\tscanf(\"%d\",&a[i]);\n\t\tMin = min(Min,1LL*a[i]);\n\t}\n\tLL ans = 0;\n\tfor( ; Min <= T; ){\n\t\tLL cnt = 0, ret = 0;\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tif(a[i] <= T)\n\t\t\t\tT -= a[i], ret += a[i], cnt++;\n\t\t}\n\t\tans += T / ret * cnt + cnt;\n\t\tT %= ret;\n\t}\n\tprintf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```\n\n","slug":"codeforces-edu-53-div2-D","published":1,"updated":"2018-10-27T06:06:31.931Z","layout":"post","photos":[],"link":"","_id":"cjpvbacqr001fs51540g5m9op","content":"<h1 id=\"D-Berland-Fair\"><a href=\"#D-Berland-Fair\" class=\"headerlink\" title=\"D. Berland Fair\"></a><a href=\"https://codeforces.com/contest/1073/problem/D\" target=\"_blank\" rel=\"noopener\">D. Berland Fair</a></h1><p>题解：考虑到每次都会有重复过程。因此我们首先可以算出一轮下来的花费和收获，然后算出这一次会循环多少轮，再给$T$对一轮的花费取模就可以算出剩下的钱。以此反复，继续算下一次的花费和收获。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200100</span>;</span><br><span class=\"line\">LL T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %lld\"</span>,&amp;n,&amp;T);</span><br><span class=\"line\">\tLL Min = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t\tMin = min(Min,<span class=\"number\">1L</span>L*a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tLL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( ; Min &lt;= T; )&#123;</span><br><span class=\"line\">\t\tLL cnt = <span class=\"number\">0</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i] &lt;= T)</span><br><span class=\"line\">\t\t\t\tT -= a[i], ret += a[i], cnt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans += T / ret * cnt + cnt;</span><br><span class=\"line\">\t\tT %= ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"D-Berland-Fair\"><a href=\"#D-Berland-Fair\" class=\"headerlink\" title=\"D. Berland Fair\"></a><a href=\"https://codeforces.com/contest/1073/problem/D\" target=\"_blank\" rel=\"noopener\">D. Berland Fair</a></h1><p>题解：考虑到每次都会有重复过程。因此我们首先可以算出一轮下来的花费和收获，然后算出这一次会循环多少轮，再给$T$对一轮的花费取模就可以算出剩下的钱。以此反复，继续算下一次的花费和收获。<br>","more":"</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200100</span>;</span><br><span class=\"line\">LL T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %lld\"</span>,&amp;n,&amp;T);</span><br><span class=\"line\">\tLL Min = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t\tMin = min(Min,<span class=\"number\">1L</span>L*a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tLL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( ; Min &lt;= T; )&#123;</span><br><span class=\"line\">\t\tLL cnt = <span class=\"number\">0</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i] &lt;= T)</span><br><span class=\"line\">\t\t\t\tT -= a[i], ret += a[i], cnt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans += T / ret * cnt + cnt;</span><br><span class=\"line\">\t\tT %= ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2018CCPC网络预选赛1007(hdu6444) 单调队列","date":"2018-08-29T13:57:03.000Z","mathjax":true,"_content":"# [Neko's loop](http://acm.hdu.edu.cn/showproblem.php?pid=6444)\n# 问题分析\n题意：给一个元素个数为$n$的环，选定任意一个起点$i$后，每次可以往前跳$(i+k)\\%n$，然后会相应得到$a_i$的收益，问跳$m$次后总收益可以达到$s$(可以提前停止)，在开始之前至少需要身上需要有多少收益。\n\n显然这样选定一个起点后不断往前跳，所获得的$a_i$会形成一个环。\n\n那么我们就可以把所有环找出来，通过枚举环的起点来找每个环可以获得的最大收益。问题就转化成求每个环的长度为$m$的最大子段和了。\n<!--more-->\n我们用$cnt = \\frac{len}{m}(len表示循环节长度)$代表需要跑几次循环节，用$ret = len \\% m$代表剩余步数。\n但是我们要注意两点。\n首先，如果循环节的总收益为负，那么我们直接求一个不超过$m$的最大子段和就可以了。因为跑再更多次只会收益变得更小。\n其次，如果$len>m$，我想很多人可能就会直接$cnt * 循环节总收益 +剩余(len\\% m)所能获得最大总收益$，这就是本题的坑点了。因为题目告诉了我们可以提前停止，如果最后一圈有负数，我们可以跑完正数的那一部分，剩下的负数不跑了。\n就比如序列为$-2,-5,-7,20$，那么我们可以跑完$cnt-1$圈，再跑个$20$就够了。所以我们真正能确定的是前$cnt-1$前所能获得的最大收益，剩下的我们拿出来单独跑。\n\n但是呢，还是要注意，我们跑剩余的时候，长度为$len+(len\\%m)$，然后最后一步能跑到的范围为$(len-1,3*len)$，因此我们需要开三倍的数组。\n# 代码\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long LL;\nconst int N = 1e5+10;\nconst LL inf = 1e18;\nLL n,m,k,s,a[N],sum[N];\nbool vis[N];\nvector<LL> v[N];\n\nLL solve(int d,int n,LL m) {\n    LL ans = 0;\n    memset(sum, 0, sizeof sum);\n    for (int i = 1; i <= n; ++i)\n        sum[i] = sum[i - 1] + v[d][i - 1];\n    for (int i = n + 1; i <= 2 * n; ++i)\n        sum[i] = sum[i - 1] + v[d][i - n - 1];\n    for (int i = 2 * n + 1; i <= 3 * n; ++i)\n        sum[i] = sum[i - 1] + v[d][i - 2 * n - 1];\n\n    deque<int> dq;\n\n    for (int i = 1; i <= 3 * n; ++i) {\n        while (!dq.empty() && sum[dq.back()] > sum[i - 1])\n            dq.pop_back();\n        while (!dq.empty() && dq.front() + m < i) //控制子段和长度为m\n            dq.pop_front();\n        dq.emplace_back(i - 1);\n        ans = max(ans, sum[i] - sum[dq.front()]);\n    }\n    return ans;\n}\n\nint main() {\n\n    int T;\n    scanf(\"%d\", &T);\n    for (int t = 0; t < T; ++t) {\n        memset(vis, 0, sizeof vis);\n        LL ans = -inf;\n        int tot = 0;\n        for (int i = 0; i < N; ++i)\n            v[i].clear();\n        scanf(\"%lld%lld%lld%lld\", &n, &s, &m, &k);\n        for (int i = 0; i < n; i++) scanf(\"%lld\", &a[i]);\n        //处理循环节\n        for (int i = 0; i < n; i++) {\n            if (!vis[i]) {\n                for (int j = i; !vis[j]; j = (j + k) % n) {\n                    vis[j] = 1;\n                    v[tot].push_back(a[j]);\n                }\n                tot++;\n            }\n        }\n        for (int i = 0; i < tot; ++i) {\n            LL res = 0, tmp = 0;\n            int len = v[i].size();\n            for (int j = 0; j < len; ++j)\n                tmp += v[i][j];\n            res = solve(i, len, m);\n            ans = max(ans, res);\n            //总收益小于0的话就跑一段长度不超过m的最大子段和就可以了\n            if (tmp < 0)\n                continue;\n            LL ret = m % len;\n            LL cnt = m / len;\n            tmp = max(cnt - 1, 0LL) * tmp; // cnt-1圈\n            if (cnt >= 1) ret += len;\n            res = max(res, solve(i, len, ret) + tmp); //剩下的特判(单独算)\n            ans = max(ans, res);\n        }\n        ans = max(s - ans, 0LL);\n        printf(\"Case #%d: %lld\\n\", t + 1, ans);\n    }\n    return 0;\n}\n```\n","source":"_posts/hdu6444.md","raw":"---\ntitle: 2018CCPC网络预选赛1007(hdu6444) 单调队列\ndate: 2018-08-29 21:57:03\ntags: [CCPC,HDU,单调队列]\nmathjax: true\ncategories: \n - [CCPC]\n - [HDU]\n - [单调队列]\n---\n# [Neko's loop](http://acm.hdu.edu.cn/showproblem.php?pid=6444)\n# 问题分析\n题意：给一个元素个数为$n$的环，选定任意一个起点$i$后，每次可以往前跳$(i+k)\\%n$，然后会相应得到$a_i$的收益，问跳$m$次后总收益可以达到$s$(可以提前停止)，在开始之前至少需要身上需要有多少收益。\n\n显然这样选定一个起点后不断往前跳，所获得的$a_i$会形成一个环。\n\n那么我们就可以把所有环找出来，通过枚举环的起点来找每个环可以获得的最大收益。问题就转化成求每个环的长度为$m$的最大子段和了。\n<!--more-->\n我们用$cnt = \\frac{len}{m}(len表示循环节长度)$代表需要跑几次循环节，用$ret = len \\% m$代表剩余步数。\n但是我们要注意两点。\n首先，如果循环节的总收益为负，那么我们直接求一个不超过$m$的最大子段和就可以了。因为跑再更多次只会收益变得更小。\n其次，如果$len>m$，我想很多人可能就会直接$cnt * 循环节总收益 +剩余(len\\% m)所能获得最大总收益$，这就是本题的坑点了。因为题目告诉了我们可以提前停止，如果最后一圈有负数，我们可以跑完正数的那一部分，剩下的负数不跑了。\n就比如序列为$-2,-5,-7,20$，那么我们可以跑完$cnt-1$圈，再跑个$20$就够了。所以我们真正能确定的是前$cnt-1$前所能获得的最大收益，剩下的我们拿出来单独跑。\n\n但是呢，还是要注意，我们跑剩余的时候，长度为$len+(len\\%m)$，然后最后一步能跑到的范围为$(len-1,3*len)$，因此我们需要开三倍的数组。\n# 代码\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long LL;\nconst int N = 1e5+10;\nconst LL inf = 1e18;\nLL n,m,k,s,a[N],sum[N];\nbool vis[N];\nvector<LL> v[N];\n\nLL solve(int d,int n,LL m) {\n    LL ans = 0;\n    memset(sum, 0, sizeof sum);\n    for (int i = 1; i <= n; ++i)\n        sum[i] = sum[i - 1] + v[d][i - 1];\n    for (int i = n + 1; i <= 2 * n; ++i)\n        sum[i] = sum[i - 1] + v[d][i - n - 1];\n    for (int i = 2 * n + 1; i <= 3 * n; ++i)\n        sum[i] = sum[i - 1] + v[d][i - 2 * n - 1];\n\n    deque<int> dq;\n\n    for (int i = 1; i <= 3 * n; ++i) {\n        while (!dq.empty() && sum[dq.back()] > sum[i - 1])\n            dq.pop_back();\n        while (!dq.empty() && dq.front() + m < i) //控制子段和长度为m\n            dq.pop_front();\n        dq.emplace_back(i - 1);\n        ans = max(ans, sum[i] - sum[dq.front()]);\n    }\n    return ans;\n}\n\nint main() {\n\n    int T;\n    scanf(\"%d\", &T);\n    for (int t = 0; t < T; ++t) {\n        memset(vis, 0, sizeof vis);\n        LL ans = -inf;\n        int tot = 0;\n        for (int i = 0; i < N; ++i)\n            v[i].clear();\n        scanf(\"%lld%lld%lld%lld\", &n, &s, &m, &k);\n        for (int i = 0; i < n; i++) scanf(\"%lld\", &a[i]);\n        //处理循环节\n        for (int i = 0; i < n; i++) {\n            if (!vis[i]) {\n                for (int j = i; !vis[j]; j = (j + k) % n) {\n                    vis[j] = 1;\n                    v[tot].push_back(a[j]);\n                }\n                tot++;\n            }\n        }\n        for (int i = 0; i < tot; ++i) {\n            LL res = 0, tmp = 0;\n            int len = v[i].size();\n            for (int j = 0; j < len; ++j)\n                tmp += v[i][j];\n            res = solve(i, len, m);\n            ans = max(ans, res);\n            //总收益小于0的话就跑一段长度不超过m的最大子段和就可以了\n            if (tmp < 0)\n                continue;\n            LL ret = m % len;\n            LL cnt = m / len;\n            tmp = max(cnt - 1, 0LL) * tmp; // cnt-1圈\n            if (cnt >= 1) ret += len;\n            res = max(res, solve(i, len, ret) + tmp); //剩下的特判(单独算)\n            ans = max(ans, res);\n        }\n        ans = max(s - ans, 0LL);\n        printf(\"Case #%d: %lld\\n\", t + 1, ans);\n    }\n    return 0;\n}\n```\n","slug":"hdu6444","published":1,"updated":"2018-10-27T06:06:31.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpvbacqu001is515zjlmsoig","content":"<h1 id=\"Neko’s-loop\"><a href=\"#Neko’s-loop\" class=\"headerlink\" title=\"Neko’s loop\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6444\" target=\"_blank\" rel=\"noopener\">Neko’s loop</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：给一个元素个数为$n$的环，选定任意一个起点$i$后，每次可以往前跳$(i+k)\\%n$，然后会相应得到$a_i$的收益，问跳$m$次后总收益可以达到$s$(可以提前停止)，在开始之前至少需要身上需要有多少收益。</p>\n<p>显然这样选定一个起点后不断往前跳，所获得的$a_i$会形成一个环。</p>\n<p>那么我们就可以把所有环找出来，通过枚举环的起点来找每个环可以获得的最大收益。问题就转化成求每个环的长度为$m$的最大子段和了。<br><a id=\"more\"></a><br>我们用$cnt = \\frac{len}{m}(len表示循环节长度)$代表需要跑几次循环节，用$ret = len \\% m$代表剩余步数。<br>但是我们要注意两点。<br>首先，如果循环节的总收益为负，那么我们直接求一个不超过$m$的最大子段和就可以了。因为跑再更多次只会收益变得更小。<br>其次，如果$len&gt;m$，我想很多人可能就会直接$cnt * 循环节总收益 +剩余(len\\% m)所能获得最大总收益$，这就是本题的坑点了。因为题目告诉了我们可以提前停止，如果最后一圈有负数，我们可以跑完正数的那一部分，剩下的负数不跑了。<br>就比如序列为$-2,-5,-7,20$，那么我们可以跑完$cnt-1$圈，再跑个$20$就够了。所以我们真正能确定的是前$cnt-1$前所能获得的最大收益，剩下的我们拿出来单独跑。</p>\n<p>但是呢，还是要注意，我们跑剩余的时候，长度为$len+(len\\%m)$，然后最后一步能跑到的范围为$(len-1,3*len)$，因此我们需要开三倍的数组。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL inf = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">LL n,m,k,s,a[N],sum[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;LL&gt; v[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> d,<span class=\"keyword\">int</span> n,LL m)</span> </span>&#123;</span><br><span class=\"line\">    LL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(sum, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> sum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + v[d][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; ++i)</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + v[d][i - n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> * n; ++i)</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + v[d][i - <span class=\"number\">2</span> * n - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; dq;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> * n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!dq.empty() &amp;&amp; sum[dq.back()] &gt; sum[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            dq.pop_back();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!dq.empty() &amp;&amp; dq.front() + m &lt; i) <span class=\"comment\">//控制子段和长度为m</span></span><br><span class=\"line\">            dq.pop_front();</span><br><span class=\"line\">        dq.emplace_back(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        ans = max(ans, sum[i] - sum[dq.front()]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; T; ++t) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\">        LL ans = -inf;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">            v[i].clear();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld%lld\"</span>, &amp;n, &amp;s, &amp;m, &amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;a[i]);</span><br><span class=\"line\">        <span class=\"comment\">//处理循环节</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; !vis[j]; j = (j + k) % n) &#123;</span><br><span class=\"line\">                    vis[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    v[tot].push_back(a[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tot++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; ++i) &#123;</span><br><span class=\"line\">            LL res = <span class=\"number\">0</span>, tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = v[i].size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; ++j)</span><br><span class=\"line\">                tmp += v[i][j];</span><br><span class=\"line\">            res = solve(i, len, m);</span><br><span class=\"line\">            ans = max(ans, res);</span><br><span class=\"line\">            <span class=\"comment\">//总收益小于0的话就跑一段长度不超过m的最大子段和就可以了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            LL ret = m % len;</span><br><span class=\"line\">            LL cnt = m / len;</span><br><span class=\"line\">            tmp = max(cnt - <span class=\"number\">1</span>, <span class=\"number\">0L</span>L) * tmp; <span class=\"comment\">// cnt-1圈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt &gt;= <span class=\"number\">1</span>) ret += len;</span><br><span class=\"line\">            res = max(res, solve(i, len, ret) + tmp); <span class=\"comment\">//剩下的特判(单独算)</span></span><br><span class=\"line\">            ans = max(ans, res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = max(s - ans, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %lld\\n\"</span>, t + <span class=\"number\">1</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Neko’s-loop\"><a href=\"#Neko’s-loop\" class=\"headerlink\" title=\"Neko’s loop\"></a><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=6444\" target=\"_blank\" rel=\"noopener\">Neko’s loop</a></h1><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>题意：给一个元素个数为$n$的环，选定任意一个起点$i$后，每次可以往前跳$(i+k)\\%n$，然后会相应得到$a_i$的收益，问跳$m$次后总收益可以达到$s$(可以提前停止)，在开始之前至少需要身上需要有多少收益。</p>\n<p>显然这样选定一个起点后不断往前跳，所获得的$a_i$会形成一个环。</p>\n<p>那么我们就可以把所有环找出来，通过枚举环的起点来找每个环可以获得的最大收益。问题就转化成求每个环的长度为$m$的最大子段和了。<br>","more":"<br>我们用$cnt = \\frac{len}{m}(len表示循环节长度)$代表需要跑几次循环节，用$ret = len \\% m$代表剩余步数。<br>但是我们要注意两点。<br>首先，如果循环节的总收益为负，那么我们直接求一个不超过$m$的最大子段和就可以了。因为跑再更多次只会收益变得更小。<br>其次，如果$len&gt;m$，我想很多人可能就会直接$cnt * 循环节总收益 +剩余(len\\% m)所能获得最大总收益$，这就是本题的坑点了。因为题目告诉了我们可以提前停止，如果最后一圈有负数，我们可以跑完正数的那一部分，剩下的负数不跑了。<br>就比如序列为$-2,-5,-7,20$，那么我们可以跑完$cnt-1$圈，再跑个$20$就够了。所以我们真正能确定的是前$cnt-1$前所能获得的最大收益，剩下的我们拿出来单独跑。</p>\n<p>但是呢，还是要注意，我们跑剩余的时候，长度为$len+(len\\%m)$，然后最后一步能跑到的范围为$(len-1,3*len)$，因此我们需要开三倍的数组。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL inf = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">LL n,m,k,s,a[N],sum[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;LL&gt; v[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> d,<span class=\"keyword\">int</span> n,LL m)</span> </span>&#123;</span><br><span class=\"line\">    LL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(sum, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> sum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + v[d][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; ++i)</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + v[d][i - n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> * n; ++i)</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + v[d][i - <span class=\"number\">2</span> * n - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; dq;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> * n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!dq.empty() &amp;&amp; sum[dq.back()] &gt; sum[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            dq.pop_back();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!dq.empty() &amp;&amp; dq.front() + m &lt; i) <span class=\"comment\">//控制子段和长度为m</span></span><br><span class=\"line\">            dq.pop_front();</span><br><span class=\"line\">        dq.emplace_back(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        ans = max(ans, sum[i] - sum[dq.front()]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; T; ++t) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\">        LL ans = -inf;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">            v[i].clear();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld%lld\"</span>, &amp;n, &amp;s, &amp;m, &amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;a[i]);</span><br><span class=\"line\">        <span class=\"comment\">//处理循环节</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; !vis[j]; j = (j + k) % n) &#123;</span><br><span class=\"line\">                    vis[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    v[tot].push_back(a[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tot++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; ++i) &#123;</span><br><span class=\"line\">            LL res = <span class=\"number\">0</span>, tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = v[i].size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; ++j)</span><br><span class=\"line\">                tmp += v[i][j];</span><br><span class=\"line\">            res = solve(i, len, m);</span><br><span class=\"line\">            ans = max(ans, res);</span><br><span class=\"line\">            <span class=\"comment\">//总收益小于0的话就跑一段长度不超过m的最大子段和就可以了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            LL ret = m % len;</span><br><span class=\"line\">            LL cnt = m / len;</span><br><span class=\"line\">            tmp = max(cnt - <span class=\"number\">1</span>, <span class=\"number\">0L</span>L) * tmp; <span class=\"comment\">// cnt-1圈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt &gt;= <span class=\"number\">1</span>) ret += len;</span><br><span class=\"line\">            res = max(res, solve(i, len, ret) + tmp); <span class=\"comment\">//剩下的特判(单独算)</span></span><br><span class=\"line\">            ans = max(ans, res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = max(s - ans, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %lld\\n\"</span>, t + <span class=\"number\">1</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"新的个人博客开张啦～","date":"2018-08-23T06:33:33.000Z","top":true,"_content":"<blockquote class=\"blockquote-center\">\n**日拱一卒无有尽，功不唐捐终入海**</blockquote>\n<!-- more -->\n\n  \n","source":"_posts/newBlog.md","raw":"---\ntitle: 新的个人博客开张啦～\ndate: 2018-08-23 14:33:33\ntags: 杂集\ncategories: 杂集\ntop: true\n---\n<blockquote class=\"blockquote-center\">\n**日拱一卒无有尽，功不唐捐终入海**</blockquote>\n<!-- more -->\n\n  \n","slug":"newBlog","published":1,"updated":"2018-12-19T15:20:31.993Z","_id":"cjpvbacqw001js515zespdrec","comments":1,"layout":"post","photos":[],"link":"","content":"<p><blockquote class=\"blockquote-center\"><br><strong>日拱一卒无有尽，功不唐捐终入海</strong></blockquote><br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p><blockquote class=\"blockquote-center\"><br><strong>日拱一卒无有尽，功不唐捐终入海</strong></blockquote><br>","more":"</p>"},{"title":"一年了，想要写点什么","comments":1,"date":"2018-12-19T15:05:51.000Z","_content":"## 应该写点什么\n\n一年了，打了两场区域赛，一场CCPC，一场EC-Final，全部以打铁来告别这一年。\n\n**我，真的很渴望也能像他们一样，站在那个讲台上，手里拿着奖牌。讲真的，这是每一名ACMer无不渴望的。**\n<!--more-->\n大一一年，我估测着，几百题至少是有的。虽然好像大部分都比较水，然后不水的题，现场时也并没有机会去做。\n\n大一并没有怎么去打codefoces，感觉是很大的损失，开始决定认真打codeforces是从今年10月初旬开始的。\n\n最难受的不是不会做，而是能做，并且按理来说是应该可以A掉的，但是最后因为各种原因都没有A掉。\n\n作为蒻校，居然连队友都找不齐三个真是可悲，渴望能有两个队友和我一起训练，然而暑期花200块买了牛客多校找的同级的两个队友统统把我鸽掉，一场也没有和我打过。后来找了一名16级的学长，这个学长之前还搞过noip，总的来说是一名很不错的队友。\n\n仔细回想一下，为什么今年下半年的比赛都打铁了呢？\n\n## CCPC-秦皇岛\n\n首先回想一下CCPC秦皇岛，多了一些不应该有的罚时，导致铜没有拿到。为什么说不应该有的罚时呢？因为coding手将solution打成了soultion，还有一个下标判断多加了一。还有一些原因是最后没有A掉的那题比较坑，想想dls和jls都wa了7发。但是最后裁判回复了某人k = 1就很过分了！因为它这个回复并不是公告，一开始回复no response，最后快要结束时却回复了某人k = 1，所以最后看到k = 1的选手应该可能都A掉了那道题。在秦皇岛，第一次看到了海，感觉海好美啊。\n\n\n## ICPC-徐州\n再到生涯第一次ICPC区域赛-徐州。这场可真是无语到爆呀，照qls的说法，爆零的一百队是多push_back的一百队，qls这样说我也没有什么可反驳的。因为我有自知之明，我，就是菜，虽然榜带歪了，签到题看不出来真正的题意，medium+的题我也做不出来，就只能爆零了呗。因为都是跟着榜来做的，虽然有一定队友不给力还不看其它题的原因，但是问题也是在自己身上----菜。如果当时我可以坚持将没有重边的情况试一下样例就好了，说不定快了还能有银，因为一题铜到银。最后队友认为没有重边的话这道题就太简单然后都没有看出来此题的重边概率就一直在死推题面和实现题面的算法，最后不会实现gg。\n\n## ICPC-青岛\nICPC区域赛-青岛。三道签到，罚时少点会有铜，但是自己还是不给力，因为此场我作为coding手，卡在了实现签到题的一个函数，反正就是差不多脑袋快空白了，最后队友把我换下去写了半个小时才A掉的。然后第三道签到，这个也不能怪队友想的不周全，因为自己也没能推翻队友的算法，还有一些细节没有想到导致wa了6发，罚时高了。做完三道签到时时间还剩下一个半小时，开始开E，由于队友对于E的贪心和数数错误导致队友认为E题不可做，所以队友去开F。最后剩下半个小时的时候队友和我说他推出来了，然后问我能不能搞出E搞不出就来写F。虽然我觉得快搞出来E了但是相较之下明显还是选择写F较好，但是因为队友推出来的并不太好写，然后加上一些交流上的问题，最后F也没有写完(实际上如果能推出来真正的结论代码是非常简单和少的)。三题收场，罚时过多，打铁。\n\n## EC-Final-西安\n这次感觉自己就是个旅游团？（石锤了）被学长带着到处出去玩，真是领略了西安的古都风情...而且学长租了个车！花了好多钱。这次EC-Final让我看到了拿奖的希望，因为三题有铜，四题差不多有银，五题金。D，F，L都是签到题，但是最后只A掉了一道无比简单的D，L被坑的很惨，或许不该问队友一些问题，按照自己的想法或许就能A掉了。最无语的是两个队友居然一致对在$1e5$范围的数据$O(n^2)$的算法抱有侥幸？！然后F是个计算几何(表示最讨厌的就是计算几何)，直接和队友说了一下题意给队友讲了一下样例1就交给了队友。事实证明明显队友是不靠谱的。发现自己就是菜啊，还在这里吐槽队友......为什么不想想自己的问题所在呢？\n\n大一一年的训练程度，明显不饱和吧。寒假时打了一假期的牛客算法训练营(想想当时似乎什么算法也不会，连树状数组也不知道，要不是当时那道题数据蒻，没想到我二维前缀和都能过...）。而暑假时就是参加了pku的暑校，然后打了几场牛客多校，场场爆零，最后一场要不是作为下半年区域赛的队友(也是那个16级的学长)和我打了，不然又可能要爆零了。然后打完多校后，补了一小部分的题，反正不太多，然后假期的时候花了几天搭了一个自己的个人博客。打了几场网络预选赛，接着就是开学了。\n## 结语\n一年来，写的题解也不算少了，虽然承认训练程度不太好，而且也没有啥人督促和引导，但是下半年都打铁了，真的好伤心啊QAQ，自闭~~~~(>_<)~~~~。\n\n等到明年，我唯一承认的队友似乎因为没有拿到EC名额被气的准备退役了，(感觉如果这次EC如果队友和我一起来的话是有可能拿个铜的)。然后假期找个人和我一起训练打camp都难找。\n\n一切看起来似乎都到了下坡，(可能因为找不到一起训练的队友发愁）但是我还不能放弃，我喜欢ACM，我喜欢算法竞赛，虽然我很菜，但是ACM让我在大学生活找到了目标，让我拥有了努力和奋斗的动力。就算是一个人，我也会坚持刷题训练下去！此生无悔入ACM！愿我成为一名真正的ACMER！（好像明年就要变成JBer了？？233333333\n","source":"_posts/talk-with-me.md","raw":"---\ntitle: 一年了，想要写点什么\ncomments: true\ndate: 2018-12-19 23:05:51\ntags: [杂集,ACM]\ncategories:\n- [杂集]\n---\n## 应该写点什么\n\n一年了，打了两场区域赛，一场CCPC，一场EC-Final，全部以打铁来告别这一年。\n\n**我，真的很渴望也能像他们一样，站在那个讲台上，手里拿着奖牌。讲真的，这是每一名ACMer无不渴望的。**\n<!--more-->\n大一一年，我估测着，几百题至少是有的。虽然好像大部分都比较水，然后不水的题，现场时也并没有机会去做。\n\n大一并没有怎么去打codefoces，感觉是很大的损失，开始决定认真打codeforces是从今年10月初旬开始的。\n\n最难受的不是不会做，而是能做，并且按理来说是应该可以A掉的，但是最后因为各种原因都没有A掉。\n\n作为蒻校，居然连队友都找不齐三个真是可悲，渴望能有两个队友和我一起训练，然而暑期花200块买了牛客多校找的同级的两个队友统统把我鸽掉，一场也没有和我打过。后来找了一名16级的学长，这个学长之前还搞过noip，总的来说是一名很不错的队友。\n\n仔细回想一下，为什么今年下半年的比赛都打铁了呢？\n\n## CCPC-秦皇岛\n\n首先回想一下CCPC秦皇岛，多了一些不应该有的罚时，导致铜没有拿到。为什么说不应该有的罚时呢？因为coding手将solution打成了soultion，还有一个下标判断多加了一。还有一些原因是最后没有A掉的那题比较坑，想想dls和jls都wa了7发。但是最后裁判回复了某人k = 1就很过分了！因为它这个回复并不是公告，一开始回复no response，最后快要结束时却回复了某人k = 1，所以最后看到k = 1的选手应该可能都A掉了那道题。在秦皇岛，第一次看到了海，感觉海好美啊。\n\n\n## ICPC-徐州\n再到生涯第一次ICPC区域赛-徐州。这场可真是无语到爆呀，照qls的说法，爆零的一百队是多push_back的一百队，qls这样说我也没有什么可反驳的。因为我有自知之明，我，就是菜，虽然榜带歪了，签到题看不出来真正的题意，medium+的题我也做不出来，就只能爆零了呗。因为都是跟着榜来做的，虽然有一定队友不给力还不看其它题的原因，但是问题也是在自己身上----菜。如果当时我可以坚持将没有重边的情况试一下样例就好了，说不定快了还能有银，因为一题铜到银。最后队友认为没有重边的话这道题就太简单然后都没有看出来此题的重边概率就一直在死推题面和实现题面的算法，最后不会实现gg。\n\n## ICPC-青岛\nICPC区域赛-青岛。三道签到，罚时少点会有铜，但是自己还是不给力，因为此场我作为coding手，卡在了实现签到题的一个函数，反正就是差不多脑袋快空白了，最后队友把我换下去写了半个小时才A掉的。然后第三道签到，这个也不能怪队友想的不周全，因为自己也没能推翻队友的算法，还有一些细节没有想到导致wa了6发，罚时高了。做完三道签到时时间还剩下一个半小时，开始开E，由于队友对于E的贪心和数数错误导致队友认为E题不可做，所以队友去开F。最后剩下半个小时的时候队友和我说他推出来了，然后问我能不能搞出E搞不出就来写F。虽然我觉得快搞出来E了但是相较之下明显还是选择写F较好，但是因为队友推出来的并不太好写，然后加上一些交流上的问题，最后F也没有写完(实际上如果能推出来真正的结论代码是非常简单和少的)。三题收场，罚时过多，打铁。\n\n## EC-Final-西安\n这次感觉自己就是个旅游团？（石锤了）被学长带着到处出去玩，真是领略了西安的古都风情...而且学长租了个车！花了好多钱。这次EC-Final让我看到了拿奖的希望，因为三题有铜，四题差不多有银，五题金。D，F，L都是签到题，但是最后只A掉了一道无比简单的D，L被坑的很惨，或许不该问队友一些问题，按照自己的想法或许就能A掉了。最无语的是两个队友居然一致对在$1e5$范围的数据$O(n^2)$的算法抱有侥幸？！然后F是个计算几何(表示最讨厌的就是计算几何)，直接和队友说了一下题意给队友讲了一下样例1就交给了队友。事实证明明显队友是不靠谱的。发现自己就是菜啊，还在这里吐槽队友......为什么不想想自己的问题所在呢？\n\n大一一年的训练程度，明显不饱和吧。寒假时打了一假期的牛客算法训练营(想想当时似乎什么算法也不会，连树状数组也不知道，要不是当时那道题数据蒻，没想到我二维前缀和都能过...）。而暑假时就是参加了pku的暑校，然后打了几场牛客多校，场场爆零，最后一场要不是作为下半年区域赛的队友(也是那个16级的学长)和我打了，不然又可能要爆零了。然后打完多校后，补了一小部分的题，反正不太多，然后假期的时候花了几天搭了一个自己的个人博客。打了几场网络预选赛，接着就是开学了。\n## 结语\n一年来，写的题解也不算少了，虽然承认训练程度不太好，而且也没有啥人督促和引导，但是下半年都打铁了，真的好伤心啊QAQ，自闭~~~~(>_<)~~~~。\n\n等到明年，我唯一承认的队友似乎因为没有拿到EC名额被气的准备退役了，(感觉如果这次EC如果队友和我一起来的话是有可能拿个铜的)。然后假期找个人和我一起训练打camp都难找。\n\n一切看起来似乎都到了下坡，(可能因为找不到一起训练的队友发愁）但是我还不能放弃，我喜欢ACM，我喜欢算法竞赛，虽然我很菜，但是ACM让我在大学生活找到了目标，让我拥有了努力和奋斗的动力。就算是一个人，我也会坚持刷题训练下去！此生无悔入ACM！愿我成为一名真正的ACMER！（好像明年就要变成JBer了？？233333333\n","slug":"talk-with-me","published":1,"updated":"2018-12-19T15:09:27.127Z","_id":"cjpvbacqy001ns515f8h99ste","layout":"post","photos":[],"link":"","content":"<h2 id=\"应该写点什么\"><a href=\"#应该写点什么\" class=\"headerlink\" title=\"应该写点什么\"></a>应该写点什么</h2><p>一年了，打了两场区域赛，一场CCPC，一场EC-Final，全部以打铁来告别这一年。</p>\n<p><strong>我，真的很渴望也能像他们一样，站在那个讲台上，手里拿着奖牌。讲真的，这是每一名ACMer无不渴望的。</strong><br><a id=\"more\"></a><br>大一一年，我估测着，几百题至少是有的。虽然好像大部分都比较水，然后不水的题，现场时也并没有机会去做。</p>\n<p>大一并没有怎么去打codefoces，感觉是很大的损失，开始决定认真打codeforces是从今年10月初旬开始的。</p>\n<p>最难受的不是不会做，而是能做，并且按理来说是应该可以A掉的，但是最后因为各种原因都没有A掉。</p>\n<p>作为蒻校，居然连队友都找不齐三个真是可悲，渴望能有两个队友和我一起训练，然而暑期花200块买了牛客多校找的同级的两个队友统统把我鸽掉，一场也没有和我打过。后来找了一名16级的学长，这个学长之前还搞过noip，总的来说是一名很不错的队友。</p>\n<p>仔细回想一下，为什么今年下半年的比赛都打铁了呢？</p>\n<h2 id=\"CCPC-秦皇岛\"><a href=\"#CCPC-秦皇岛\" class=\"headerlink\" title=\"CCPC-秦皇岛\"></a>CCPC-秦皇岛</h2><p>首先回想一下CCPC秦皇岛，多了一些不应该有的罚时，导致铜没有拿到。为什么说不应该有的罚时呢？因为coding手将solution打成了soultion，还有一个下标判断多加了一。还有一些原因是最后没有A掉的那题比较坑，想想dls和jls都wa了7发。但是最后裁判回复了某人k = 1就很过分了！因为它这个回复并不是公告，一开始回复no response，最后快要结束时却回复了某人k = 1，所以最后看到k = 1的选手应该可能都A掉了那道题。在秦皇岛，第一次看到了海，感觉海好美啊。</p>\n<h2 id=\"ICPC-徐州\"><a href=\"#ICPC-徐州\" class=\"headerlink\" title=\"ICPC-徐州\"></a>ICPC-徐州</h2><p>再到生涯第一次ICPC区域赛-徐州。这场可真是无语到爆呀，照qls的说法，爆零的一百队是多push_back的一百队，qls这样说我也没有什么可反驳的。因为我有自知之明，我，就是菜，虽然榜带歪了，签到题看不出来真正的题意，medium+的题我也做不出来，就只能爆零了呗。因为都是跟着榜来做的，虽然有一定队友不给力还不看其它题的原因，但是问题也是在自己身上—-菜。如果当时我可以坚持将没有重边的情况试一下样例就好了，说不定快了还能有银，因为一题铜到银。最后队友认为没有重边的话这道题就太简单然后都没有看出来此题的重边概率就一直在死推题面和实现题面的算法，最后不会实现gg。</p>\n<h2 id=\"ICPC-青岛\"><a href=\"#ICPC-青岛\" class=\"headerlink\" title=\"ICPC-青岛\"></a>ICPC-青岛</h2><p>ICPC区域赛-青岛。三道签到，罚时少点会有铜，但是自己还是不给力，因为此场我作为coding手，卡在了实现签到题的一个函数，反正就是差不多脑袋快空白了，最后队友把我换下去写了半个小时才A掉的。然后第三道签到，这个也不能怪队友想的不周全，因为自己也没能推翻队友的算法，还有一些细节没有想到导致wa了6发，罚时高了。做完三道签到时时间还剩下一个半小时，开始开E，由于队友对于E的贪心和数数错误导致队友认为E题不可做，所以队友去开F。最后剩下半个小时的时候队友和我说他推出来了，然后问我能不能搞出E搞不出就来写F。虽然我觉得快搞出来E了但是相较之下明显还是选择写F较好，但是因为队友推出来的并不太好写，然后加上一些交流上的问题，最后F也没有写完(实际上如果能推出来真正的结论代码是非常简单和少的)。三题收场，罚时过多，打铁。</p>\n<h2 id=\"EC-Final-西安\"><a href=\"#EC-Final-西安\" class=\"headerlink\" title=\"EC-Final-西安\"></a>EC-Final-西安</h2><p>这次感觉自己就是个旅游团？（石锤了）被学长带着到处出去玩，真是领略了西安的古都风情…而且学长租了个车！花了好多钱。这次EC-Final让我看到了拿奖的希望，因为三题有铜，四题差不多有银，五题金。D，F，L都是签到题，但是最后只A掉了一道无比简单的D，L被坑的很惨，或许不该问队友一些问题，按照自己的想法或许就能A掉了。最无语的是两个队友居然一致对在$1e5$范围的数据$O(n^2)$的算法抱有侥幸？！然后F是个计算几何(表示最讨厌的就是计算几何)，直接和队友说了一下题意给队友讲了一下样例1就交给了队友。事实证明明显队友是不靠谱的。发现自己就是菜啊，还在这里吐槽队友……为什么不想想自己的问题所在呢？</p>\n<p>大一一年的训练程度，明显不饱和吧。寒假时打了一假期的牛客算法训练营(想想当时似乎什么算法也不会，连树状数组也不知道，要不是当时那道题数据蒻，没想到我二维前缀和都能过…）。而暑假时就是参加了pku的暑校，然后打了几场牛客多校，场场爆零，最后一场要不是作为下半年区域赛的队友(也是那个16级的学长)和我打了，不然又可能要爆零了。然后打完多校后，补了一小部分的题，反正不太多，然后假期的时候花了几天搭了一个自己的个人博客。打了几场网络预选赛，接着就是开学了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>一年来，写的题解也不算少了，虽然承认训练程度不太好，而且也没有啥人督促和引导，但是下半年都打铁了，真的好伤心啊QAQ，自闭<del>~~(&gt;_&lt;)</del>~~。</p>\n<p>等到明年，我唯一承认的队友似乎因为没有拿到EC名额被气的准备退役了，(感觉如果这次EC如果队友和我一起来的话是有可能拿个铜的)。然后假期找个人和我一起训练打camp都难找。</p>\n<p>一切看起来似乎都到了下坡，(可能因为找不到一起训练的队友发愁）但是我还不能放弃，我喜欢ACM，我喜欢算法竞赛，虽然我很菜，但是ACM让我在大学生活找到了目标，让我拥有了努力和奋斗的动力。就算是一个人，我也会坚持刷题训练下去！此生无悔入ACM！愿我成为一名真正的ACMER！（好像明年就要变成JBer了？？233333333</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"应该写点什么\"><a href=\"#应该写点什么\" class=\"headerlink\" title=\"应该写点什么\"></a>应该写点什么</h2><p>一年了，打了两场区域赛，一场CCPC，一场EC-Final，全部以打铁来告别这一年。</p>\n<p><strong>我，真的很渴望也能像他们一样，站在那个讲台上，手里拿着奖牌。讲真的，这是每一名ACMer无不渴望的。</strong><br>","more":"<br>大一一年，我估测着，几百题至少是有的。虽然好像大部分都比较水，然后不水的题，现场时也并没有机会去做。</p>\n<p>大一并没有怎么去打codefoces，感觉是很大的损失，开始决定认真打codeforces是从今年10月初旬开始的。</p>\n<p>最难受的不是不会做，而是能做，并且按理来说是应该可以A掉的，但是最后因为各种原因都没有A掉。</p>\n<p>作为蒻校，居然连队友都找不齐三个真是可悲，渴望能有两个队友和我一起训练，然而暑期花200块买了牛客多校找的同级的两个队友统统把我鸽掉，一场也没有和我打过。后来找了一名16级的学长，这个学长之前还搞过noip，总的来说是一名很不错的队友。</p>\n<p>仔细回想一下，为什么今年下半年的比赛都打铁了呢？</p>\n<h2 id=\"CCPC-秦皇岛\"><a href=\"#CCPC-秦皇岛\" class=\"headerlink\" title=\"CCPC-秦皇岛\"></a>CCPC-秦皇岛</h2><p>首先回想一下CCPC秦皇岛，多了一些不应该有的罚时，导致铜没有拿到。为什么说不应该有的罚时呢？因为coding手将solution打成了soultion，还有一个下标判断多加了一。还有一些原因是最后没有A掉的那题比较坑，想想dls和jls都wa了7发。但是最后裁判回复了某人k = 1就很过分了！因为它这个回复并不是公告，一开始回复no response，最后快要结束时却回复了某人k = 1，所以最后看到k = 1的选手应该可能都A掉了那道题。在秦皇岛，第一次看到了海，感觉海好美啊。</p>\n<h2 id=\"ICPC-徐州\"><a href=\"#ICPC-徐州\" class=\"headerlink\" title=\"ICPC-徐州\"></a>ICPC-徐州</h2><p>再到生涯第一次ICPC区域赛-徐州。这场可真是无语到爆呀，照qls的说法，爆零的一百队是多push_back的一百队，qls这样说我也没有什么可反驳的。因为我有自知之明，我，就是菜，虽然榜带歪了，签到题看不出来真正的题意，medium+的题我也做不出来，就只能爆零了呗。因为都是跟着榜来做的，虽然有一定队友不给力还不看其它题的原因，但是问题也是在自己身上—-菜。如果当时我可以坚持将没有重边的情况试一下样例就好了，说不定快了还能有银，因为一题铜到银。最后队友认为没有重边的话这道题就太简单然后都没有看出来此题的重边概率就一直在死推题面和实现题面的算法，最后不会实现gg。</p>\n<h2 id=\"ICPC-青岛\"><a href=\"#ICPC-青岛\" class=\"headerlink\" title=\"ICPC-青岛\"></a>ICPC-青岛</h2><p>ICPC区域赛-青岛。三道签到，罚时少点会有铜，但是自己还是不给力，因为此场我作为coding手，卡在了实现签到题的一个函数，反正就是差不多脑袋快空白了，最后队友把我换下去写了半个小时才A掉的。然后第三道签到，这个也不能怪队友想的不周全，因为自己也没能推翻队友的算法，还有一些细节没有想到导致wa了6发，罚时高了。做完三道签到时时间还剩下一个半小时，开始开E，由于队友对于E的贪心和数数错误导致队友认为E题不可做，所以队友去开F。最后剩下半个小时的时候队友和我说他推出来了，然后问我能不能搞出E搞不出就来写F。虽然我觉得快搞出来E了但是相较之下明显还是选择写F较好，但是因为队友推出来的并不太好写，然后加上一些交流上的问题，最后F也没有写完(实际上如果能推出来真正的结论代码是非常简单和少的)。三题收场，罚时过多，打铁。</p>\n<h2 id=\"EC-Final-西安\"><a href=\"#EC-Final-西安\" class=\"headerlink\" title=\"EC-Final-西安\"></a>EC-Final-西安</h2><p>这次感觉自己就是个旅游团？（石锤了）被学长带着到处出去玩，真是领略了西安的古都风情…而且学长租了个车！花了好多钱。这次EC-Final让我看到了拿奖的希望，因为三题有铜，四题差不多有银，五题金。D，F，L都是签到题，但是最后只A掉了一道无比简单的D，L被坑的很惨，或许不该问队友一些问题，按照自己的想法或许就能A掉了。最无语的是两个队友居然一致对在$1e5$范围的数据$O(n^2)$的算法抱有侥幸？！然后F是个计算几何(表示最讨厌的就是计算几何)，直接和队友说了一下题意给队友讲了一下样例1就交给了队友。事实证明明显队友是不靠谱的。发现自己就是菜啊，还在这里吐槽队友……为什么不想想自己的问题所在呢？</p>\n<p>大一一年的训练程度，明显不饱和吧。寒假时打了一假期的牛客算法训练营(想想当时似乎什么算法也不会，连树状数组也不知道，要不是当时那道题数据蒻，没想到我二维前缀和都能过…）。而暑假时就是参加了pku的暑校，然后打了几场牛客多校，场场爆零，最后一场要不是作为下半年区域赛的队友(也是那个16级的学长)和我打了，不然又可能要爆零了。然后打完多校后，补了一小部分的题，反正不太多，然后假期的时候花了几天搭了一个自己的个人博客。打了几场网络预选赛，接着就是开学了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>一年来，写的题解也不算少了，虽然承认训练程度不太好，而且也没有啥人督促和引导，但是下半年都打铁了，真的好伤心啊QAQ，自闭<del>~~(&gt;_&lt;)</del>~~。</p>\n<p>等到明年，我唯一承认的队友似乎因为没有拿到EC名额被气的准备退役了，(感觉如果这次EC如果队友和我一起来的话是有可能拿个铜的)。然后假期找个人和我一起训练打camp都难找。</p>\n<p>一切看起来似乎都到了下坡，(可能因为找不到一起训练的队友发愁）但是我还不能放弃，我喜欢ACM，我喜欢算法竞赛，虽然我很菜，但是ACM让我在大学生活找到了目标，让我拥有了努力和奋斗的动力。就算是一个人，我也会坚持刷题训练下去！此生无悔入ACM！愿我成为一名真正的ACMER！（好像明年就要变成JBer了？？233333333</p>"},{"title":"CodeForces - 476C-Dreamoon and Sums(数学思维)","comments":1,"date":"2018-11-06T16:49:26.000Z","_content":"# [C. Dreamoon and Sums](http://codeforces.com/problemset/problem/476/C)\n题解：设$$x = q\\cdot b + r \\tag{1}$$则有\n\n$$div(x,b) = q ,\\: mod(x,b) = r\\in[1,b-1]\\tag{2}$$\n$$\\frac{(1)}{r} =>  \\frac{x}{r} = \\frac{q\\cdot b}{r} + 1 \\tag{3}$$\n<!--more-->\n题目所求$$\\frac{div(x,b)}{mod(x,b)}=>\\frac{q}{r}=k\\in[1,a]\\tag{4}$$\n可得$$x = (3) \\cdot r = (k\\cdot b+1) \\cdot r\\tag{5}$$\n所以$$\\sum{x} = \\sum{(k\\cdot b+ 1)} \\cdot\\sum{r}\\tag{6}$$\n$$\\sum{x} = \\frac{b\\cdot (b - 1)}{2}\\left[ (b+1)\\cdot a + \\frac{a\\cdot (a - 1)}{2}\\cdot b \\right]\\tag{7}$$\n\n# 代码\n\n```c\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int mod = 1e9+7;\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tLL a,b;\n\tcin>>a>>b;\n\tLL t = ((b + 1) * a ) % mod;\n\tLL tmp = (a * (a - 1) / 2) % mod;\n\ttmp = tmp * b % mod;\n\ttmp = (tmp + t) % mod;\n\tt = (b - 1) * b / 2 % mod;\n\tcout<<(t * tmp) % mod<<endl;\n    return 0;\n}\n\n```\n\n","source":"_posts/codeforces-476-c.md","raw":"---\ntitle: CodeForces - 476C-Dreamoon and Sums(数学思维)\ncomments: true\ndate: 2018-11-07 00:49:26\ntags: [Codeforces,数论]\ncategories: \n- [Codeforces]\n- [数论]\n---\n# [C. Dreamoon and Sums](http://codeforces.com/problemset/problem/476/C)\n题解：设$$x = q\\cdot b + r \\tag{1}$$则有\n\n$$div(x,b) = q ,\\: mod(x,b) = r\\in[1,b-1]\\tag{2}$$\n$$\\frac{(1)}{r} =>  \\frac{x}{r} = \\frac{q\\cdot b}{r} + 1 \\tag{3}$$\n<!--more-->\n题目所求$$\\frac{div(x,b)}{mod(x,b)}=>\\frac{q}{r}=k\\in[1,a]\\tag{4}$$\n可得$$x = (3) \\cdot r = (k\\cdot b+1) \\cdot r\\tag{5}$$\n所以$$\\sum{x} = \\sum{(k\\cdot b+ 1)} \\cdot\\sum{r}\\tag{6}$$\n$$\\sum{x} = \\frac{b\\cdot (b - 1)}{2}\\left[ (b+1)\\cdot a + \\frac{a\\cdot (a - 1)}{2}\\cdot b \\right]\\tag{7}$$\n\n# 代码\n\n```c\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int mod = 1e9+7;\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tLL a,b;\n\tcin>>a>>b;\n\tLL t = ((b + 1) * a ) % mod;\n\tLL tmp = (a * (a - 1) / 2) % mod;\n\ttmp = tmp * b % mod;\n\ttmp = (tmp + t) % mod;\n\tt = (b - 1) * b / 2 % mod;\n\tcout<<(t * tmp) % mod<<endl;\n    return 0;\n}\n\n```\n\n","slug":"codeforces-476-c","published":1,"updated":"2018-11-08T15:02:32.295Z","layout":"post","photos":[],"link":"","_id":"cjpvbacr0001qs5158pryja19","content":"<h1 id=\"C-Dreamoon-and-Sums\"><a href=\"#C-Dreamoon-and-Sums\" class=\"headerlink\" title=\"C. Dreamoon and Sums\"></a><a href=\"http://codeforces.com/problemset/problem/476/C\" target=\"_blank\" rel=\"noopener\">C. Dreamoon and Sums</a></h1><p>题解：设$$x = q\\cdot b + r \\tag{1}$$则有</p>\n<p>$$div(x,b) = q ,\\: mod(x,b) = r\\in[1,b-1]\\tag{2}$$<br>$$\\frac{(1)}{r} =&gt;  \\frac{x}{r} = \\frac{q\\cdot b}{r} + 1 \\tag{3}$$<br><a id=\"more\"></a><br>题目所求$$\\frac{div(x,b)}{mod(x,b)}=&gt;\\frac{q}{r}=k\\in[1,a]\\tag{4}$$<br>可得$$x = (3) \\cdot r = (k\\cdot b+1) \\cdot r\\tag{5}$$<br>所以$$\\sum{x} = \\sum{(k\\cdot b+ 1)} \\cdot\\sum{r}\\tag{6}$$<br>$$\\sum{x} = \\frac{b\\cdot (b - 1)}{2}\\left[ (b+1)\\cdot a + \\frac{a\\cdot (a - 1)}{2}\\cdot b \\right]\\tag{7}$$</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\tLL a,b;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\tLL t = ((b + <span class=\"number\">1</span>) * a ) % mod;</span><br><span class=\"line\">\tLL tmp = (a * (a - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) % mod;</span><br><span class=\"line\">\ttmp = tmp * b % mod;</span><br><span class=\"line\">\ttmp = (tmp + t) % mod;</span><br><span class=\"line\">\tt = (b - <span class=\"number\">1</span>) * b / <span class=\"number\">2</span> % mod;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;(t * tmp) % mod&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"C-Dreamoon-and-Sums\"><a href=\"#C-Dreamoon-and-Sums\" class=\"headerlink\" title=\"C. Dreamoon and Sums\"></a><a href=\"http://codeforces.com/problemset/problem/476/C\" target=\"_blank\" rel=\"noopener\">C. Dreamoon and Sums</a></h1><p>题解：设$$x = q\\cdot b + r \\tag{1}$$则有</p>\n<p>$$div(x,b) = q ,\\: mod(x,b) = r\\in[1,b-1]\\tag{2}$$<br>$$\\frac{(1)}{r} =&gt;  \\frac{x}{r} = \\frac{q\\cdot b}{r} + 1 \\tag{3}$$<br>","more":"<br>题目所求$$\\frac{div(x,b)}{mod(x,b)}=&gt;\\frac{q}{r}=k\\in[1,a]\\tag{4}$$<br>可得$$x = (3) \\cdot r = (k\\cdot b+1) \\cdot r\\tag{5}$$<br>所以$$\\sum{x} = \\sum{(k\\cdot b+ 1)} \\cdot\\sum{r}\\tag{6}$$<br>$$\\sum{x} = \\frac{b\\cdot (b - 1)}{2}\\left[ (b+1)\\cdot a + \\frac{a\\cdot (a - 1)}{2}\\cdot b \\right]\\tag{7}$$</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\tLL a,b;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\tLL t = ((b + <span class=\"number\">1</span>) * a ) % mod;</span><br><span class=\"line\">\tLL tmp = (a * (a - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) % mod;</span><br><span class=\"line\">\ttmp = tmp * b % mod;</span><br><span class=\"line\">\ttmp = (tmp + t) % mod;</span><br><span class=\"line\">\tt = (b - <span class=\"number\">1</span>) * b / <span class=\"number\">2</span> % mod;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;(t * tmp) % mod&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"牛客多校第九场A(fwt-异或卷积)","comments":1,"date":"2018-08-24T15:46:37.000Z","_content":"# 题目描述\nNiuniu has recently learned how to use Gaussian elimination to solve systems of linear equations.\nGiven n and $a[i]$, where $n$ is a power of $2$, let's consider an $n\\times n$ matrix $A$.\n\nThe index of $A[i][j]$ and $a[i]$ are numbered from $0$.\nThe element $A[i][j]$ satisfies $A[i][j] = a[i\\, xor\\, j]$,\n[XOR](https://en.wikipedia.org/wiki/Bitwise_operation)\n<!-- more -->\nLet $p = 1000000007$.\nConsider the equation \n$A x = b \\pmod p$\nwhere $A$ is an $n \\times n$ matrix, and $x$ and $b$ are both $n \\times 1$ row vector.\n\nGiven $n, a[i], b[i]$, you need to solve the $x$.\nFor example, when $n = 4$, the equations look like\n$A[0][0]\\cdot  x[0] + A[0][1]\\cdot  x[1] + A[0][2]\\cdot x[2] + A[0][3]\\cdot x[3] = b[0] \\pmod p\\\\\\\\ \nA[1][0]\\cdot x[0] + A[1][1]\\cdot x[1] + A[1][2]\\cdot x[2] + A[1][3]\\cdot x[3] = b[1] \\pmod p\\\\\\\\\nA[2][0]\\cdot x[0] + A[2][1]\\cdot x[1] + A[2][2]\\cdot x[2] + A[2][3]\\cdot x[3] = b[2] \\pmod p\\\\\\\\\nA[3][0]\\cdot x[0] + A[3][1]\\cdot x[1] + A[3][2]\\cdot x[2] + A[3][3]\\cdot x[3] = b[3] \\pmod p$\nand the matrix $A$ can be decided by the array $a$.\n\nIt is guaranteed that there is a unique solution $x$ for these equations.\n# Input\nThe first line contains an integer, which is $n$.\nThe second line contains $n$ integers, which are the array $a$.\nThe third line contains $n$ integers, which are the array $b$.\n\n$1 <= n <= 262144$\n$p = 1000000007$\n$0 <= a[i] < p$\n$0 <= b[i] < p$\n# Output\nThe output should contains $n$ lines.\nThe $i$-th(index from $0$) line should contain $x[i]$.\n$x[i]$ is an integer, and should satisfy $0 <= x[i] < p$.\n# 问题分析\n首先，我们通过观察题目得到$$A\\times x = b \\pmod p$$\n将矩阵$A$展开\n$$ \\left[\n\\begin{array}{ccc}\n  a_0&a_1&a_2&a_3\\\\\\\\\n  a_1&a_0&a_3&a_2\\\\\\\\\n  a_2&a_3&a_0&a_1\\\\\\\\\n  a_3&a_2&a_1&a_0\n\\end{array}\n\\right] $$\n我们可以发现这个矩阵左上角和右下角相同，左下角和右上角相同，矩阵再扩大亦是如此。\n并且可以看出矩阵的全部信息只和第一行有关，恰好第一行就是数组$a$，所以实际上这是一个$fwt$(异或卷积)。\n所以我们可以将问题转换成：给出向量$a$和$b$，$fwt(a)\\cdot fwt(x) = fwt(b)$，求原向量$x$。\n\n那么我们就可以做一次$fwt(a)$，做一次$fwt(b)$，然后$x[i] = \\frac{b[i]}{a[i]}$，再做一次逆$fwt(x)$就好了啊。\n# 代码\n```c++\n#include <cstdio>\ntypedef long long LL;\nconst int N = 262150, p = 1e9+7;\nLL a[N], b[N], x[N], n, inv2;\nvoid fwt(LL *a) {\n    for (int i = 1; 1 << i <= n; i++) {\n        for (int j = 0; j < n; j += 1 << i) {\n            for (int k = 0; k < 1 << (i - 1); k++) {\n                LL x = a[j + k];\n                LL y = a[j + k + (1 << (i - 1))];\n                a[j + k] = (x + y) % p;\n                a[j + k + (1 << (i - 1))] = (x + p - y) % p;\n            }\n        }\n    }\n}\n\nvoid fwt(LL *a,int t) {\n    for (int i = 1; i < n; i <<= 1) {\n        for (int j = 0; j < n; j += (i << 1))\n            for (int k = j; k < i + j; k++) {\n                LL x = a[k], y = a[k + i];\n                a[k] = (x + y) % p, a[k + i] = (x - y + p) % p;\n                if (t)a[k] = a[k] * inv2 % p, a[k + i] = a[k + i] * inv2 % p;\n            }\n    }\n\n}\n\nLL Pow(LL a,LL n) {\n    LL ans = 1;\n    while (n) {\n        if (n & 1) ans = a * ans % p;\n        a = a * a % p;\n        n >>= 1;\n    }\n    return ans % p;\n}\n\nint main() {\n    scanf(\"%lld\", &n);\n    inv2 = Pow(2, p - 2);\n    for (int i = 0; i < n; ++i)\n        scanf(\"%lld\", a + i);\n    for (int i = 0; i < n; ++i)\n        scanf(\"%lld\", b + i);\n    fwt(a);\n    fwt(b);\n    for (int i = 0; i < n; ++i) {\n        x[i] = b[i] * Pow(a[i], p - 2) % p;\n    }\n    fwt(x, 1);//逆fwt\n    for (int i = 0; i < n; ++i)\n        printf(\"%lld\\n\", x[i]);\n//    实际上我们如果要算逆fwt也可以这样求\n//    for (int i = 0; i < n; ++i)\n//        printf(\"%lld\\n\", x[i] * Pow(n, p - 2) % p);\n    return 0;\n}\n```\n","source":"_posts/nowcoderTrain9-A.md","raw":"---\ntitle: 牛客多校第九场A(fwt-异或卷积)\ncomments: true\ndate: 2018-08-24 23:46:37\ntags: [牛客,fwt,acm]\ncategories: [数论,位运算卷积]\n---\n# 题目描述\nNiuniu has recently learned how to use Gaussian elimination to solve systems of linear equations.\nGiven n and $a[i]$, where $n$ is a power of $2$, let's consider an $n\\times n$ matrix $A$.\n\nThe index of $A[i][j]$ and $a[i]$ are numbered from $0$.\nThe element $A[i][j]$ satisfies $A[i][j] = a[i\\, xor\\, j]$,\n[XOR](https://en.wikipedia.org/wiki/Bitwise_operation)\n<!-- more -->\nLet $p = 1000000007$.\nConsider the equation \n$A x = b \\pmod p$\nwhere $A$ is an $n \\times n$ matrix, and $x$ and $b$ are both $n \\times 1$ row vector.\n\nGiven $n, a[i], b[i]$, you need to solve the $x$.\nFor example, when $n = 4$, the equations look like\n$A[0][0]\\cdot  x[0] + A[0][1]\\cdot  x[1] + A[0][2]\\cdot x[2] + A[0][3]\\cdot x[3] = b[0] \\pmod p\\\\\\\\ \nA[1][0]\\cdot x[0] + A[1][1]\\cdot x[1] + A[1][2]\\cdot x[2] + A[1][3]\\cdot x[3] = b[1] \\pmod p\\\\\\\\\nA[2][0]\\cdot x[0] + A[2][1]\\cdot x[1] + A[2][2]\\cdot x[2] + A[2][3]\\cdot x[3] = b[2] \\pmod p\\\\\\\\\nA[3][0]\\cdot x[0] + A[3][1]\\cdot x[1] + A[3][2]\\cdot x[2] + A[3][3]\\cdot x[3] = b[3] \\pmod p$\nand the matrix $A$ can be decided by the array $a$.\n\nIt is guaranteed that there is a unique solution $x$ for these equations.\n# Input\nThe first line contains an integer, which is $n$.\nThe second line contains $n$ integers, which are the array $a$.\nThe third line contains $n$ integers, which are the array $b$.\n\n$1 <= n <= 262144$\n$p = 1000000007$\n$0 <= a[i] < p$\n$0 <= b[i] < p$\n# Output\nThe output should contains $n$ lines.\nThe $i$-th(index from $0$) line should contain $x[i]$.\n$x[i]$ is an integer, and should satisfy $0 <= x[i] < p$.\n# 问题分析\n首先，我们通过观察题目得到$$A\\times x = b \\pmod p$$\n将矩阵$A$展开\n$$ \\left[\n\\begin{array}{ccc}\n  a_0&a_1&a_2&a_3\\\\\\\\\n  a_1&a_0&a_3&a_2\\\\\\\\\n  a_2&a_3&a_0&a_1\\\\\\\\\n  a_3&a_2&a_1&a_0\n\\end{array}\n\\right] $$\n我们可以发现这个矩阵左上角和右下角相同，左下角和右上角相同，矩阵再扩大亦是如此。\n并且可以看出矩阵的全部信息只和第一行有关，恰好第一行就是数组$a$，所以实际上这是一个$fwt$(异或卷积)。\n所以我们可以将问题转换成：给出向量$a$和$b$，$fwt(a)\\cdot fwt(x) = fwt(b)$，求原向量$x$。\n\n那么我们就可以做一次$fwt(a)$，做一次$fwt(b)$，然后$x[i] = \\frac{b[i]}{a[i]}$，再做一次逆$fwt(x)$就好了啊。\n# 代码\n```c++\n#include <cstdio>\ntypedef long long LL;\nconst int N = 262150, p = 1e9+7;\nLL a[N], b[N], x[N], n, inv2;\nvoid fwt(LL *a) {\n    for (int i = 1; 1 << i <= n; i++) {\n        for (int j = 0; j < n; j += 1 << i) {\n            for (int k = 0; k < 1 << (i - 1); k++) {\n                LL x = a[j + k];\n                LL y = a[j + k + (1 << (i - 1))];\n                a[j + k] = (x + y) % p;\n                a[j + k + (1 << (i - 1))] = (x + p - y) % p;\n            }\n        }\n    }\n}\n\nvoid fwt(LL *a,int t) {\n    for (int i = 1; i < n; i <<= 1) {\n        for (int j = 0; j < n; j += (i << 1))\n            for (int k = j; k < i + j; k++) {\n                LL x = a[k], y = a[k + i];\n                a[k] = (x + y) % p, a[k + i] = (x - y + p) % p;\n                if (t)a[k] = a[k] * inv2 % p, a[k + i] = a[k + i] * inv2 % p;\n            }\n    }\n\n}\n\nLL Pow(LL a,LL n) {\n    LL ans = 1;\n    while (n) {\n        if (n & 1) ans = a * ans % p;\n        a = a * a % p;\n        n >>= 1;\n    }\n    return ans % p;\n}\n\nint main() {\n    scanf(\"%lld\", &n);\n    inv2 = Pow(2, p - 2);\n    for (int i = 0; i < n; ++i)\n        scanf(\"%lld\", a + i);\n    for (int i = 0; i < n; ++i)\n        scanf(\"%lld\", b + i);\n    fwt(a);\n    fwt(b);\n    for (int i = 0; i < n; ++i) {\n        x[i] = b[i] * Pow(a[i], p - 2) % p;\n    }\n    fwt(x, 1);//逆fwt\n    for (int i = 0; i < n; ++i)\n        printf(\"%lld\\n\", x[i]);\n//    实际上我们如果要算逆fwt也可以这样求\n//    for (int i = 0; i < n; ++i)\n//        printf(\"%lld\\n\", x[i] * Pow(n, p - 2) % p);\n    return 0;\n}\n```\n","slug":"nowcoderTrain9-A","published":1,"updated":"2018-10-27T06:06:31.951Z","layout":"post","photos":[],"link":"","_id":"cjpvbacr1001vs515hkfnmv55","content":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>Niuniu has recently learned how to use Gaussian elimination to solve systems of linear equations.<br>Given n and $a[i]$, where $n$ is a power of $2$, let’s consider an $n\\times n$ matrix $A$.</p>\n<p>The index of $A[i][j]$ and $a[i]$ are numbered from $0$.<br>The element $A[i][j]$ satisfies $A[i][j] = a[i\\, xor\\, j]$,<br><a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" target=\"_blank\" rel=\"noopener\">XOR</a><br><a id=\"more\"></a><br>Let $p = 1000000007$.<br>Consider the equation<br>$A x = b \\pmod p$<br>where $A$ is an $n \\times n$ matrix, and $x$ and $b$ are both $n \\times 1$ row vector.</p>\n<p>Given $n, a[i], b[i]$, you need to solve the $x$.<br>For example, when $n = 4$, the equations look like<br>$A[0][0]\\cdot  x[0] + A[0][1]\\cdot  x[1] + A[0][2]\\cdot x[2] + A[0][3]\\cdot x[3] = b[0] \\pmod p\\\\\\ <br>A[1][0]\\cdot x[0] + A[1][1]\\cdot x[1] + A[1][2]\\cdot x[2] + A[1][3]\\cdot x[3] = b[1] \\pmod p\\\\\\\\<br>A[2][0]\\cdot x[0] + A[2][1]\\cdot x[1] + A[2][2]\\cdot x[2] + A[2][3]\\cdot x[3] = b[2] \\pmod p\\\\\\\\<br>A[3][0]\\cdot x[0] + A[3][1]\\cdot x[1] + A[3][2]\\cdot x[2] + A[3][3]\\cdot x[3] = b[3] \\pmod p$<br>and the matrix $A$ can be decided by the array $a$.</p>\n<p>It is guaranteed that there is a unique solution $x$ for these equations.</p>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>The first line contains an integer, which is $n$.<br>The second line contains $n$ integers, which are the array $a$.<br>The third line contains $n$ integers, which are the array $b$.</p>\n<p>$1 &lt;= n &lt;= 262144$<br>$p = 1000000007$<br>$0 &lt;= a[i] &lt; p$<br>$0 &lt;= b[i] &lt; p$</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>The output should contains $n$ lines.<br>The $i$-th(index from $0$) line should contain $x[i]$.<br>$x[i]$ is an integer, and should satisfy $0 &lt;= x[i] &lt; p$.</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>首先，我们通过观察题目得到$$A\\times x = b \\pmod p$$<br>将矩阵$A$展开<br>$$ \\left[<br>\\begin{array}{ccc}<br>  a_0&amp;a_1&amp;a_2&amp;a_3\\\\\\\\<br>  a_1&amp;a_0&amp;a_3&amp;a_2\\\\\\\\<br>  a_2&amp;a_3&amp;a_0&amp;a_1\\\\\\\\<br>  a_3&amp;a_2&amp;a_1&amp;a_0<br>\\end{array}<br>\\right] $$<br>我们可以发现这个矩阵左上角和右下角相同，左下角和右上角相同，矩阵再扩大亦是如此。<br>并且可以看出矩阵的全部信息只和第一行有关，恰好第一行就是数组$a$，所以实际上这是一个$fwt$(异或卷积)。<br>所以我们可以将问题转换成：给出向量$a$和$b$，$fwt(a)\\cdot fwt(x) = fwt(b)$，求原向量$x$。</p>\n<p>那么我们就可以做一次$fwt(a)$，做一次$fwt(b)$，然后$x[i] = \\frac{b[i]}{a[i]}$，再做一次逆$fwt(x)$就好了啊。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">262150</span>, p = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">LL a[N], b[N], x[N], n, inv2;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fwt</span><span class=\"params\">(LL *a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; <span class=\"number\">1</span> &lt;&lt; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += <span class=\"number\">1</span> &lt;&lt; i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>); k++) &#123;</span><br><span class=\"line\">                LL x = a[j + k];</span><br><span class=\"line\">                LL y = a[j + k + (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))];</span><br><span class=\"line\">                a[j + k] = (x + y) % p;</span><br><span class=\"line\">                a[j + k + (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))] = (x + p - y) % p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fwt</span><span class=\"params\">(LL *a,<span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += (i &lt;&lt; <span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j; k &lt; i + j; k++) &#123;</span><br><span class=\"line\">                LL x = a[k], y = a[k + i];</span><br><span class=\"line\">                a[k] = (x + y) % p, a[k + i] = (x - y + p) % p;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t)a[k] = a[k] * inv2 % p, a[k + i] = a[k + i] * inv2 % p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Pow</span><span class=\"params\">(LL a,LL n)</span> </span>&#123;</span><br><span class=\"line\">    LL ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) ans = a * ans % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;n);</span><br><span class=\"line\">    inv2 = Pow(<span class=\"number\">2</span>, p - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, a + i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, b + i);</span><br><span class=\"line\">    fwt(a);</span><br><span class=\"line\">    fwt(b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        x[i] = b[i] * Pow(a[i], p - <span class=\"number\">2</span>) % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fwt(x, <span class=\"number\">1</span>);<span class=\"comment\">//逆fwt</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, x[i]);</span><br><span class=\"line\"><span class=\"comment\">//    实际上我们如果要算逆fwt也可以这样求</span></span><br><span class=\"line\"><span class=\"comment\">//    for (int i = 0; i &lt; n; ++i)</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(\"%lld\\n\", x[i] * Pow(n, p - 2) % p);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>Niuniu has recently learned how to use Gaussian elimination to solve systems of linear equations.<br>Given n and $a[i]$, where $n$ is a power of $2$, let’s consider an $n\\times n$ matrix $A$.</p>\n<p>The index of $A[i][j]$ and $a[i]$ are numbered from $0$.<br>The element $A[i][j]$ satisfies $A[i][j] = a[i\\, xor\\, j]$,<br><a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" target=\"_blank\" rel=\"noopener\">XOR</a><br>","more":"<br>Let $p = 1000000007$.<br>Consider the equation<br>$A x = b \\pmod p$<br>where $A$ is an $n \\times n$ matrix, and $x$ and $b$ are both $n \\times 1$ row vector.</p>\n<p>Given $n, a[i], b[i]$, you need to solve the $x$.<br>For example, when $n = 4$, the equations look like<br>$A[0][0]\\cdot  x[0] + A[0][1]\\cdot  x[1] + A[0][2]\\cdot x[2] + A[0][3]\\cdot x[3] = b[0] \\pmod p\\\\\\ <br>A[1][0]\\cdot x[0] + A[1][1]\\cdot x[1] + A[1][2]\\cdot x[2] + A[1][3]\\cdot x[3] = b[1] \\pmod p\\\\\\\\<br>A[2][0]\\cdot x[0] + A[2][1]\\cdot x[1] + A[2][2]\\cdot x[2] + A[2][3]\\cdot x[3] = b[2] \\pmod p\\\\\\\\<br>A[3][0]\\cdot x[0] + A[3][1]\\cdot x[1] + A[3][2]\\cdot x[2] + A[3][3]\\cdot x[3] = b[3] \\pmod p$<br>and the matrix $A$ can be decided by the array $a$.</p>\n<p>It is guaranteed that there is a unique solution $x$ for these equations.</p>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>The first line contains an integer, which is $n$.<br>The second line contains $n$ integers, which are the array $a$.<br>The third line contains $n$ integers, which are the array $b$.</p>\n<p>$1 &lt;= n &lt;= 262144$<br>$p = 1000000007$<br>$0 &lt;= a[i] &lt; p$<br>$0 &lt;= b[i] &lt; p$</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>The output should contains $n$ lines.<br>The $i$-th(index from $0$) line should contain $x[i]$.<br>$x[i]$ is an integer, and should satisfy $0 &lt;= x[i] &lt; p$.</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>首先，我们通过观察题目得到$$A\\times x = b \\pmod p$$<br>将矩阵$A$展开<br>$$ \\left[<br>\\begin{array}{ccc}<br>  a_0&amp;a_1&amp;a_2&amp;a_3\\\\\\\\<br>  a_1&amp;a_0&amp;a_3&amp;a_2\\\\\\\\<br>  a_2&amp;a_3&amp;a_0&amp;a_1\\\\\\\\<br>  a_3&amp;a_2&amp;a_1&amp;a_0<br>\\end{array}<br>\\right] $$<br>我们可以发现这个矩阵左上角和右下角相同，左下角和右上角相同，矩阵再扩大亦是如此。<br>并且可以看出矩阵的全部信息只和第一行有关，恰好第一行就是数组$a$，所以实际上这是一个$fwt$(异或卷积)。<br>所以我们可以将问题转换成：给出向量$a$和$b$，$fwt(a)\\cdot fwt(x) = fwt(b)$，求原向量$x$。</p>\n<p>那么我们就可以做一次$fwt(a)$，做一次$fwt(b)$，然后$x[i] = \\frac{b[i]}{a[i]}$，再做一次逆$fwt(x)$就好了啊。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">262150</span>, p = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">LL a[N], b[N], x[N], n, inv2;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fwt</span><span class=\"params\">(LL *a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; <span class=\"number\">1</span> &lt;&lt; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += <span class=\"number\">1</span> &lt;&lt; i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>); k++) &#123;</span><br><span class=\"line\">                LL x = a[j + k];</span><br><span class=\"line\">                LL y = a[j + k + (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))];</span><br><span class=\"line\">                a[j + k] = (x + y) % p;</span><br><span class=\"line\">                a[j + k + (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))] = (x + p - y) % p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fwt</span><span class=\"params\">(LL *a,<span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += (i &lt;&lt; <span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j; k &lt; i + j; k++) &#123;</span><br><span class=\"line\">                LL x = a[k], y = a[k + i];</span><br><span class=\"line\">                a[k] = (x + y) % p, a[k + i] = (x - y + p) % p;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t)a[k] = a[k] * inv2 % p, a[k + i] = a[k + i] * inv2 % p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Pow</span><span class=\"params\">(LL a,LL n)</span> </span>&#123;</span><br><span class=\"line\">    LL ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) ans = a * ans % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;n);</span><br><span class=\"line\">    inv2 = Pow(<span class=\"number\">2</span>, p - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, a + i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, b + i);</span><br><span class=\"line\">    fwt(a);</span><br><span class=\"line\">    fwt(b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        x[i] = b[i] * Pow(a[i], p - <span class=\"number\">2</span>) % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fwt(x, <span class=\"number\">1</span>);<span class=\"comment\">//逆fwt</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, x[i]);</span><br><span class=\"line\"><span class=\"comment\">//    实际上我们如果要算逆fwt也可以这样求</span></span><br><span class=\"line\"><span class=\"comment\">//    for (int i = 0; i &lt; n; ++i)</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(\"%lld\\n\", x[i] * Pow(n, p - 2) % p);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ZOJ 4062 Plants vs. Zombies(二分+贪心) 2018ACM-ICPC青岛现场赛E","comments":1,"date":"2018-11-08T15:00:41.000Z","_content":"# [Plants vs. Zombies](http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5819)\n题解：首先肯定可以想到走过去再回来是肯定浪费步数的，最多的只能是相邻的两个植物来回，大致就呈一个$Z$字形走过，最后要注意最后一步停在哪里。其次最大化最小值，二分即可。(深深吐槽$\\%$，$2000ms$刚好卡过$2333333$，然后再交就$tle$，最后改成$ceil$才稳的)\n<!--more-->\n# 代码\n\n```c\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int N = 100100;\nint a[N], n;\nLL plant[N], m;\nbool love(LL minH)\n{\n\tmemset(plant, 0, sizeof plant);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tif(m > 0) {\n\t\t\tplant[i] += a[i];\n\t\t\tm--;\n\t\t}\n\t\tif(m <= 0) break;\n\t\tif(plant[i] >= minH) continue;\n\n\t\tif(minH > plant[i]) {\n\t\t\tLL cnt = 1LL * ceil((minH - plant[i]) * 1.0 / a[i]);\n\t\t\tif(cnt * 2 <= m) {\n\t\t\t\tm -= cnt * 2;\n\t\t\t\tplant[i] += a[i] * cnt;\n\t\t\t\tplant[i + 1] += a[i + 1] * cnt;\n\t\t\t}else break;\n\t\t\tif(m <= 0) break;\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(plant[i] < minH) return 0;\n\treturn 1;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tscanf(\"%d %lld\",&n,&m);\n\t\tmemset(a, 0, sizeof a);\n\t\tLL l = 1, r = 0, ans = 0, t = m;\n\t\tfor(int i = 1; i <= n; ++i) {\n\t\t\tscanf(\"%d\", a + i);\n\t\t\tr = max(r, a[i] * m);\n\t\t}\n\t\tif(m == 0) {\n\t\t\tputs(\"0\");\n\t\t\tcontinue;\n\t\t}\n\t\twhile(l <= r) {\n\t\t\tLL mid = l + (r - l) / 2;\n\t\t\tm = t;\n\t\t\tif(love(mid)) {\n\t\t\t\tans = mid;\n\t\t\t\tl = mid + 1;\n\t\t\t}else{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\n    return 0;\n}\n\n```\n\n","source":"_posts/2018icpc-qingdao-onsite-E.md","raw":"---\ntitle: ZOJ 4062 Plants vs. Zombies(二分+贪心) 2018ACM-ICPC青岛现场赛E\ncomments: true\ndate: 2018-11-08 23:00:41\ntags: [贪心,二分]\ncategories:\n- [贪心]\n- [二分]\n---\n# [Plants vs. Zombies](http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5819)\n题解：首先肯定可以想到走过去再回来是肯定浪费步数的，最多的只能是相邻的两个植物来回，大致就呈一个$Z$字形走过，最后要注意最后一步停在哪里。其次最大化最小值，二分即可。(深深吐槽$\\%$，$2000ms$刚好卡过$2333333$，然后再交就$tle$，最后改成$ceil$才稳的)\n<!--more-->\n# 代码\n\n```c\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int N = 100100;\nint a[N], n;\nLL plant[N], m;\nbool love(LL minH)\n{\n\tmemset(plant, 0, sizeof plant);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tif(m > 0) {\n\t\t\tplant[i] += a[i];\n\t\t\tm--;\n\t\t}\n\t\tif(m <= 0) break;\n\t\tif(plant[i] >= minH) continue;\n\n\t\tif(minH > plant[i]) {\n\t\t\tLL cnt = 1LL * ceil((minH - plant[i]) * 1.0 / a[i]);\n\t\t\tif(cnt * 2 <= m) {\n\t\t\t\tm -= cnt * 2;\n\t\t\t\tplant[i] += a[i] * cnt;\n\t\t\t\tplant[i + 1] += a[i + 1] * cnt;\n\t\t\t}else break;\n\t\t\tif(m <= 0) break;\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(plant[i] < minH) return 0;\n\treturn 1;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\",\"r\",stdin);\n#endif\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tscanf(\"%d %lld\",&n,&m);\n\t\tmemset(a, 0, sizeof a);\n\t\tLL l = 1, r = 0, ans = 0, t = m;\n\t\tfor(int i = 1; i <= n; ++i) {\n\t\t\tscanf(\"%d\", a + i);\n\t\t\tr = max(r, a[i] * m);\n\t\t}\n\t\tif(m == 0) {\n\t\t\tputs(\"0\");\n\t\t\tcontinue;\n\t\t}\n\t\twhile(l <= r) {\n\t\t\tLL mid = l + (r - l) / 2;\n\t\t\tm = t;\n\t\t\tif(love(mid)) {\n\t\t\t\tans = mid;\n\t\t\t\tl = mid + 1;\n\t\t\t}else{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\n    return 0;\n}\n\n```\n\n","slug":"2018icpc-qingdao-onsite-E","published":1,"updated":"2018-11-09T04:26:22.924Z","layout":"post","photos":[],"link":"","_id":"cjpvbacr2001ys515xbnnffdc","content":"<h1 id=\"Plants-vs-Zombies\"><a href=\"#Plants-vs-Zombies\" class=\"headerlink\" title=\"Plants vs. Zombies\"></a><a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5819\" target=\"_blank\" rel=\"noopener\">Plants vs. Zombies</a></h1><p>题解：首先肯定可以想到走过去再回来是肯定浪费步数的，最多的只能是相邻的两个植物来回，大致就呈一个$Z$字形走过，最后要注意最后一步停在哪里。其次最大化最小值，二分即可。(深深吐槽$\\%$，$2000ms$刚好卡过$2333333$，然后再交就$tle$，最后改成$ceil$才稳的)<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n;</span><br><span class=\"line\">LL plant[N], m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">love</span><span class=\"params\">(LL minH)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(plant, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> plant);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tplant[i] += a[i];</span><br><span class=\"line\">\t\t\tm--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(plant[i] &gt;= minH) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(minH &gt; plant[i]) &#123;</span><br><span class=\"line\">\t\t\tLL cnt = <span class=\"number\">1L</span>L * <span class=\"built_in\">ceil</span>((minH - plant[i]) * <span class=\"number\">1.0</span> / a[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cnt * <span class=\"number\">2</span> &lt;= m) &#123;</span><br><span class=\"line\">\t\t\t\tm -= cnt * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\tplant[i] += a[i] * cnt;</span><br><span class=\"line\">\t\t\t\tplant[i + <span class=\"number\">1</span>] += a[i + <span class=\"number\">1</span>] * cnt;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(m &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(plant[i] &lt; minH) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> T;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %lld\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> a);</span><br><span class=\"line\">\t\tLL l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>, t = m;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</span><br><span class=\"line\">\t\t\tr = max(r, a[i] * m);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l &lt;= r) &#123;</span><br><span class=\"line\">\t\t\tLL mid = l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\tm = t;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(love(mid)) &#123;</span><br><span class=\"line\">\t\t\t\tans = mid;</span><br><span class=\"line\">\t\t\t\tl = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Plants-vs-Zombies\"><a href=\"#Plants-vs-Zombies\" class=\"headerlink\" title=\"Plants vs. Zombies\"></a><a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5819\" target=\"_blank\" rel=\"noopener\">Plants vs. Zombies</a></h1><p>题解：首先肯定可以想到走过去再回来是肯定浪费步数的，最多的只能是相邻的两个植物来回，大致就呈一个$Z$字形走过，最后要注意最后一步停在哪里。其次最大化最小值，二分即可。(深深吐槽$\\%$，$2000ms$刚好卡过$2333333$，然后再交就$tle$，最后改成$ceil$才稳的)<br>","more":"</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n;</span><br><span class=\"line\">LL plant[N], m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">love</span><span class=\"params\">(LL minH)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(plant, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> plant);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tplant[i] += a[i];</span><br><span class=\"line\">\t\t\tm--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(plant[i] &gt;= minH) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(minH &gt; plant[i]) &#123;</span><br><span class=\"line\">\t\t\tLL cnt = <span class=\"number\">1L</span>L * <span class=\"built_in\">ceil</span>((minH - plant[i]) * <span class=\"number\">1.0</span> / a[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cnt * <span class=\"number\">2</span> &lt;= m) &#123;</span><br><span class=\"line\">\t\t\t\tm -= cnt * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\tplant[i] += a[i] * cnt;</span><br><span class=\"line\">\t\t\t\tplant[i + <span class=\"number\">1</span>] += a[i + <span class=\"number\">1</span>] * cnt;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(m &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(plant[i] &lt; minH) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> T;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %lld\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> a);</span><br><span class=\"line\">\t\tLL l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>, t = m;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</span><br><span class=\"line\">\t\t\tr = max(r, a[i] * m);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l &lt;= r) &#123;</span><br><span class=\"line\">\t\t\tLL mid = l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\tm = t;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(love(mid)) &#123;</span><br><span class=\"line\">\t\t\t\tans = mid;</span><br><span class=\"line\">\t\t\t\tl = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpvbackr0003s515aduh1y9q","category_id":"cjpvbackw0008s515lbn5pelq","_id":"cjpvbacky000bs515l5xlwgz9"},{"post_id":"cjpvback70000s51513759dq1","category_id":"cjpvbackt0004s515f7jykj2y","_id":"cjpvbacl0000is5153kpau4bn"},{"post_id":"cjpvback70000s51513759dq1","category_id":"cjpvbackx000as515sjym9prn","_id":"cjpvbacl0000ks515z83f7ckk"},{"post_id":"cjpvbackk0001s515vcg3sslj","category_id":"cjpvbackw0006s515774qh034","_id":"cjpvbacl2000ms515k8nh556a"},{"post_id":"cjpvbackk0001s515vcg3sslj","category_id":"cjpvbacky000ds515u9elcotb","_id":"cjpvbacl2000ns5151b9bzsw0"},{"post_id":"cjpvbaclf000xs5150mv07e5q","category_id":"cjpvbaclg000zs51577eh63n0","_id":"cjpvbacli0014s515xtyt72vg"},{"post_id":"cjpvbaclf000xs5150mv07e5q","category_id":"cjpvbaclh0011s51509kabqre","_id":"cjpvbaclj0015s515hvrzi1im"},{"post_id":"cjpvbacqd0016s515geb2d6ri","category_id":"cjpvbackw0006s515774qh034","_id":"cjpvbacqx001ls515b976mnwh"},{"post_id":"cjpvbacqd0016s515geb2d6ri","category_id":"cjpvbacqm001cs515qv91kdmr","_id":"cjpvbacqz001ps515durd9vbd"},{"post_id":"cjpvbacqf0018s515dmrsh944","category_id":"cjpvbackw0006s515774qh034","_id":"cjpvbacr1001ss5150q1vvp31"},{"post_id":"cjpvbacqf0018s515dmrsh944","category_id":"cjpvbacqm001cs515qv91kdmr","_id":"cjpvbacr2001xs515xcnmd8by"},{"post_id":"cjpvbacqp001es515eaodf345","category_id":"cjpvbackw0006s515774qh034","_id":"cjpvbacr50025s5155we94aop"},{"post_id":"cjpvbacqp001es515eaodf345","category_id":"cjpvbacr1001us51558pjkxz1","_id":"cjpvbacr50028s5157hhe80ku"},{"post_id":"cjpvbacr0001qs5158pryja19","category_id":"cjpvbacqx001ks515smp9bovc","_id":"cjpvbacr5002as515e3160pfd"},{"post_id":"cjpvbacr0001qs5158pryja19","category_id":"cjpvbackw0006s515774qh034","_id":"cjpvbacr6002ds515pp560qy7"},{"post_id":"cjpvbacqw001js515zespdrec","category_id":"cjpvbacr6002bs51564ni55si","_id":"cjpvbacrb002ls515lyqqseki"},{"post_id":"cjpvbacqy001ns515f8h99ste","category_id":"cjpvbacr6002bs51564ni55si","_id":"cjpvbacrc002rs515tz0xntcw"},{"post_id":"cjpvbacqk001bs515206o7f0y","category_id":"cjpvbacqx001ks515smp9bovc","_id":"cjpvbacrd002ws515yx6cbfuj"},{"post_id":"cjpvbacqk001bs515206o7f0y","category_id":"cjpvbacrb002ks515556a6d33","_id":"cjpvbacre002xs515b3rjko7y"},{"post_id":"cjpvbacr1001vs515hkfnmv55","category_id":"cjpvbackw0006s515774qh034","_id":"cjpvbacre0030s515c9cf6n4i"},{"post_id":"cjpvbacr1001vs515hkfnmv55","category_id":"cjpvbacrc002ps515jccs71kj","_id":"cjpvbacre0032s515xh02pjq6"},{"post_id":"cjpvbacr2001ys515xbnnffdc","category_id":"cjpvbackt0004s515f7jykj2y","_id":"cjpvbacrf0036s515u0ihvvys"},{"post_id":"cjpvbacr2001ys515xbnnffdc","category_id":"cjpvbacrb002ks515556a6d33","_id":"cjpvbacrf0038s5157jv4v8y5"},{"post_id":"cjpvbacqr001fs51540g5m9op","category_id":"cjpvbacqx001ks515smp9bovc","_id":"cjpvbacrg003bs515zblscgnf"},{"post_id":"cjpvbacqr001fs51540g5m9op","category_id":"cjpvbacre002ys515fgia1329","_id":"cjpvbacrg003cs51506lmoq2c"},{"post_id":"cjpvbacqu001is515zjlmsoig","category_id":"cjpvbacr50024s5153rjy5qya","_id":"cjpvbacrg003es51551b8tgfz"},{"post_id":"cjpvbacqu001is515zjlmsoig","category_id":"cjpvbackx000as515sjym9prn","_id":"cjpvbacrg003fs515pf1hquei"},{"post_id":"cjpvbacqu001is515zjlmsoig","category_id":"cjpvbacrf0034s5156c6x35ki","_id":"cjpvbacrg003gs515te7rg2fh"}],"PostTag":[{"post_id":"cjpvback70000s51513759dq1","tag_id":"cjpvbacko0002s5155gzpjg4q","_id":"cjpvbacky000es51524k7extt"},{"post_id":"cjpvback70000s51513759dq1","tag_id":"cjpvbackv0005s515awsjtq5n","_id":"cjpvbacl0000fs515c0kemwm3"},{"post_id":"cjpvback70000s51513759dq1","tag_id":"cjpvbackw0007s515bz1kuct7","_id":"cjpvbacl0000hs515stmyzu5w"},{"post_id":"cjpvback70000s51513759dq1","tag_id":"cjpvbackx0009s515ux5nlyv6","_id":"cjpvbacl0000js5158vsv0lc6"},{"post_id":"cjpvbackk0001s515vcg3sslj","tag_id":"cjpvbacky000cs515qkpaqhfu","_id":"cjpvbacl3000qs515bo7kwijl"},{"post_id":"cjpvbackk0001s515vcg3sslj","tag_id":"cjpvbacl0000gs5155lf36c6p","_id":"cjpvbacl3000rs515l0ou1hob"},{"post_id":"cjpvbackk0001s515vcg3sslj","tag_id":"cjpvbackx0009s515ux5nlyv6","_id":"cjpvbacl4000ts515gfcy18rs"},{"post_id":"cjpvbackk0001s515vcg3sslj","tag_id":"cjpvbackw0007s515bz1kuct7","_id":"cjpvbacl4000us515y9evta33"},{"post_id":"cjpvbackr0003s515aduh1y9q","tag_id":"cjpvbacl3000ps5150pl18did","_id":"cjpvbacl4000vs5155codxidx"},{"post_id":"cjpvbackr0003s515aduh1y9q","tag_id":"cjpvbacl4000ss515nownw01p","_id":"cjpvbacl4000ws515vj913vql"},{"post_id":"cjpvbaclf000xs5150mv07e5q","tag_id":"cjpvbaclg000ys515ejb0dazq","_id":"cjpvbacli0012s515dr40g9oy"},{"post_id":"cjpvbaclf000xs5150mv07e5q","tag_id":"cjpvbaclh0010s515xkhoj4c9","_id":"cjpvbacli0013s5157plni3fa"},{"post_id":"cjpvbacqd0016s515geb2d6ri","tag_id":"cjpvbacky000cs515qkpaqhfu","_id":"cjpvbacqz001os515rz8xpy2v"},{"post_id":"cjpvbacqd0016s515geb2d6ri","tag_id":"cjpvbacqk001as515rjg1mw9j","_id":"cjpvbacr0001rs515t6t7h41i"},{"post_id":"cjpvbacqd0016s515geb2d6ri","tag_id":"cjpvbacqt001gs515c8nsaqvo","_id":"cjpvbacr2001ws515e2k0lo2h"},{"post_id":"cjpvbacqf0018s515dmrsh944","tag_id":"cjpvbacky000cs515qkpaqhfu","_id":"cjpvbacr3001zs515ghf7a1v1"},{"post_id":"cjpvbacqf0018s515dmrsh944","tag_id":"cjpvbacqk001as515rjg1mw9j","_id":"cjpvbacr40022s515zx5drs5l"},{"post_id":"cjpvbacqk001bs515206o7f0y","tag_id":"cjpvbacr1001ts515xsoqgitb","_id":"cjpvbacr40023s515ukhgw08l"},{"post_id":"cjpvbacr2001ys515xbnnffdc","tag_id":"cjpvbacko0002s5155gzpjg4q","_id":"cjpvbacr50027s515tcfkg6ci"},{"post_id":"cjpvbacr2001ys515xbnnffdc","tag_id":"cjpvbacr1001ts515xsoqgitb","_id":"cjpvbacr50029s515pu05gbqk"},{"post_id":"cjpvbacqp001es515eaodf345","tag_id":"cjpvbacky000cs515qkpaqhfu","_id":"cjpvbacr6002es515b8jb5r5n"},{"post_id":"cjpvbacqp001es515eaodf345","tag_id":"cjpvbacr30020s5155vahtov2","_id":"cjpvbacr6002fs515evku4576"},{"post_id":"cjpvbacqp001es515eaodf345","tag_id":"cjpvbacr50026s5150nxdts10","_id":"cjpvbacra002is515qgj6pd2v"},{"post_id":"cjpvbacqr001fs51540g5m9op","tag_id":"cjpvbacr6002cs515shk2rqgm","_id":"cjpvbacrb002js515hflz2wwd"},{"post_id":"cjpvbacqu001is515zjlmsoig","tag_id":"cjpvbackx0009s515ux5nlyv6","_id":"cjpvbacrc002ns515ui3m84ix"},{"post_id":"cjpvbacqu001is515zjlmsoig","tag_id":"cjpvbackw0007s515bz1kuct7","_id":"cjpvbacrc002os515xcswaai6"},{"post_id":"cjpvbacqu001is515zjlmsoig","tag_id":"cjpvbacr9002hs515vn0wsg6x","_id":"cjpvbacrd002ss515z9a5bqfu"},{"post_id":"cjpvbacqw001js515zespdrec","tag_id":"cjpvbacrb002ms515cdvmbsuq","_id":"cjpvbacrd002ts515dkc2o2lx"},{"post_id":"cjpvbacqy001ns515f8h99ste","tag_id":"cjpvbacrb002ms515cdvmbsuq","_id":"cjpvbacre0031s515xir8yyfa"},{"post_id":"cjpvbacqy001ns515f8h99ste","tag_id":"cjpvbacrd002vs515gxkmv9r1","_id":"cjpvbacrf0033s515kgm7jtv2"},{"post_id":"cjpvbacr0001qs5158pryja19","tag_id":"cjpvbacre002zs51504k8e5vu","_id":"cjpvbacrf0037s515ivd3s5e5"},{"post_id":"cjpvbacr0001qs5158pryja19","tag_id":"cjpvbacky000cs515qkpaqhfu","_id":"cjpvbacrf0039s515arezbkp9"},{"post_id":"cjpvbacr1001vs515hkfnmv55","tag_id":"cjpvbacrf0035s5159ktr3jfe","_id":"cjpvbacrg003hs5155n7ht1h2"},{"post_id":"cjpvbacr1001vs515hkfnmv55","tag_id":"cjpvbacrg003as5154p8r0a56","_id":"cjpvbacrh003is515clw0bqqg"},{"post_id":"cjpvbacr1001vs515hkfnmv55","tag_id":"cjpvbacrg003ds515lp4cs0f1","_id":"cjpvbacrh003js515jpp0m1m2"}],"Tag":[{"name":"贪心","_id":"cjpvbacko0002s5155gzpjg4q"},{"name":"优先队列","_id":"cjpvbackv0005s515awsjtq5n"},{"name":"HDU","_id":"cjpvbackw0007s515bz1kuct7"},{"name":"CCPC","_id":"cjpvbackx0009s515ux5nlyv6"},{"name":"数论","_id":"cjpvbacky000cs515qkpaqhfu"},{"name":"费马大定理","_id":"cjpvbacl0000gs5155lf36c6p"},{"name":"树状数组","_id":"cjpvbacl3000ps5150pl18did"},{"name":"离散化","_id":"cjpvbacl4000ss515nownw01p"},{"name":"ICPC","_id":"cjpvbaclg000ys515ejb0dazq"},{"name":"线段树","_id":"cjpvbaclh0010s515xkhoj4c9"},{"name":"裴蜀定理","_id":"cjpvbacqk001as515rjg1mw9j"},{"name":"bzoj","_id":"cjpvbacqt001gs515c8nsaqvo"},{"name":"二分","_id":"cjpvbacr1001ts515xsoqgitb"},{"name":"欧拉定理","_id":"cjpvbacr30020s5155vahtov2"},{"name":"欧拉降幂","_id":"cjpvbacr50026s5150nxdts10"},{"name":"模拟","_id":"cjpvbacr6002cs515shk2rqgm"},{"name":"单调队列","_id":"cjpvbacr9002hs515vn0wsg6x"},{"name":"杂集","_id":"cjpvbacrb002ms515cdvmbsuq"},{"name":"ACM","_id":"cjpvbacrd002vs515gxkmv9r1"},{"name":"Codeforces","_id":"cjpvbacre002zs51504k8e5vu"},{"name":"牛客","_id":"cjpvbacrf0035s5159ktr3jfe"},{"name":"fwt","_id":"cjpvbacrg003as5154p8r0a56"},{"name":"acm","_id":"cjpvbacrg003ds515lp4cs0f1"}]}}