<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sqwlly&#39;s Blog</title>
  
  <subtitle>Still a long way off.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sqwlly.cn/"/>
  <updated>2018-12-19T15:09:27.127Z</updated>
  <id>http://sqwlly.cn/</id>
  
  <author>
    <name>Sqwlly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一年了，想要写点什么</title>
    <link href="http://sqwlly.cn/2018/12/19/talk-with-me/"/>
    <id>http://sqwlly.cn/2018/12/19/talk-with-me/</id>
    <published>2018-12-19T15:05:51.000Z</published>
    <updated>2018-12-19T15:09:27.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应该写点什么"><a href="#应该写点什么" class="headerlink" title="应该写点什么"></a>应该写点什么</h2><p>一年了，打了两场区域赛，一场CCPC，一场EC-Final，全部以打铁来告别这一年。</p><p><strong>我，真的很渴望也能像他们一样，站在那个讲台上，手里拿着奖牌。讲真的，这是每一名ACMer无不渴望的。</strong><br><a id="more"></a><br>大一一年，我估测着，几百题至少是有的。虽然好像大部分都比较水，然后不水的题，现场时也并没有机会去做。</p><p>大一并没有怎么去打codefoces，感觉是很大的损失，开始决定认真打codeforces是从今年10月初旬开始的。</p><p>最难受的不是不会做，而是能做，并且按理来说是应该可以A掉的，但是最后因为各种原因都没有A掉。</p><p>作为蒻校，居然连队友都找不齐三个真是可悲，渴望能有两个队友和我一起训练，然而暑期花200块买了牛客多校找的同级的两个队友统统把我鸽掉，一场也没有和我打过。后来找了一名16级的学长，这个学长之前还搞过noip，总的来说是一名很不错的队友。</p><p>仔细回想一下，为什么今年下半年的比赛都打铁了呢？</p><h2 id="CCPC-秦皇岛"><a href="#CCPC-秦皇岛" class="headerlink" title="CCPC-秦皇岛"></a>CCPC-秦皇岛</h2><p>首先回想一下CCPC秦皇岛，多了一些不应该有的罚时，导致铜没有拿到。为什么说不应该有的罚时呢？因为coding手将solution打成了soultion，还有一个下标判断多加了一。还有一些原因是最后没有A掉的那题比较坑，想想dls和jls都wa了7发。但是最后裁判回复了某人k = 1就很过分了！因为它这个回复并不是公告，一开始回复no response，最后快要结束时却回复了某人k = 1，所以最后看到k = 1的选手应该可能都A掉了那道题。在秦皇岛，第一次看到了海，感觉海好美啊。</p><h2 id="ICPC-徐州"><a href="#ICPC-徐州" class="headerlink" title="ICPC-徐州"></a>ICPC-徐州</h2><p>再到生涯第一次ICPC区域赛-徐州。这场可真是无语到爆呀，照qls的说法，爆零的一百队是多push_back的一百队，qls这样说我也没有什么可反驳的。因为我有自知之明，我，就是菜，虽然榜带歪了，签到题看不出来真正的题意，medium+的题我也做不出来，就只能爆零了呗。因为都是跟着榜来做的，虽然有一定队友不给力还不看其它题的原因，但是问题也是在自己身上—-菜。如果当时我可以坚持将没有重边的情况试一下样例就好了，说不定快了还能有银，因为一题铜到银。最后队友认为没有重边的话这道题就太简单然后都没有看出来此题的重边概率就一直在死推题面和实现题面的算法，最后不会实现gg。</p><h2 id="ICPC-青岛"><a href="#ICPC-青岛" class="headerlink" title="ICPC-青岛"></a>ICPC-青岛</h2><p>ICPC区域赛-青岛。三道签到，罚时少点会有铜，但是自己还是不给力，因为此场我作为coding手，卡在了实现签到题的一个函数，反正就是差不多脑袋快空白了，最后队友把我换下去写了半个小时才A掉的。然后第三道签到，这个也不能怪队友想的不周全，因为自己也没能推翻队友的算法，还有一些细节没有想到导致wa了6发，罚时高了。做完三道签到时时间还剩下一个半小时，开始开E，由于队友对于E的贪心和数数错误导致队友认为E题不可做，所以队友去开F。最后剩下半个小时的时候队友和我说他推出来了，然后问我能不能搞出E搞不出就来写F。虽然我觉得快搞出来E了但是相较之下明显还是选择写F较好，但是因为队友推出来的并不太好写，然后加上一些交流上的问题，最后F也没有写完(实际上如果能推出来真正的结论代码是非常简单和少的)。三题收场，罚时过多，打铁。</p><h2 id="EC-Final-西安"><a href="#EC-Final-西安" class="headerlink" title="EC-Final-西安"></a>EC-Final-西安</h2><p>这次感觉自己就是个旅游团？（石锤了）被学长带着到处出去玩，真是领略了西安的古都风情…而且学长租了个车！花了好多钱。这次EC-Final让我看到了拿奖的希望，因为三题有铜，四题差不多有银，五题金。D，F，L都是签到题，但是最后只A掉了一道无比简单的D，L被坑的很惨，或许不该问队友一些问题，按照自己的想法或许就能A掉了。最无语的是两个队友居然一致对在$1e5$范围的数据$O(n^2)$的算法抱有侥幸？！然后F是个计算几何(表示最讨厌的就是计算几何)，直接和队友说了一下题意给队友讲了一下样例1就交给了队友。事实证明明显队友是不靠谱的。发现自己就是菜啊，还在这里吐槽队友……为什么不想想自己的问题所在呢？</p><p>大一一年的训练程度，明显不饱和吧。寒假时打了一假期的牛客算法训练营(想想当时似乎什么算法也不会，连树状数组也不知道，要不是当时那道题数据蒻，没想到我二维前缀和都能过…）。而暑假时就是参加了pku的暑校，然后打了几场牛客多校，场场爆零，最后一场要不是作为下半年区域赛的队友(也是那个16级的学长)和我打了，不然又可能要爆零了。然后打完多校后，补了一小部分的题，反正不太多，然后假期的时候花了几天搭了一个自己的个人博客。打了几场网络预选赛，接着就是开学了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一年来，写的题解也不算少了，虽然承认训练程度不太好，而且也没有啥人督促和引导，但是下半年都打铁了，真的好伤心啊QAQ，自闭<del>~~(&gt;_&lt;)</del>~~。</p><p>等到明年，我唯一承认的队友似乎因为没有拿到EC名额被气的准备退役了，(感觉如果这次EC如果队友和我一起来的话是有可能拿个铜的)。然后假期找个人和我一起训练打camp都难找。</p><p>一切看起来似乎都到了下坡，(可能因为找不到一起训练的队友发愁）但是我还不能放弃，我喜欢ACM，我喜欢算法竞赛，虽然我很菜，但是ACM让我在大学生活找到了目标，让我拥有了努力和奋斗的动力。就算是一个人，我也会坚持刷题训练下去！此生无悔入ACM！愿我成为一名真正的ACMER！（好像明年就要变成JBer了？？233333333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;应该写点什么&quot;&gt;&lt;a href=&quot;#应该写点什么&quot; class=&quot;headerlink&quot; title=&quot;应该写点什么&quot;&gt;&lt;/a&gt;应该写点什么&lt;/h2&gt;&lt;p&gt;一年了，打了两场区域赛，一场CCPC，一场EC-Final，全部以打铁来告别这一年。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我，真的很渴望也能像他们一样，站在那个讲台上，手里拿着奖牌。讲真的，这是每一名ACMer无不渴望的。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂集" scheme="http://sqwlly.cn/categories/Myself/"/>
    
    
      <category term="杂集" scheme="http://sqwlly.cn/tags/%E6%9D%82%E9%9B%86/"/>
    
      <category term="ACM" scheme="http://sqwlly.cn/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ZOJ 4062 Plants vs. Zombies(二分+贪心) 2018ACM-ICPC青岛现场赛E</title>
    <link href="http://sqwlly.cn/2018/11/08/2018icpc-qingdao-onsite-E/"/>
    <id>http://sqwlly.cn/2018/11/08/2018icpc-qingdao-onsite-E/</id>
    <published>2018-11-08T15:00:41.000Z</published>
    <updated>2018-11-09T04:26:22.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plants-vs-Zombies"><a href="#Plants-vs-Zombies" class="headerlink" title="Plants vs. Zombies"></a><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5819" target="_blank" rel="noopener">Plants vs. Zombies</a></h1><p>题解：首先肯定可以想到走过去再回来是肯定浪费步数的，最多的只能是相邻的两个植物来回，大致就呈一个$Z$字形走过，最后要注意最后一步停在哪里。其次最大化最小值，二分即可。(深深吐槽$\%$，$2000ms$刚好卡过$2333333$，然后再交就$tle$，最后改成$ceil$才稳的)<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n;</span><br><span class="line">LL plant[N], m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">love</span><span class="params">(LL minH)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(plant, <span class="number">0</span>, <span class="keyword">sizeof</span> plant);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">plant[i] += a[i];</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(plant[i] &gt;= minH) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(minH &gt; plant[i]) &#123;</span><br><span class="line">LL cnt = <span class="number">1L</span>L * <span class="built_in">ceil</span>((minH - plant[i]) * <span class="number">1.0</span> / a[i]);</span><br><span class="line"><span class="keyword">if</span>(cnt * <span class="number">2</span> &lt;= m) &#123;</span><br><span class="line">m -= cnt * <span class="number">2</span>;</span><br><span class="line">plant[i] += a[i] * cnt;</span><br><span class="line">plant[i + <span class="number">1</span>] += a[i + <span class="number">1</span>] * cnt;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(m &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span>(plant[i] &lt; minH) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">LL l = <span class="number">1</span>, r = <span class="number">0</span>, ans = <span class="number">0</span>, t = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">r = max(r, a[i] * m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">LL mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">m = t;</span><br><span class="line"><span class="keyword">if</span>(love(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Plants-vs-Zombies&quot;&gt;&lt;a href=&quot;#Plants-vs-Zombies&quot; class=&quot;headerlink&quot; title=&quot;Plants vs. Zombies&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5819&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Plants vs. Zombies&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;题解：首先肯定可以想到走过去再回来是肯定浪费步数的，最多的只能是相邻的两个植物来回，大致就呈一个$Z$字形走过，最后要注意最后一步停在哪里。其次最大化最小值，二分即可。(深深吐槽$\%$，$2000ms$刚好卡过$2333333$，然后再交就$tle$，最后改成$ceil$才稳的)&lt;br&gt;
    
    </summary>
    
      <category term="贪心" scheme="http://sqwlly.cn/categories/Greedy/"/>
    
      <category term="二分" scheme="http://sqwlly.cn/categories/%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="贪心" scheme="http://sqwlly.cn/tags/Greedy/"/>
    
      <category term="二分" scheme="http://sqwlly.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces - 476C-Dreamoon and Sums(数学思维)</title>
    <link href="http://sqwlly.cn/2018/11/07/codeforces-476-c/"/>
    <id>http://sqwlly.cn/2018/11/07/codeforces-476-c/</id>
    <published>2018-11-06T16:49:26.000Z</published>
    <updated>2018-11-08T15:02:32.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Dreamoon-and-Sums"><a href="#C-Dreamoon-and-Sums" class="headerlink" title="C. Dreamoon and Sums"></a><a href="http://codeforces.com/problemset/problem/476/C" target="_blank" rel="noopener">C. Dreamoon and Sums</a></h1><p>题解：设$$x = q\cdot b + r \tag{1}$$则有</p><p>$$div(x,b) = q ,\: mod(x,b) = r\in[1,b-1]\tag{2}$$<br>$$\frac{(1)}{r} =&gt;  \frac{x}{r} = \frac{q\cdot b}{r} + 1 \tag{3}$$<br><a id="more"></a><br>题目所求$$\frac{div(x,b)}{mod(x,b)}=&gt;\frac{q}{r}=k\in[1,a]\tag{4}$$<br>可得$$x = (3) \cdot r = (k\cdot b+1) \cdot r\tag{5}$$<br>所以$$\sum{x} = \sum{(k\cdot b+ 1)} \cdot\sum{r}\tag{6}$$<br>$$\sum{x} = \frac{b\cdot (b - 1)}{2}\left[ (b+1)\cdot a + \frac{a\cdot (a - 1)}{2}\cdot b \right]\tag{7}$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">LL a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">LL t = ((b + <span class="number">1</span>) * a ) % mod;</span><br><span class="line">LL tmp = (a * (a - <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">tmp = tmp * b % mod;</span><br><span class="line">tmp = (tmp + t) % mod;</span><br><span class="line">t = (b - <span class="number">1</span>) * b / <span class="number">2</span> % mod;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(t * tmp) % mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-Dreamoon-and-Sums&quot;&gt;&lt;a href=&quot;#C-Dreamoon-and-Sums&quot; class=&quot;headerlink&quot; title=&quot;C. Dreamoon and Sums&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/476/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C. Dreamoon and Sums&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;题解：设$$x = q\cdot b + r \tag{1}$$则有&lt;/p&gt;
&lt;p&gt;$$div(x,b) = q ,\: mod(x,b) = r\in[1,b-1]\tag{2}$$&lt;br&gt;$$\frac{(1)}{r} =&amp;gt;  \frac{x}{r} = \frac{q\cdot b}{r} + 1 \tag{3}$$&lt;br&gt;
    
    </summary>
    
      <category term="数论" scheme="http://sqwlly.cn/categories/MathTheory/"/>
    
      <category term="Codeforces" scheme="http://sqwlly.cn/categories/Codeforces/"/>
    
    
      <category term="数论" scheme="http://sqwlly.cn/tags/MathTheory/"/>
    
      <category term="Codeforces" scheme="http://sqwlly.cn/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 53 (Rated for Div. 2) C(二分)</title>
    <link href="http://sqwlly.cn/2018/10/27/codeforces-edu-53-div2-C/"/>
    <id>http://sqwlly.cn/2018/10/27/codeforces-edu-53-div2-C/</id>
    <published>2018-10-26T16:40:45.000Z</published>
    <updated>2018-10-27T06:06:31.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Vasya-and-Robot"><a href="#C-Vasya-and-Robot" class="headerlink" title="C. Vasya and Robot"></a><a href="https://codeforces.com/contest/1073/problem/C" target="_blank" rel="noopener">C. Vasya and Robot</a></h1><p>题解：考虑去根据左端点二分答案即可。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>;</span><br><span class="line"><span class="keyword">int</span> U[N],R[N],L[N],D[N];</span><br><span class="line"><span class="keyword">int</span> n,x,y,sx,sy;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = t - s + <span class="number">1</span>, tx = sx, ty = sy;</span><br><span class="line">tx += L[t] - L[s - <span class="number">1</span>];</span><br><span class="line">ty += D[t] - D[s - <span class="number">1</span>];</span><br><span class="line">tx -= R[t] - R[s - <span class="number">1</span>];</span><br><span class="line">ty -= U[t] - U[s - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(x - tx) + <span class="built_in">abs</span>(y - ty) &gt; ret) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (ret - <span class="built_in">abs</span>(x - tx) - <span class="built_in">abs</span>(y - ty)) % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'L'</span>) sx--, L[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'R'</span>) sx++, R[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'U'</span>) sy++, U[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'D'</span>) sy--, D[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sx == x &amp;&amp; sy == y) <span class="keyword">return</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">L[i] += L[i - <span class="number">1</span>];</span><br><span class="line">R[i] += R[i - <span class="number">1</span>];</span><br><span class="line">U[i] += U[i - <span class="number">1</span>];</span><br><span class="line">D[i] += D[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, f = <span class="number">0</span>; i &lt;= n; ++i, f = <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l = i, r = n;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!ok(i,mid)) &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">f = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f) ans = min(ans,r - i + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == n + <span class="number">1</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-Vasya-and-Robot&quot;&gt;&lt;a href=&quot;#C-Vasya-and-Robot&quot; class=&quot;headerlink&quot; title=&quot;C. Vasya and Robot&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/1073/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C. Vasya and Robot&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;题解：考虑去根据左端点二分答案即可。&lt;br&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://sqwlly.cn/categories/Codeforces/"/>
    
      <category term="二分" scheme="http://sqwlly.cn/categories/%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="二分" scheme="http://sqwlly.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 53 (Rated for Div. 2)D(模拟)</title>
    <link href="http://sqwlly.cn/2018/10/27/codeforces-edu-53-div2-D/"/>
    <id>http://sqwlly.cn/2018/10/27/codeforces-edu-53-div2-D/</id>
    <published>2018-10-26T16:29:20.000Z</published>
    <updated>2018-10-27T06:06:31.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D-Berland-Fair"><a href="#D-Berland-Fair" class="headerlink" title="D. Berland Fair"></a><a href="https://codeforces.com/contest/1073/problem/D" target="_blank" rel="noopener">D. Berland Fair</a></h1><p>题解：考虑到每次都会有重复过程。因此我们首先可以算出一轮下来的花费和收获，然后算出这一次会循环多少轮，再给$T$对一轮的花费取模就可以算出剩下的钱。以此反复，继续算下一次的花费和收获。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>;</span><br><span class="line">LL T;</span><br><span class="line"><span class="keyword">int</span> a[N], n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>,&amp;n,&amp;T);</span><br><span class="line">LL Min = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Min = min(Min,<span class="number">1L</span>L*a[i]);</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( ; Min &lt;= T; )&#123;</span><br><span class="line">LL cnt = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt;= T)</span><br><span class="line">T -= a[i], ret += a[i], cnt++;</span><br><span class="line">&#125;</span><br><span class="line">ans += T / ret * cnt + cnt;</span><br><span class="line">T %= ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;D-Berland-Fair&quot;&gt;&lt;a href=&quot;#D-Berland-Fair&quot; class=&quot;headerlink&quot; title=&quot;D. Berland Fair&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/1073/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;D. Berland Fair&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;题解：考虑到每次都会有重复过程。因此我们首先可以算出一轮下来的花费和收获，然后算出这一次会循环多少轮，再给$T$对一轮的花费取模就可以算出剩下的钱。以此反复，继续算下一次的花费和收获。&lt;br&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://sqwlly.cn/categories/Codeforces/"/>
    
      <category term="模拟" scheme="http://sqwlly.cn/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    
      <category term="模拟" scheme="http://sqwlly.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 2018 徐州赛区网络预赛 H Ryuji doesn&#39;t want to study(线段树 两种做法)</title>
    <link href="http://sqwlly.cn/2018/09/12/ICPC-Net-xuzhou-H/"/>
    <id>http://sqwlly.cn/2018/09/12/ICPC-Net-xuzhou-H/</id>
    <published>2018-09-12T05:23:10.000Z</published>
    <updated>2018-10-27T06:06:31.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ryuji-doesn’t-want-to-study"><a href="#Ryuji-doesn’t-want-to-study" class="headerlink" title="Ryuji doesn’t want to study"></a><a href="https://nanti.jisuanke.com/t/31460" target="_blank" rel="noopener">Ryuji doesn’t want to study</a></h1><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>我们可以做一个前缀和$sum{a[i]}$和一个前缀和$sum{(n-i)*a[i]}$(看起来就像一个三角形，我们这里称之为$triangle[i]$)，如图所示。<br><a id="more"></a><br><img src="https://img-blog.csdn.net/20180909231038833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V0ZXJuYWxseTgzMTE0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>假设我们要求区间$[2,5] = 2\cdot4+3\cdot3+4\cdot2+5\cdot1$，那么，我们通过图中可以发现答案就是梯形的数值减去平行四边形的数值。即$$query(2,5) = (triangle[5]-triangle[1]) -(7-5)\cdot(sum[5]-sum[1])$$<br>因此我们只需要用线段树维护两个前缀和即可。</p><hr><p>这里蒻再补充一个做法。就是线段树维护前缀和的区间和。<br>我们将题里的要求分解一下。<br>假设仍然要求$query(2,5)$，<br>分解开来就会发现$$\begin{align}<br> query(2,5) &amp; =  (2 + 3 + 4 + 5 )+ (2 + 3 + 4)+(2+3)+(2) \\\\<br> &amp; =  (sum[5]-sum[1]) + (sum[4]-sum[1])+(sum[3]-sum[1])+(sum[2]-sum[1]) \\\\<br> &amp; = \sum_{i=2}^5 sum(i)-(5-3+1)\cdot sum(1)<br>\end{align}$$<br>所以题目所求变为$$<br>    query(l,r) = \sum_{i=l}^rsum(i)-(r-l+1)\cdot sum(l-1)<br>$$</p><h1 id="代码-第一种做法"><a href="#代码-第一种做法" class="headerlink" title="代码(第一种做法)"></a>代码(第一种做法)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    LL val, triangle;</span><br><span class="line">&#125; tr[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    tr[rt].val = tr[rt &lt;&lt; <span class="number">1</span>].val + tr[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val;</span><br><span class="line">    tr[rt].triangle = tr[rt &lt;&lt; <span class="number">1</span>].triangle + tr[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].triangle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;<span class="comment">//建树</span></span><br><span class="line">    tr[k].l = s;</span><br><span class="line">    tr[k].r = t;</span><br><span class="line">    <span class="keyword">if</span> (s == t) &#123;</span><br><span class="line">        tr[k].val = a[s];</span><br><span class="line">        tr[k].triangle = a[s] * <span class="number">1L</span>L * (n - s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (s + t) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(k &lt;&lt; <span class="number">1</span>, s, mid);</span><br><span class="line">    build(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, t);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> len)</span> </span>&#123;<span class="comment">//区间求和</span></span><br><span class="line">    <span class="keyword">int</span> L = tr[k].l, R = tr[k].r;</span><br><span class="line">    <span class="keyword">if</span> (x == L &amp;&amp; y == R)</span><br><span class="line">        <span class="keyword">return</span> tr[k].triangle - <span class="number">1L</span>L * len * tr[k].val;</span><br><span class="line">    <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(k &lt;&lt; <span class="number">1</span>, x, y, len);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, y, len);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(k &lt;&lt; <span class="number">1</span>, x, mid, len) + query(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, y, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x,LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">        tr[rt].triangle = (n - x + <span class="number">1</span>) * <span class="number">1L</span>L * v;</span><br><span class="line">        tr[rt].val = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        update(rt &lt;&lt; <span class="number">1</span>, L, mid, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, R, x, v);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> op, x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">            update(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, x, y, n - y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码-第二种做法"><a href="#代码-第二种做法" class="headerlink" title="代码(第二种做法)"></a>代码(第二种做法)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L tree[rt].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R tree[rt].r</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],n,q;</span><br><span class="line">LL sum[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        LL Inc,nSum;</span><br><span class="line">&#125; tree[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        tree[rt].nSum = tree[rt&lt;&lt;<span class="number">1</span>].nSum+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].nSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[rt].Inc) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                tree[rt&lt;&lt;<span class="number">1</span>].Inc += tree[rt].Inc;</span><br><span class="line">                tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].Inc += tree[rt].Inc;</span><br><span class="line">                tree[rt&lt;&lt;<span class="number">1</span>].nSum += tree[rt].Inc*(mid-L+<span class="number">1</span>);</span><br><span class="line">                tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].nSum += tree[rt].Inc*(R-mid);</span><br><span class="line">                tree[rt].Inc = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//建树</span></span><br><span class="line">        tree[rt].l = x; tree[rt].r = y;</span><br><span class="line">        <span class="keyword">if</span>(x == y) &#123;</span><br><span class="line">                tree[rt].Inc = <span class="number">0</span>;</span><br><span class="line">                tree[rt].nSum = sum[x];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (x + y) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(rt&lt;&lt;<span class="number">1</span>,x,mid);</span><br><span class="line">        build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,y);</span><br><span class="line">        pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//区间求和</span></span><br><span class="line">        <span class="keyword">if</span>(x == L &amp;&amp; y == R)</span><br><span class="line">                <span class="keyword">return</span> tree[rt].nSum;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;=mid)</span><br><span class="line">                <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;mid)</span><br><span class="line">                <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>,x,mid)+query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> x,<span class="keyword">int</span> y,LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == L &amp;&amp; R == y) &#123;</span><br><span class="line">                tree[rt].nSum += v*<span class="number">1L</span>L*(R-L+<span class="number">1</span>);</span><br><span class="line">                tree[rt].Inc += v;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y &lt;= mid)</span><br><span class="line">                update(rt &lt;&lt; <span class="number">1</span>, x, y,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; mid)</span><br><span class="line">                update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, y,v);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                update(rt &lt;&lt; <span class="number">1</span>, x, mid,v);</span><br><span class="line">                update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid+<span class="number">1</span>, y,v);</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">                sum[i] = sum[i<span class="number">-1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">int</span> op,x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">                <span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">                        update(<span class="number">1</span>,x,n,<span class="number">1L</span>L*(y-a[x]));</span><br><span class="line">                        a[x] = y;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(x==<span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>,x,y));</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>,x,y)<span class="number">-1L</span>L*(y-x+<span class="number">1</span>)*query(<span class="number">1</span>,x<span class="number">-1</span>,x<span class="number">-1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ryuji-doesn’t-want-to-study&quot;&gt;&lt;a href=&quot;#Ryuji-doesn’t-want-to-study&quot; class=&quot;headerlink&quot; title=&quot;Ryuji doesn’t want to study&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/31460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ryuji doesn’t want to study&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h1&gt;&lt;p&gt;我们可以做一个前缀和$sum{a[i]}$和一个前缀和$sum{(n-i)*a[i]}$(看起来就像一个三角形，我们这里称之为$triangle[i]$)，如图所示。&lt;br&gt;
    
    </summary>
    
      <category term="ICPC" scheme="http://sqwlly.cn/categories/ICPC/"/>
    
      <category term="线段树" scheme="http://sqwlly.cn/categories/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ICPC" scheme="http://sqwlly.cn/tags/ICPC/"/>
    
      <category term="线段树" scheme="http://sqwlly.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2018CCPC网络预选赛1007(hdu6444) 单调队列</title>
    <link href="http://sqwlly.cn/2018/08/29/hdu6444/"/>
    <id>http://sqwlly.cn/2018/08/29/hdu6444/</id>
    <published>2018-08-29T13:57:03.000Z</published>
    <updated>2018-10-27T06:06:31.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neko’s-loop"><a href="#Neko’s-loop" class="headerlink" title="Neko’s loop"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6444" target="_blank" rel="noopener">Neko’s loop</a></h1><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>题意：给一个元素个数为$n$的环，选定任意一个起点$i$后，每次可以往前跳$(i+k)\%n$，然后会相应得到$a_i$的收益，问跳$m$次后总收益可以达到$s$(可以提前停止)，在开始之前至少需要身上需要有多少收益。</p><p>显然这样选定一个起点后不断往前跳，所获得的$a_i$会形成一个环。</p><p>那么我们就可以把所有环找出来，通过枚举环的起点来找每个环可以获得的最大收益。问题就转化成求每个环的长度为$m$的最大子段和了。<br><a id="more"></a><br>我们用$cnt = \frac{len}{m}(len表示循环节长度)$代表需要跑几次循环节，用$ret = len \% m$代表剩余步数。<br>但是我们要注意两点。<br>首先，如果循环节的总收益为负，那么我们直接求一个不超过$m$的最大子段和就可以了。因为跑再更多次只会收益变得更小。<br>其次，如果$len&gt;m$，我想很多人可能就会直接$cnt * 循环节总收益 +剩余(len\% m)所能获得最大总收益$，这就是本题的坑点了。因为题目告诉了我们可以提前停止，如果最后一圈有负数，我们可以跑完正数的那一部分，剩下的负数不跑了。<br>就比如序列为$-2,-5,-7,20$，那么我们可以跑完$cnt-1$圈，再跑个$20$就够了。所以我们真正能确定的是前$cnt-1$前所能获得的最大收益，剩下的我们拿出来单独跑。</p><p>但是呢，还是要注意，我们跑剩余的时候，长度为$len+(len\%m)$，然后最后一步能跑到的范围为$(len-1,3*len)$，因此我们需要开三倍的数组。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> LL inf = <span class="number">1e18</span>;</span><br><span class="line">LL n,m,k,s,a[N],sum[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; v[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> d,<span class="keyword">int</span> n,LL m)</span> </span>&#123;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + v[d][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i)</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + v[d][i - n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * n + <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; ++i)</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + v[d][i - <span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!dq.empty() &amp;&amp; sum[dq.back()] &gt; sum[i - <span class="number">1</span>])</span><br><span class="line">            dq.pop_back();</span><br><span class="line">        <span class="keyword">while</span> (!dq.empty() &amp;&amp; dq.front() + m &lt; i) <span class="comment">//控制子段和长度为m</span></span><br><span class="line">            dq.pop_front();</span><br><span class="line">        dq.emplace_back(i - <span class="number">1</span>);</span><br><span class="line">        ans = max(ans, sum[i] - sum[dq.front()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; T; ++t) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        LL ans = -inf;</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            v[i].clear();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;n, &amp;s, &amp;m, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">        <span class="comment">//处理循环节</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; !vis[j]; j = (j + k) % n) &#123;</span><br><span class="line">                    vis[j] = <span class="number">1</span>;</span><br><span class="line">                    v[tot].push_back(a[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                tot++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</span><br><span class="line">            LL res = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> len = v[i].size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">                tmp += v[i][j];</span><br><span class="line">            res = solve(i, len, m);</span><br><span class="line">            ans = max(ans, res);</span><br><span class="line">            <span class="comment">//总收益小于0的话就跑一段长度不超过m的最大子段和就可以了</span></span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            LL ret = m % len;</span><br><span class="line">            LL cnt = m / len;</span><br><span class="line">            tmp = max(cnt - <span class="number">1</span>, <span class="number">0L</span>L) * tmp; <span class="comment">// cnt-1圈</span></span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= <span class="number">1</span>) ret += len;</span><br><span class="line">            res = max(res, solve(i, len, ret) + tmp); <span class="comment">//剩下的特判(单独算)</span></span><br><span class="line">            ans = max(ans, res);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(s - ans, <span class="number">0L</span>L);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, t + <span class="number">1</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Neko’s-loop&quot;&gt;&lt;a href=&quot;#Neko’s-loop&quot; class=&quot;headerlink&quot; title=&quot;Neko’s loop&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6444&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Neko’s loop&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h1&gt;&lt;p&gt;题意：给一个元素个数为$n$的环，选定任意一个起点$i$后，每次可以往前跳$(i+k)\%n$，然后会相应得到$a_i$的收益，问跳$m$次后总收益可以达到$s$(可以提前停止)，在开始之前至少需要身上需要有多少收益。&lt;/p&gt;
&lt;p&gt;显然这样选定一个起点后不断往前跳，所获得的$a_i$会形成一个环。&lt;/p&gt;
&lt;p&gt;那么我们就可以把所有环找出来，通过枚举环的起点来找每个环可以获得的最大收益。问题就转化成求每个环的长度为$m$的最大子段和了。&lt;br&gt;
    
    </summary>
    
      <category term="HDU" scheme="http://sqwlly.cn/categories/HDU/"/>
    
      <category term="CCPC" scheme="http://sqwlly.cn/categories/CCPC/"/>
    
      <category term="单调队列" scheme="http://sqwlly.cn/categories/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
    
      <category term="HDU" scheme="http://sqwlly.cn/tags/HDU/"/>
    
      <category term="CCPC" scheme="http://sqwlly.cn/tags/CCPC/"/>
    
      <category term="单调队列" scheme="http://sqwlly.cn/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>bzoj 2257 瓶子和燃料(裴蜀定理)</title>
    <link href="http://sqwlly.cn/2018/08/28/bzoj2257/"/>
    <id>http://sqwlly.cn/2018/08/28/bzoj2257/</id>
    <published>2018-08-28T07:05:10.000Z</published>
    <updated>2018-10-27T06:06:31.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="瓶子和燃料"><a href="#瓶子和燃料" class="headerlink" title="瓶子和燃料"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2257" target="_blank" rel="noopener">瓶子和燃料</a></h1><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>jyy就一直想着尽快回地球，可惜他飞船的燃料不够了。<br>有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy<br>的飞船上共有 N个瓶子(1&lt;=N&lt;=1000) ，经过协商，火星人只要其中的K 个 。 jyy<br>将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只<br>在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1&lt;=Vi&lt;=1000000000 ） 。<br>火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料<br>库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火<br>星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料；<br>2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满<br>或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能<br>得到的最小正体积。<br>jyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找<br>到最优的瓶子组合，使得火星人给出尽量多的燃料。<br><a id="more"></a></p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第1行：2个整数N,K，<br>第2..N 行：每行1个整数，第i+1 行的整数为Vi</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>仅1行，一个整数，表示火星人给出燃料的最大值。</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>3 2<br>3<br>4<br>4</p><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>4 </p><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><p>选择第2 个瓶子和第 个瓶子，火星人被迫会给出4 体积的容量。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>题意：最大化$N$个瓶子可以获得的最小值。<br>由裴蜀定理可知$ax+by=g$有整数解时当且仅当$g$是$gcd(a,b)$的倍数。<br>所以我们可以得到</p><ol><li>两个瓶子可以获得的最小值为$gcd(a,b)$</li><li>$k$个瓶子可以获得的最小值为这$k$个瓶子的$gcd$<br>因此我们就可以求出$N$个数的因子，从后往前找出现次数大于等于$k$的因此就好了。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n ,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; n; ++t) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= x; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == i * i)</span><br><span class="line">                cnt[i]++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">                cnt[i]++, cnt[x / i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator iter = --cnt.end(); iter!=--cnt.begin(); --iter)&#123;</span><br><span class="line">        <span class="keyword">if</span>((*iter).second &gt;= k)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(*iter).first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;瓶子和燃料&quot;&gt;&lt;a href=&quot;#瓶子和燃料&quot; class=&quot;headerlink&quot; title=&quot;瓶子和燃料&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=2257&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;瓶子和燃料&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;jyy就一直想着尽快回地球，可惜他飞船的燃料不够了。&lt;br&gt;有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy&lt;br&gt;的飞船上共有 N个瓶子(1&amp;lt;=N&amp;lt;=1000) ，经过协商，火星人只要其中的K 个 。 jyy&lt;br&gt;将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只&lt;br&gt;在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1&amp;lt;=Vi&amp;lt;=1000000000 ） 。&lt;br&gt;火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料&lt;br&gt;库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火&lt;br&gt;星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料；&lt;br&gt;2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满&lt;br&gt;或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能&lt;br&gt;得到的最小正体积。&lt;br&gt;jyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找&lt;br&gt;到最优的瓶子组合，使得火星人给出尽量多的燃料。&lt;br&gt;
    
    </summary>
    
      <category term="数论" scheme="http://sqwlly.cn/categories/MathTheory/"/>
    
      <category term="裴蜀定理" scheme="http://sqwlly.cn/categories/MathTheory/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    
    
      <category term="数论" scheme="http://sqwlly.cn/tags/MathTheory/"/>
    
      <category term="裴蜀定理" scheme="http://sqwlly.cn/tags/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    
      <category term="bzoj" scheme="http://sqwlly.cn/tags/bzoj/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2299 向量(裴蜀定理)</title>
    <link href="http://sqwlly.cn/2018/08/28/bzoj2299/"/>
    <id>http://sqwlly.cn/2018/08/28/bzoj2299/</id>
    <published>2018-08-28T05:54:24.000Z</published>
    <updated>2018-10-27T06:06:31.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2299" target="_blank" rel="noopener">向量</a></h1><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你一对数a,b，你可以任意使用$(a,b), (a,-b), (-a,b), (-a,-b), (b,a), (b,-a), (-b,a), (-b,-a)$这些向量，问你能不能拼出另一个向量$(x,y)$。</p><p>说明：这里的拼就是使得你选出的向量之和为$(x,y)$<br><a id="more"></a></p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行数组组数$t,(t&lt;=50000)$</p><p>接下来t行每行四个整数$a,b,x,y  (-2<em>10^9&lt;=a,b,x,y&lt;=2</em>10^9)$</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>$t$行每行为Y或者为N，分别表示可以拼出来，不能拼出来</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>3</p><p>2 1 3 3</p><p>1 1 0 1</p><p>1 0 -2 3</p><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>Y</p><p>N</p><p>Y</p><p>#样例解释：</p><p>第一组：(2,1)+(1,2)=(3,3)</p><p>第三组：(-1,0)+(-1,0)+(0,1)+(0,1)+(0,1)=(-2,3)</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>通过观察就可以发现上述向量可以归类成四个操作</p><ol><li>$x+=2a,y+0$</li><li>$y+=2b,y+0$</li><li>$x+a,y+b$</li><li>$x+b,y+a$<br>然后$3$和$4$最多只会用到一次，因为两次就会回到$1$和$2$的状态。所以我们去枚举操作$3$和$4$套裴蜀定理就可以了。</li></ol><p>$k_1\cdot (a,b)+k_2(b,a)=(x,y)$</p><ol><li>$k_1\cdot a+ k_2\cdot b = x$</li><li>$k_1\cdot b+ k_2\cdot a = y$<br>这里$1$和$2$的$k_1$与$k_2$并不一定相等，但是我们可以肯定至少奇偶性是相同的，</li></ol><p>因此套用裴蜀定理，判断$x$和$y$是否能同时整除$gcd(a,b)$即可。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">love</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y,<span class="keyword">long</span> <span class="keyword">long</span> g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x%g==<span class="number">0</span>&amp;&amp;y%g==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t,a,b,x,y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t); t; t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;a, &amp;b, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> g = gcd(<span class="number">2</span> * a, <span class="number">2</span> * b);</span><br><span class="line">        <span class="keyword">if</span> (love(x, y, g) || love(x + a, y + b, g) || love(x + b, y + a, g) || love(x + a + b, y + a + b, g))</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Y"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"N"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;向量&quot;&gt;&lt;a href=&quot;#向量&quot; class=&quot;headerlink&quot; title=&quot;向量&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=2299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;向量&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;给你一对数a,b，你可以任意使用$(a,b), (a,-b), (-a,b), (-a,-b), (b,a), (b,-a), (-b,a), (-b,-a)$这些向量，问你能不能拼出另一个向量$(x,y)$。&lt;/p&gt;
&lt;p&gt;说明：这里的拼就是使得你选出的向量之和为$(x,y)$&lt;br&gt;
    
    </summary>
    
      <category term="数论" scheme="http://sqwlly.cn/categories/MathTheory/"/>
    
      <category term="裴蜀定理" scheme="http://sqwlly.cn/categories/MathTheory/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    
    
      <category term="数论" scheme="http://sqwlly.cn/tags/MathTheory/"/>
    
      <category term="裴蜀定理" scheme="http://sqwlly.cn/tags/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2018CCPC网络预选赛1001(hdu6348) 贪心+优先队列</title>
    <link href="http://sqwlly.cn/2018/08/26/2018ccpc-hdu6348/"/>
    <id>http://sqwlly.cn/2018/08/26/2018ccpc-hdu6348/</id>
    <published>2018-08-26T11:25:03.000Z</published>
    <updated>2018-10-27T06:06:31.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Buy-and-Resell"><a href="#Buy-and-Resell" class="headerlink" title="Buy and Resell"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6438" target="_blank" rel="noopener">Buy and Resell</a></h1><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>题意：有$n$个村庄，每经过一个村庄你有以下三个选择</p><ol><li>买能量块</li><li>卖能量块</li><li><p>什么也不做<br>求最后可以获得的最大利润，并且尽可能减少交易次数。</p><a id="more"></a><p>我们可以准着低买高卖的原则，用一个小顶堆维护我们交易过的能量块。<br>只要当前能量块$i$的价格高于我们之前买来的能量块$j$的价格，我们就可以将其卖出去，并且一定是获利的，但是这样做并不能保证利润最大，所以我们就可以$push$两次当前能量块，一次代表我们将其买入了，一次代表我们以后发现有价格更高的能量块，我们用来反悔的。</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, shit;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> love = <span class="number">0</span>, dog = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;shit);</span><br><span class="line">            pq.push(make_pair(-shit, <span class="number">1</span>)); <span class="comment">//买入</span></span><br><span class="line">            pq.push(make_pair(-shit, <span class="number">2</span>)); <span class="comment">//卖出</span></span><br><span class="line">            love += shit + pq.top().first;</span><br><span class="line">            <span class="keyword">if</span> (pq.top().second == <span class="number">1</span>) dog += <span class="number">2</span>; <span class="comment">//每一次买入必定会有卖出</span></span><br><span class="line">            pq.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, love, dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想有可能有小伙伴比较疑惑为什么这样的做法是对的。因为，我们每天买入卖出，累加的是差值(当然真正的买入卖出是根据小顶堆维护的最小值)。实际上我们做的算法是，对于每一个能量块，我们去看前面村庄的能量块，什么时候买入可以获得最大利润。求每一个能量块的贡献。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Buy-and-Resell&quot;&gt;&lt;a href=&quot;#Buy-and-Resell&quot; class=&quot;headerlink&quot; title=&quot;Buy and Resell&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6438&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Buy and Resell&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h1&gt;&lt;p&gt;题意：有$n$个村庄，每经过一个村庄你有以下三个选择&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;买能量块&lt;/li&gt;
&lt;li&gt;卖能量块&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么也不做&lt;br&gt;求最后可以获得的最大利润，并且尽可能减少交易次数。&lt;/p&gt;
    
    </summary>
    
      <category term="贪心" scheme="http://sqwlly.cn/categories/Greedy/"/>
    
      <category term="HDU" scheme="http://sqwlly.cn/categories/HDU/"/>
    
    
      <category term="贪心" scheme="http://sqwlly.cn/tags/Greedy/"/>
    
      <category term="优先队列" scheme="http://sqwlly.cn/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="HDU" scheme="http://sqwlly.cn/tags/HDU/"/>
    
      <category term="CCPC" scheme="http://sqwlly.cn/tags/CCPC/"/>
    
  </entry>
  
  <entry>
    <title>2018CCPC网络预选赛1004(hdu6441) 费马大定理</title>
    <link href="http://sqwlly.cn/2018/08/26/2018ccpc-hdu6441/"/>
    <id>http://sqwlly.cn/2018/08/26/2018ccpc-hdu6441/</id>
    <published>2018-08-26T07:12:50.000Z</published>
    <updated>2018-10-27T06:06:31.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Find-Integer"><a href="#Find-Integer" class="headerlink" title="Find Integer"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6441" target="_blank" rel="noopener">Find Integer</a></h1><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>题意：已知$a^n+b^n=c^n$，给出$n$和$a$，求$b$，$c$，如果无解输出$-1$。<br><strong>费马大定理</strong></p><ol><li>$a^n+b^n=c^n$，$n&gt;2$时无解。</li><li>当$a$为奇数时，<a id="more"></a>$a = 2 \cdot k + 1$</li></ol><p>$c = k ^ 2 + (k + 1) ^ 2$</p><p>$b = c - 1$</p><p>当 $a$ 为偶数</p><p>$a = 2 * k + 2$</p><p>$c = 1 + (k + 1) ^ 2$</p><p>$b = c - 2$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="number">1</span>, a + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> b, c;</span><br><span class="line">            <span class="keyword">if</span> (a &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> k = a / <span class="number">2</span>;</span><br><span class="line">                c = k * <span class="number">1L</span>L * k + (k + <span class="number">1</span>) * <span class="number">1L</span>L * (k + <span class="number">1</span>);</span><br><span class="line">                b = c - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> k = (a - <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">                c = <span class="number">1</span> + <span class="number">1L</span>L * (k + <span class="number">1</span>) * (k + <span class="number">1</span>);</span><br><span class="line">                b = c - <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">1e9</span> || c &gt; <span class="number">1e9</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Find-Integer&quot;&gt;&lt;a href=&quot;#Find-Integer&quot; class=&quot;headerlink&quot; title=&quot;Find Integer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6441&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Find Integer&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h1&gt;&lt;p&gt;题意：已知$a^n+b^n=c^n$，给出$n$和$a$，求$b$，$c$，如果无解输出$-1$。&lt;br&gt;&lt;strong&gt;费马大定理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$a^n+b^n=c^n$，$n&amp;gt;2$时无解。&lt;/li&gt;
&lt;li&gt;当$a$为奇数时，
    
    </summary>
    
      <category term="数论" scheme="http://sqwlly.cn/categories/MathTheory/"/>
    
      <category term="费马大定理" scheme="http://sqwlly.cn/categories/MathTheory/%E8%B4%B9%E9%A9%AC%E5%A4%A7%E5%AE%9A%E7%90%86/"/>
    
    
      <category term="HDU" scheme="http://sqwlly.cn/tags/HDU/"/>
    
      <category term="CCPC" scheme="http://sqwlly.cn/tags/CCPC/"/>
    
      <category term="数论" scheme="http://sqwlly.cn/tags/MathTheory/"/>
    
      <category term="费马大定理" scheme="http://sqwlly.cn/tags/%E8%B4%B9%E9%A9%AC%E5%A4%A7%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2018CCPC网络预选赛1010(hdu6447) dp+树状数组</title>
    <link href="http://sqwlly.cn/2018/08/25/2018ccpc-hdu6447/"/>
    <id>http://sqwlly.cn/2018/08/25/2018ccpc-hdu6447/</id>
    <published>2018-08-25T15:21:29.000Z</published>
    <updated>2018-10-27T06:06:31.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YJJ’s-Salesman"><a href="#YJJ’s-Salesman" class="headerlink" title="YJJ’s Salesman"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6447" target="_blank" rel="noopener">YJJ’s Salesman</a></h1><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>题意：从$(0,0)$到$(10^9,10^9)$，每次只能往$(x+1,y),(x+1,y+1),(x,y+1)$三个方向走，期间有$n$个村庄，只有当从$(x-1,y-1)$走到当前村庄才会获得$v_k$元，问最后到达目标时的可以获得的最大钱数。<br><a id="more"></a><br>首先我们想到的就是$dp$，但是因为区间太大了，所以需要离散化一下，然后发现一般dp的复杂度是$n^2$的，肯定是要超时的，所以我们可以利用树状数组或者线段树去维护区间最大值，这样我们就可以$\Theta(nlog_n)$的复杂度求解了。</p><p>大致就是先按$x$排序，然后因为我们要用树状数组去维护这个区间最大值，所以考虑到$x$相同的时候，我们要尽量取$y$大的，所以排序的第二$key$就按照$y$从大到小排序。然后排完序就给$y$去离散化一下，根据离散化好的序列去$dp$。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) (((a)&gt;(b))?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">&#125; a[N];</span><br><span class="line"><span class="keyword">int</span> bit[N], shit[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x)</span><br><span class="line">        <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; N; i += lowbit(i))</span><br><span class="line">        bit[i] = max(v, bit[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i; i -= lowbit(i))</span><br><span class="line">        ans = max(ans, bit[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, x, y, w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span> bit);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; id;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line">            a[i].x = x, a[i].y = y, a[i].w = w;</span><br><span class="line">            id.push_back(y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(id.begin(), id.end());</span><br><span class="line">        id.erase(unique(id.begin(), id.end()), id.end());</span><br><span class="line">        sort(a, a + n, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            shit[i] = lower_bound(id.begin(), id.end(), a[i].y) - id.begin() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> love = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = max&#123;dp[0, i - 1]&#125;+a[i].w;</span></span><br><span class="line">            <span class="keyword">int</span> fuck = query(shit[i] - <span class="number">1</span>) + a[i].w;</span><br><span class="line">            update(shit[i], fuck);</span><br><span class="line">            love = max(love, fuck);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, love);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;YJJ’s-Salesman&quot;&gt;&lt;a href=&quot;#YJJ’s-Salesman&quot; class=&quot;headerlink&quot; title=&quot;YJJ’s Salesman&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6447&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YJJ’s Salesman&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h1&gt;&lt;p&gt;题意：从$(0,0)$到$(10^9,10^9)$，每次只能往$(x+1,y),(x+1,y+1),(x,y+1)$三个方向走，期间有$n$个村庄，只有当从$(x-1,y-1)$走到当前村庄才会获得$v_k$元，问最后到达目标时的可以获得的最大钱数。&lt;br&gt;
    
    </summary>
    
      <category term="树状数组" scheme="http://sqwlly.cn/categories/bitTree/"/>
    
    
      <category term="树状数组" scheme="http://sqwlly.cn/tags/bitTree/"/>
    
      <category term="离散化" scheme="http://sqwlly.cn/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>牛客多校第九场A(fwt-异或卷积)</title>
    <link href="http://sqwlly.cn/2018/08/24/nowcoderTrain9-A/"/>
    <id>http://sqwlly.cn/2018/08/24/nowcoderTrain9-A/</id>
    <published>2018-08-24T15:46:37.000Z</published>
    <updated>2018-10-27T06:06:31.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Niuniu has recently learned how to use Gaussian elimination to solve systems of linear equations.<br>Given n and $a[i]$, where $n$ is a power of $2$, let’s consider an $n\times n$ matrix $A$.</p><p>The index of $A[i][j]$ and $a[i]$ are numbered from $0$.<br>The element $A[i][j]$ satisfies $A[i][j] = a[i\, xor\, j]$,<br><a href="https://en.wikipedia.org/wiki/Bitwise_operation" target="_blank" rel="noopener">XOR</a><br><a id="more"></a><br>Let $p = 1000000007$.<br>Consider the equation<br>$A x = b \pmod p$<br>where $A$ is an $n \times n$ matrix, and $x$ and $b$ are both $n \times 1$ row vector.</p><p>Given $n, a[i], b[i]$, you need to solve the $x$.<br>For example, when $n = 4$, the equations look like<br>$A[0][0]\cdot  x[0] + A[0][1]\cdot  x[1] + A[0][2]\cdot x[2] + A[0][3]\cdot x[3] = b[0] \pmod p\\\ <br>A[1][0]\cdot x[0] + A[1][1]\cdot x[1] + A[1][2]\cdot x[2] + A[1][3]\cdot x[3] = b[1] \pmod p\\\\<br>A[2][0]\cdot x[0] + A[2][1]\cdot x[1] + A[2][2]\cdot x[2] + A[2][3]\cdot x[3] = b[2] \pmod p\\\\<br>A[3][0]\cdot x[0] + A[3][1]\cdot x[1] + A[3][2]\cdot x[2] + A[3][3]\cdot x[3] = b[3] \pmod p$<br>and the matrix $A$ can be decided by the array $a$.</p><p>It is guaranteed that there is a unique solution $x$ for these equations.</p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>The first line contains an integer, which is $n$.<br>The second line contains $n$ integers, which are the array $a$.<br>The third line contains $n$ integers, which are the array $b$.</p><p>$1 &lt;= n &lt;= 262144$<br>$p = 1000000007$<br>$0 &lt;= a[i] &lt; p$<br>$0 &lt;= b[i] &lt; p$</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>The output should contains $n$ lines.<br>The $i$-th(index from $0$) line should contain $x[i]$.<br>$x[i]$ is an integer, and should satisfy $0 &lt;= x[i] &lt; p$.</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>首先，我们通过观察题目得到$$A\times x = b \pmod p$$<br>将矩阵$A$展开<br>$$ \left[<br>\begin{array}{ccc}<br>  a_0&amp;a_1&amp;a_2&amp;a_3\\\\<br>  a_1&amp;a_0&amp;a_3&amp;a_2\\\\<br>  a_2&amp;a_3&amp;a_0&amp;a_1\\\\<br>  a_3&amp;a_2&amp;a_1&amp;a_0<br>\end{array}<br>\right] $$<br>我们可以发现这个矩阵左上角和右下角相同，左下角和右上角相同，矩阵再扩大亦是如此。<br>并且可以看出矩阵的全部信息只和第一行有关，恰好第一行就是数组$a$，所以实际上这是一个$fwt$(异或卷积)。<br>所以我们可以将问题转换成：给出向量$a$和$b$，$fwt(a)\cdot fwt(x) = fwt(b)$，求原向量$x$。</p><p>那么我们就可以做一次$fwt(a)$，做一次$fwt(b)$，然后$x[i] = \frac{b[i]}{a[i]}$，再做一次逆$fwt(x)$就好了啊。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">262150</span>, p = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL a[N], b[N], x[N], n, inv2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(LL *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; <span class="number">1</span> &lt;&lt; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span> &lt;&lt; i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>); k++) &#123;</span><br><span class="line">                LL x = a[j + k];</span><br><span class="line">                LL y = a[j + k + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))];</span><br><span class="line">                a[j + k] = (x + y) % p;</span><br><span class="line">                a[j + k + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))] = (x + p - y) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(LL *a,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += (i &lt;&lt; <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; i + j; k++) &#123;</span><br><span class="line">                LL x = a[k], y = a[k + i];</span><br><span class="line">                a[k] = (x + y) % p, a[k + i] = (x - y + p) % p;</span><br><span class="line">                <span class="keyword">if</span> (t)a[k] = a[k] * inv2 % p, a[k + i] = a[k + i] * inv2 % p;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Pow</span><span class="params">(LL a,LL n)</span> </span>&#123;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ans = a * ans % p;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">    inv2 = Pow(<span class="number">2</span>, p - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, b + i);</span><br><span class="line">    fwt(a);</span><br><span class="line">    fwt(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        x[i] = b[i] * Pow(a[i], p - <span class="number">2</span>) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    fwt(x, <span class="number">1</span>);<span class="comment">//逆fwt</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, x[i]);</span><br><span class="line"><span class="comment">//    实际上我们如果要算逆fwt也可以这样求</span></span><br><span class="line"><span class="comment">//    for (int i = 0; i &lt; n; ++i)</span></span><br><span class="line"><span class="comment">//        printf("%lld\n", x[i] * Pow(n, p - 2) % p);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;Niuniu has recently learned how to use Gaussian elimination to solve systems of linear equations.&lt;br&gt;Given n and $a[i]$, where $n$ is a power of $2$, let’s consider an $n\times n$ matrix $A$.&lt;/p&gt;
&lt;p&gt;The index of $A[i][j]$ and $a[i]$ are numbered from $0$.&lt;br&gt;The element $A[i][j]$ satisfies $A[i][j] = a[i\, xor\, j]$,&lt;br&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XOR&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数论" scheme="http://sqwlly.cn/categories/MathTheory/"/>
    
      <category term="位运算卷积" scheme="http://sqwlly.cn/categories/MathTheory/Fwt/"/>
    
    
      <category term="牛客" scheme="http://sqwlly.cn/tags/Nowcoder/"/>
    
      <category term="fwt" scheme="http://sqwlly.cn/tags/fwt/"/>
    
      <category term="acm" scheme="http://sqwlly.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>新的个人博客开张啦～</title>
    <link href="http://sqwlly.cn/2018/08/23/newBlog/"/>
    <id>http://sqwlly.cn/2018/08/23/newBlog/</id>
    <published>2018-08-23T06:33:33.000Z</published>
    <updated>2018-12-19T15:20:31.993Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br><strong>日拱一卒无有尽，功不唐捐终入海</strong></blockquote><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&lt;strong&gt;日拱一卒无有尽，功不唐捐终入海&lt;/strong&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂集" scheme="http://sqwlly.cn/categories/Myself/"/>
    
    
      <category term="杂集" scheme="http://sqwlly.cn/tags/%E6%9D%82%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>关于欧拉定理的一些知识</title>
    <link href="http://sqwlly.cn/2018/08/23/eluer/"/>
    <id>http://sqwlly.cn/2018/08/23/eluer/</id>
    <published>2018-08-23T01:29:47.000Z</published>
    <updated>2018-10-27T06:06:31.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a><a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/891345?fr=aladdin" target="_blank" rel="noopener">欧拉定理</a></h1><p>$$a^{\varphi(n)}\equiv 1(mod\:n),\:gcd(a,n)=1$$</p><p>对于正整数$n$，代表小于等于$n$的与$n$互质的数的个数，记作$\varphi(n)$。<br>比如$\varphi(6)=2$，因为与$6$互质并且小于等于$6$的正整数有$1,5$。<br><a id="more"></a></p><h1 id="扩展欧拉定理-降幂公式"><a href="#扩展欧拉定理-降幂公式" class="headerlink" title="扩展欧拉定理(降幂公式)"></a>扩展欧拉定理(降幂公式)</h1><p>$$  a^b \equiv<br>\begin{cases}<br>a^{b \%\varphi(p)},  &amp; \text{gcd(a,p)$\:$=$\:$1}\\\ <br>a^b, &amp; \text{gcd(a,p)$\:$$\not=$$\:$1,$\: b\:$&lt; $\varphi$(p)}\\\\<br>a^{b \%\varphi(p)+\varphi(p)},&amp;\text{gcd(a,p)$\:$$\not=$$\:$1,$\: b\:$$\geq$ $\varphi$(p)}\end{cases}<br>\pmod p$$  </p><p>除此之外呢，欧拉定理有以下几个性质，<br>$1.\:$如果$n$为某一素数$p$，则有$\varphi(p)=p-1$。因为$p$为素数，因子只有$1$和$p$，而$p$和$p$不互质，所以$ \varphi(p)=p-1$。</p><p>实际上呢，欧拉定理是费马小定理的一种推广，我们利用性质$1$就可以很容易证明。<br>费马小定理：$a^{p-1}\equiv 1(mod\:p),gcd(a,p)=1$。因为$p$为质数，所以有$\varphi(p)=p-1$，代入欧拉定理即可。<br>推论：$a^p\equiv a(mod\:p)$，如果$a$能被$p$整除。</p><p>$2.\:$如果$n$为某一素数$p$的幂次，则有$\varphi(p^a)=(p-1)\cdot p^{a-1}$。因为比$p^a$小的正整数有$p^a-1$个，能被$p$整除的数有$p^{a-1}-1$个（将$1\to p^a-1$之间$p$的倍数筛去），所以$\varphi(p^a)=p^a-1-(p^{a-1}-1)=(p-1)\cdot p^{a-1}$。</p><p>$3.\:$如果$n$为任意两个正整数$a$和$b$的乘积（$a$和$b$互质），那么有$\varphi(a\cdot b)=\varphi(a)\cdot \varphi(b)$。我们设$x=\phi(i)$（即和$a\cdot b$互质的数），那么就有<br>$$(S):\begin{cases}<br>x_1\equiv t_1(mod\:a) \:(gcd(t_1,a)=1)\\<br>x_2\equiv t_2(mod\:b) \:(gcd(t_2,b)=1)<br>\end{cases}$$那么我们根据<a href="https://baike.baidu.com/item/%E5%AD%99%E5%AD%90%E5%AE%9A%E7%90%86/2841597?fromtitle=%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86&amp;fromid=11200132&amp;fr=aladdin" target="_blank" rel="noopener">中国剩余定理</a>可知，对于任意$t_1,t_2$，方程组$(S)$的解在区间$[1,a\cdot b)$有唯一解与之对应。$t_1$的取值有$\varphi(a)$个，$t_2$的取值有$\varphi(b)$个。<br>所以$\varphi(a\cdot b)=\varphi(a)\cdot \varphi(b)$。</p><p>$4.\:$设$n=p_1^{e_1}\cdot p_2^{e_2}\cdot p_3^{e_3}……p_k^{e_k}$（$p_i$为素数），则有<br>$\varphi(n)=n\cdot(1-\frac{1}{p_1})\cdot(1-\frac{1}{p_2})\cdot(1-\frac{1}{p_3})……(1-\frac{1}{p_k})$。<br>根据性质$2$和性质$3$就可以很好的推出：因为$p_i$都为素数，所以每一个$p_i$都是互质的，所以同样$p_i^{e_i}$也是互质的。因此由性质$2$：$\varphi(p_i^{e_i})=p_i^{e_i}-1-(p_i^{e_i-1}-1)=p_i^{e_i}\cdot (1-\frac{1}{p_i})$，和性质$3$：$\varphi(p_1^{e_1}\cdot p_2^{e_2}\cdot p_3^{e_3}……p_k^{e_k})=\varphi(p_1^{e_1})\cdot \varphi(p_2^{e_2})\cdot \varphi(p_3^{e_3})……\varphi(p_k^{e_k})$，可以推出$\varphi(n)=n\cdot(1-\frac{1}{p_1})\cdot(1-\frac{1}{p_2})\cdot(1-\frac{1}{p_3})……(1-\frac{1}{p_k})$。</p><h1 id="欧拉函数的线性筛法"><a href="#欧拉函数的线性筛法" class="headerlink" title="欧拉函数的线性筛法"></a>欧拉函数的线性筛法</h1><p>根据如下三个性质可以完成线性筛法。<br>$1.\:\:\varphi(p)=p-1$<br>$2.\:\:\varphi(p\cdot i)=p\cdot \varphi(i)\:\:(p\%i=0)$<br>$3.\:\:\varphi(p\cdot i)=(p-1)\cdot \varphi(i)\:\:(p\%i\not=0)$<br>(具体证明就不证啦啦～作为模板使用就好啦^_^)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPhi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//φ(1) = 1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">phi[i] = i - <span class="number">1</span>; <span class="comment">//性质1</span></span><br><span class="line">prime[++cnt] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i * prime[j] &gt; n) <span class="keyword">break</span>;</span><br><span class="line">vis[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)&#123; <span class="comment">//性质2</span></span><br><span class="line">phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">phi[i * prime[j]] = phi[i] * phi[prime[j]]; <span class="comment">//性质3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欧拉定理&quot;&gt;&lt;a href=&quot;#欧拉定理&quot; class=&quot;headerlink&quot; title=&quot;欧拉定理&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/891345?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;欧拉定理&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;$$a^{\varphi(n)}\equiv 1(mod\:n),\:gcd(a,n)=1$$&lt;/p&gt;
&lt;p&gt;对于正整数$n$，代表小于等于$n$的与$n$互质的数的个数，记作$\varphi(n)$。&lt;br&gt;比如$\varphi(6)=2$，因为与$6$互质并且小于等于$6$的正整数有$1,5$。&lt;br&gt;
    
    </summary>
    
      <category term="数论" scheme="http://sqwlly.cn/categories/MathTheory/"/>
    
      <category term="欧拉定理" scheme="http://sqwlly.cn/categories/MathTheory/eluer/"/>
    
    
      <category term="数论" scheme="http://sqwlly.cn/tags/MathTheory/"/>
    
      <category term="欧拉定理" scheme="http://sqwlly.cn/tags/eluer/"/>
    
      <category term="欧拉降幂" scheme="http://sqwlly.cn/tags/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
  </entry>
  
</feed>
